{"version":3,"file":"blackAndWhitePostProcess.js","sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/blackAndWhitePostProcess.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAK5C,OAAO,mCAAmC,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AAKpE;;GAEG;AACH;IAA8C,4CAAW;IAerD;;;;;;;;;OASG;IACH,kCAAY,IAAY,EAAE,OAAoC,EAAE,MAAc,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB;QAA1I,YACI,kBAAM,IAAI,EAAE,eAAe,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC,SAKlG;QA9BD;;WAEG;QAEI,YAAM,GAAG,CAAC,CAAC;QAuBd,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;;IACP,CAAC;IAxBD;;;OAGG;IACI,+CAAY,GAAnB;QACI,OAAO,0BAA0B,CAAC;IACtC,CAAC;IAoBD;;;;;;OAMG;IACW,+BAAM,GAApB,UAAqB,iBAAsB,EAAE,YAAoB,EAAE,KAAY,EAAE,OAAe;QAC5F,OAAO,mBAAmB,CAAC,KAAK,CAC5B;YACI,OAAO,IAAI,wBAAwB,CAC/B,iBAAiB,CAAC,IAAI,EACtB,iBAAiB,CAAC,OAAO,EACzB,YAAY,EACZ,iBAAiB,CAAC,wBAAwB,EAC1C,KAAK,CAAC,SAAS,EAAE,EACjB,iBAAiB,CAAC,QAAQ,CAC7B,CAAC;QACN,CAAC,EACD,iBAAiB,EACjB,KAAK,EACL,OAAO,CACV,CAAC;IACN,CAAC;IAnDD;QADC,SAAS,EAAE;4DACM;IAoDtB,+BAAC;CAAA,AAzDD,CAA8C,WAAW,GAyDxD;SAzDY,wBAAwB;AA2DrC,aAAa,CAAC,kCAAkC,EAAE,wBAAwB,CAAC,CAAC","sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/blackAndWhite.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process used to render in black and white\r\n */\r\nexport class BlackAndWhitePostProcess extends PostProcess {\r\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\r\n    @serialize()\r\n    public degree = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlackAndWhitePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlackAndWhitePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a black and white post process\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Camera, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"degree\", this.degree);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlackAndWhitePostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new BlackAndWhitePostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);\r\n"]}