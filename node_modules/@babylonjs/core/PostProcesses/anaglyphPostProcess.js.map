{"version":3,"file":"anaglyphPostProcess.js","sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/anaglyphPostProcess.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAI5C,OAAO,8BAA8B,CAAC;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD;;GAEG;AACH;IAAyC,uCAAW;IAWhD;;;;;;;;OAQG;IACH,6BAAY,IAAY,EAAE,OAAoC,EAAE,UAAoB,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB;QAAhJ,YACI,kBAAM,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC,SAMzG;QALG,KAAI,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;QAEpD,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,MAAM,CAAC,yBAAyB,CAAC,aAAa,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;;IACP,CAAC;IAxBD;;;OAGG;IACI,0CAAY,GAAnB;QACI,OAAO,qBAAqB,CAAC;IACjC,CAAC;IAmBL,0BAAC;AAAD,CAAC,AA5BD,CAAyC,WAAW,GA4BnD;;AAED,aAAa,CAAC,6BAA6B,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\nimport \"../Shaders/anaglyph.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * Postprocess used to generate anaglyphic rendering\r\n */\r\nexport class AnaglyphPostProcess extends PostProcess {\r\n    private _passedProcess: Nullable<PostProcess>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"AnaglyphPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"AnaglyphPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new AnaglyphPostProcess\r\n     * @param name defines postprocess name\r\n     * @param options defines creation options or target ratio scale\r\n     * @param rigCameras defines cameras using this postprocess\r\n     * @param samplingMode defines required sampling mode (BABYLON.Texture.NEAREST_SAMPLINGMODE by default)\r\n     * @param engine defines hosting engine\r\n     * @param reusable defines if the postprocess will be reused multiple times per frame\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, rigCameras: Camera[], samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"anaglyph\", null, [\"leftSampler\"], options, rigCameras[1], samplingMode, engine, reusable);\r\n        this._passedProcess = rigCameras[0]._rigPostProcess;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"leftSampler\", this._passedProcess);\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.AnaglyphPostProcess\", AnaglyphPostProcess);\r\n"]}