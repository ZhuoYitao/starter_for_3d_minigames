{"version":3,"file":"chromaticAberrationPostProcess.js","sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/chromaticAberrationPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/chromaticAberration.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\r\nexport class ChromaticAberrationPostProcess extends PostProcess {\r\n    /**\r\n     * The amount of separation of rgb channels (default: 30)\r\n     */\r\n    @serialize()\r\n    aberrationAmount = 30;\r\n\r\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\r\n    @serialize()\r\n    radialIntensity = 0;\r\n\r\n    /**\r\n     * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\r\n    @serialize()\r\n    direction = new Vector2(0.707, 0.707);\r\n\r\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\r\n     */\r\n    @serialize()\r\n    centerPosition = new Vector2(0.5, 0.5);\r\n\r\n    /** The width of the screen to apply the effect on */\r\n    @serialize()\r\n    screenWidth: number;\r\n\r\n    /** The height of the screen to apply the effect on */\r\n    @serialize()\r\n    screenHeight: number;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ChromaticAberrationPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ChromaticAberrationPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ChromaticAberrationPostProcess\r\n     * @param name The name of the effect.\r\n     * @param screenWidth The width of the screen to apply the effect on.\r\n     * @param screenHeight The height of the screen to apply the effect on.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        screenWidth: number,\r\n        screenHeight: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"],\r\n            [],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            blockCompilation\r\n        );\r\n\r\n        this.screenWidth = screenWidth;\r\n        this.screenHeight = screenHeight;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"chromatic_aberration\", this.aberrationAmount);\r\n            effect.setFloat(\"screen_width\", screenWidth);\r\n            effect.setFloat(\"screen_height\", screenHeight);\r\n            effect.setFloat(\"radialIntensity\", this.radialIntensity);\r\n            effect.setFloat2(\"direction\", this.direction.x, this.direction.y);\r\n            effect.setFloat2(\"centerPosition\", this.centerPosition.x, this.centerPosition.y);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ChromaticAberrationPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ChromaticAberrationPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.screenWidth,\r\n                    parsedPostProcess.screenHeight,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType,\r\n                    false\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);\r\n"]}