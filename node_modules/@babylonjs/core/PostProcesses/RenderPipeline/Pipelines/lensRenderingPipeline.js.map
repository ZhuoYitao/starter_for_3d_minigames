{"version":3,"file":"lensRenderingPipeline.js","sourceRoot":"","sources":["../../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport type { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/chromaticAberration.fragment\";\r\nimport \"../../../Shaders/lensHighlights.fragment\";\r\nimport \"../../../Shaders/depthOfField.fragment\";\r\n\r\n/**\r\n * BABYLON.JS Chromatic Aberration GLSL Shader\r\n * Author: Olivier Guyot\r\n * Separates very slightly R, G and B colors on the edges of the screen\r\n * Inspired by Francois Tarlier & Martins Upitis\r\n */\r\nexport class LensRenderingPipeline extends PostProcessRenderPipeline {\r\n    // Lens effects can be of the following:\r\n    // - chromatic aberration (slight shift of RGB colors)\r\n    // - blur on the edge of the lens\r\n    // - lens distortion\r\n    // - depth-of-field blur & highlights enhancing\r\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\r\n    // - grain effect (noise or custom texture)\r\n\r\n    // Two additional texture samplers are needed:\r\n    // - depth map (for depth-of-field)\r\n    // - grain texture\r\n\r\n    /**\r\n     * @ignore\r\n     * The chromatic aberration PostProcess id in the pipeline\r\n     */\r\n    public LensChromaticAberrationEffect: string = \"LensChromaticAberrationEffect\";\r\n    /**\r\n     * @ignore\r\n     * The highlights enhancing PostProcess id in the pipeline\r\n     */\r\n    public HighlightsEnhancingEffect: string = \"HighlightsEnhancingEffect\";\r\n    /**\r\n     * @ignore\r\n     * The depth-of-field PostProcess id in the pipeline\r\n     */\r\n    public LensDepthOfFieldEffect: string = \"LensDepthOfFieldEffect\";\r\n\r\n    private _scene: Scene;\r\n    private _depthTexture: RenderTargetTexture;\r\n    private _grainTexture: Texture;\r\n\r\n    private _chromaticAberrationPostProcess: PostProcess;\r\n    private _highlightsPostProcess: PostProcess;\r\n    private _depthOfFieldPostProcess: PostProcess;\r\n\r\n    private _edgeBlur: number;\r\n    private _grainAmount: number;\r\n    private _chromaticAberration: number;\r\n    private _distortion: number;\r\n    private _highlightsGain: number;\r\n    private _highlightsThreshold: number;\r\n    private _dofDistance: number;\r\n    private _dofAperture: number;\r\n    private _dofDarken: number;\r\n    private _dofPentagon: boolean;\r\n    private _blurNoise: boolean;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * Effect parameters are as follow:\r\n     * {\r\n     *      chromatic_aberration: number;       // from 0 to x (1 for realism)\r\n     *      edge_blur: number;                  // from 0 to x (1 for realism)\r\n     *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\r\n     *      grain_amount: number;               // from 0 to 1\r\n     *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\r\n     *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\r\n     *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\r\n     *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\r\n     *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\r\n     *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\r\n     *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\r\n     *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\r\n     * }\r\n     * Note: if an effect parameter is unset, effect is disabled\r\n     *\r\n     * @param name The rendering pipeline name\r\n     * @param parameters - An object containing all parameters (see above)\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, parameters: any, scene: Scene, ratio: number = 1.0, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Fetch texture samplers\r\n        this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\r\n        if (parameters.grain_texture) {\r\n            this._grainTexture = parameters.grain_texture;\r\n        } else {\r\n            this._createGrainTexture();\r\n        }\r\n\r\n        // save parameters\r\n        this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\r\n        this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\r\n        this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\r\n        this._distortion = parameters.distortion ? parameters.distortion : 0;\r\n        this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\r\n        this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\r\n        this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\r\n        this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\r\n        this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\r\n        this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\r\n        this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\r\n\r\n        // Create effects\r\n        this._createChromaticAberrationPostProcess(ratio);\r\n        this._createHighlightsPostProcess(ratio);\r\n        this._createDepthOfFieldPostProcess(ratio / 4);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.LensChromaticAberrationEffect,\r\n                () => {\r\n                    return this._chromaticAberrationPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.HighlightsEnhancingEffect,\r\n                () => {\r\n                    return this._highlightsPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.LensDepthOfFieldEffect,\r\n                () => {\r\n                    return this._depthOfFieldPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        if (this._highlightsGain === -1) {\r\n            this._disableEffect(this.HighlightsEnhancingEffect, null);\r\n        }\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"LensRenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"LensRenderingPipeline\";\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets associated scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge blur\r\n     */\r\n    public get edgeBlur(): number {\r\n        return this._edgeBlur;\r\n    }\r\n\r\n    public set edgeBlur(value: number) {\r\n        this.setEdgeBlur(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the grain amount\r\n     */\r\n    public get grainAmount(): number {\r\n        return this._grainAmount;\r\n    }\r\n\r\n    public set grainAmount(value: number) {\r\n        this.setGrainAmount(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the chromatic aberration amount\r\n     */\r\n    public get chromaticAberration(): number {\r\n        return this._chromaticAberration;\r\n    }\r\n\r\n    public set chromaticAberration(value: number) {\r\n        this.setChromaticAberration(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field aperture\r\n     */\r\n    public get dofAperture(): number {\r\n        return this._dofAperture;\r\n    }\r\n\r\n    public set dofAperture(value: number) {\r\n        this.setAperture(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge distortion\r\n     */\r\n    public get edgeDistortion(): number {\r\n        return this._distortion;\r\n    }\r\n\r\n    public set edgeDistortion(value: number) {\r\n        this.setEdgeDistortion(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field distortion\r\n     */\r\n    public get dofDistortion(): number {\r\n        return this._dofDistance;\r\n    }\r\n\r\n    public set dofDistortion(value: number) {\r\n        this.setFocusDistance(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the darken out of focus amount\r\n     */\r\n    public get darkenOutOfFocus(): number {\r\n        return this._dofDarken;\r\n    }\r\n\r\n    public set darkenOutOfFocus(value: number) {\r\n        this.setDarkenOutOfFocus(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if blur noise is enabled\r\n     */\r\n    public get blurNoise(): boolean {\r\n        return this._blurNoise;\r\n    }\r\n\r\n    public set blurNoise(value: boolean) {\r\n        this._blurNoise = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\r\n     */\r\n    public get pentagonBokeh(): boolean {\r\n        return this._pentagonBokehIsEnabled;\r\n    }\r\n\r\n    public set pentagonBokeh(value: boolean) {\r\n        if (value) {\r\n            this.enablePentagonBokeh();\r\n        } else {\r\n            this.disablePentagonBokeh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight grain amount\r\n     */\r\n    public get highlightsGain(): number {\r\n        return this._highlightsGain;\r\n    }\r\n\r\n    public set highlightsGain(value: number) {\r\n        this.setHighlightsGain(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight threshold\r\n     */\r\n    public get highlightsThreshold(): number {\r\n        return this._highlightsThreshold;\r\n    }\r\n\r\n    public set highlightsThreshold(value: number) {\r\n        this.setHighlightsThreshold(value);\r\n    }\r\n\r\n    // public methods (self explanatory)\r\n    /**\r\n     * Sets the amount of blur at the edges\r\n     * @param amount blur amount\r\n     */\r\n    public setEdgeBlur(amount: number) {\r\n        this._edgeBlur = amount;\r\n    }\r\n    /**\r\n     * Sets edge blur to 0\r\n     */\r\n    public disableEdgeBlur() {\r\n        this._edgeBlur = 0;\r\n    }\r\n    /**\r\n     * Sets the amount of grain\r\n     * @param amount Amount of grain\r\n     */\r\n    public setGrainAmount(amount: number) {\r\n        this._grainAmount = amount;\r\n    }\r\n    /**\r\n     * Set grain amount to 0\r\n     */\r\n    public disableGrain() {\r\n        this._grainAmount = 0;\r\n    }\r\n    /**\r\n     * Sets the chromatic aberration amount\r\n     * @param amount amount of chromatic aberration\r\n     */\r\n    public setChromaticAberration(amount: number) {\r\n        this._chromaticAberration = amount;\r\n    }\r\n    /**\r\n     * Sets chromatic aberration amount to 0\r\n     */\r\n    public disableChromaticAberration() {\r\n        this._chromaticAberration = 0;\r\n    }\r\n    /**\r\n     * Sets the EdgeDistortion amount\r\n     * @param amount amount of EdgeDistortion\r\n     */\r\n    public setEdgeDistortion(amount: number) {\r\n        this._distortion = amount;\r\n    }\r\n    /**\r\n     * Sets edge distortion to 0\r\n     */\r\n    public disableEdgeDistortion() {\r\n        this._distortion = 0;\r\n    }\r\n    /**\r\n     * Sets the FocusDistance amount\r\n     * @param amount amount of FocusDistance\r\n     */\r\n    public setFocusDistance(amount: number) {\r\n        this._dofDistance = amount;\r\n    }\r\n    /**\r\n     * Disables depth of field\r\n     */\r\n    public disableDepthOfField() {\r\n        this._dofDistance = -1;\r\n    }\r\n    /**\r\n     * Sets the Aperture amount\r\n     * @param amount amount of Aperture\r\n     */\r\n    public setAperture(amount: number) {\r\n        this._dofAperture = amount;\r\n    }\r\n    /**\r\n     * Sets the DarkenOutOfFocus amount\r\n     * @param amount amount of DarkenOutOfFocus\r\n     */\r\n    public setDarkenOutOfFocus(amount: number) {\r\n        this._dofDarken = amount;\r\n    }\r\n\r\n    private _pentagonBokehIsEnabled = false;\r\n    /**\r\n     * Creates a pentagon bokeh effect\r\n     */\r\n    public enablePentagonBokeh() {\r\n        this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\r\n        this._pentagonBokehIsEnabled = true;\r\n    }\r\n    /**\r\n     * Disables the pentagon bokeh effect\r\n     */\r\n    public disablePentagonBokeh() {\r\n        this._pentagonBokehIsEnabled = false;\r\n        this._highlightsPostProcess.updateEffect();\r\n    }\r\n    /**\r\n     * Enables noise blur\r\n     */\r\n    public enableNoiseBlur() {\r\n        this._blurNoise = true;\r\n    }\r\n    /**\r\n     * Disables noise blur\r\n     */\r\n    public disableNoiseBlur() {\r\n        this._blurNoise = false;\r\n    }\r\n    /**\r\n     * Sets the HighlightsGain amount\r\n     * @param amount amount of HighlightsGain\r\n     */\r\n    public setHighlightsGain(amount: number) {\r\n        this._highlightsGain = amount;\r\n    }\r\n    /**\r\n     * Sets the HighlightsThreshold amount\r\n     * @param amount amount of HighlightsThreshold\r\n     */\r\n    public setHighlightsThreshold(amount: number) {\r\n        if (this._highlightsGain === -1) {\r\n            this._highlightsGain = 1.0;\r\n        }\r\n        this._highlightsThreshold = amount;\r\n    }\r\n    /**\r\n     * Disables highlights\r\n     */\r\n    public disableHighlights() {\r\n        this._highlightsGain = -1;\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        (<any>this._chromaticAberrationPostProcess) = null;\r\n        (<any>this._highlightsPostProcess) = null;\r\n        (<any>this._depthOfFieldPostProcess) = null;\r\n\r\n        this._grainTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createChromaticAberrationPostProcess(ratio: number): void {\r\n        this._chromaticAberrationPostProcess = new PostProcess(\r\n            \"LensChromaticAberration\",\r\n            \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\r\n            [], // samplers\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._chromaticAberrationPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"chromatic_aberration\", this._chromaticAberration);\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n            effect.setFloat(\"radialIntensity\", 1);\r\n            effect.setFloat2(\"direction\", 17, 17);\r\n            effect.setFloat2(\"centerPosition\", 0.5, 0.5);\r\n        };\r\n    }\r\n\r\n    // highlights enhancing\r\n    private _createHighlightsPostProcess(ratio: number): void {\r\n        this._highlightsPostProcess = new PostProcess(\r\n            \"LensHighlights\",\r\n            \"lensHighlights\",\r\n            [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\r\n            [], // samplers\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            this._dofPentagon ? \"#define PENTAGON\\n\" : \"\"\r\n        );\r\n\r\n        this._highlightsPostProcess.externalTextureSamplerBinding = true;\r\n        this._highlightsPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"gain\", this._highlightsGain);\r\n            effect.setFloat(\"threshold\", this._highlightsThreshold);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._chromaticAberrationPostProcess);\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n        };\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createDepthOfFieldPostProcess(ratio: number): void {\r\n        this._depthOfFieldPostProcess = new PostProcess(\r\n            \"LensDepthOfField\",\r\n            \"depthOfField\",\r\n            [\r\n                \"grain_amount\",\r\n                \"blur_noise\",\r\n                \"screen_width\",\r\n                \"screen_height\",\r\n                \"distortion\",\r\n                \"dof_enabled\",\r\n                \"screen_distance\",\r\n                \"aperture\",\r\n                \"darken\",\r\n                \"edge_blur\",\r\n                \"highlights\",\r\n                \"near\",\r\n                \"far\",\r\n            ],\r\n            [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"],\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\r\n        this._depthOfFieldPostProcess.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"depthSampler\", this._depthTexture);\r\n            effect.setTexture(\"grainSampler\", this._grainTexture);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._highlightsPostProcess);\r\n            effect.setTextureFromPostProcess(\"highlightsSampler\", this._depthOfFieldPostProcess);\r\n\r\n            effect.setFloat(\"grain_amount\", this._grainAmount);\r\n            effect.setBool(\"blur_noise\", this._blurNoise);\r\n\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n\r\n            effect.setFloat(\"distortion\", this._distortion);\r\n\r\n            effect.setBool(\"dof_enabled\", this._dofDistance !== -1);\r\n            effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / this._dofDistance));\r\n            effect.setFloat(\"aperture\", this._dofAperture);\r\n            effect.setFloat(\"darken\", this._dofDarken);\r\n\r\n            effect.setFloat(\"edge_blur\", this._edgeBlur);\r\n\r\n            effect.setBool(\"highlights\", this._highlightsGain !== -1);\r\n\r\n            if (this._scene.activeCamera) {\r\n                effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n                effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            }\r\n        };\r\n    }\r\n\r\n    // creates a black and white random noise texture, 512x512\r\n    private _createGrainTexture(): void {\r\n        const size = 512;\r\n\r\n        this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\r\n        this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        const context = (<DynamicTexture>this._grainTexture).getContext();\r\n\r\n        const rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        let value;\r\n        for (let x = 0; x < size; x++) {\r\n            for (let y = 0; y < size; y++) {\r\n                value = Math.floor(rand(0.42, 0.58) * 255);\r\n                context.fillStyle = \"rgb(\" + value + \", \" + value + \", \" + value + \")\";\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n        (<DynamicTexture>this._grainTexture).update(false);\r\n    }\r\n}\r\n"]}