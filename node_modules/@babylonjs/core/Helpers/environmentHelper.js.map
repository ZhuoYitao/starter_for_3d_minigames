{"version":3,"file":"environmentHelper.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Helpers/environmentHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture\";\r\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Represents the different options available during the creation of\r\n * a Environment helper.\r\n *\r\n * This can control the default ground, skybox and image processing setup of your scene.\r\n */\r\nexport interface IEnvironmentHelperOptions {\r\n    /**\r\n     * Specifies whether or not to create a ground.\r\n     * True by default.\r\n     */\r\n    createGround: boolean;\r\n    /**\r\n     * Specifies the ground size.\r\n     * 15 by default.\r\n     */\r\n    groundSize: number;\r\n    /**\r\n     * The texture used on the ground for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    groundTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the ground texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    groundColor: Color3;\r\n    /**\r\n     * Specifies the ground opacity.\r\n     * 1 by default.\r\n     */\r\n    groundOpacity: number;\r\n    /**\r\n     * Enables the ground to receive shadows.\r\n     * True by default.\r\n     */\r\n    enableGroundShadow: boolean;\r\n    /**\r\n     * Helps preventing the shadow to be fully black on the ground.\r\n     * 0.5 by default.\r\n     */\r\n    groundShadowLevel: number;\r\n    /**\r\n     * Creates a mirror texture attach to the ground.\r\n     * false by default.\r\n     */\r\n    enableGroundMirror: boolean;\r\n    /**\r\n     * Specifies the ground mirror size ratio.\r\n     * 0.3 by default as the default kernel is 64.\r\n     */\r\n    groundMirrorSizeRatio: number;\r\n    /**\r\n     * Specifies the ground mirror blur kernel size.\r\n     * 64 by default.\r\n     */\r\n    groundMirrorBlurKernel: number;\r\n    /**\r\n     * Specifies the ground mirror visibility amount.\r\n     * 1 by default\r\n     */\r\n    groundMirrorAmount: number;\r\n    /**\r\n     * Specifies the ground mirror reflectance weight.\r\n     * This uses the standard weight of the background material to setup the fresnel effect\r\n     * of the mirror.\r\n     * 1 by default.\r\n     */\r\n    groundMirrorFresnelWeight: number;\r\n    /**\r\n     * Specifies the ground mirror Falloff distance.\r\n     * This can helps reducing the size of the reflection.\r\n     * 0 by Default.\r\n     */\r\n    groundMirrorFallOffDistance: number;\r\n    /**\r\n     * Specifies the ground mirror texture type.\r\n     * Unsigned Int by Default.\r\n     */\r\n    groundMirrorTextureType: number;\r\n    /**\r\n     * Specifies a bias applied to the ground vertical position to prevent z-fighting with\r\n     * the shown objects.\r\n     */\r\n    groundYBias: number;\r\n\r\n    /**\r\n     * Specifies whether or not to create a skybox.\r\n     * True by default.\r\n     */\r\n    createSkybox: boolean;\r\n    /**\r\n     * Specifies the skybox size.\r\n     * 20 by default.\r\n     */\r\n    skyboxSize: number;\r\n    /**\r\n     * The texture used on the skybox for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    skyboxTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the skybox texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    skyboxColor: Color3;\r\n\r\n    /**\r\n     * The background rotation around the Y axis of the scene.\r\n     * This helps aligning the key lights of your scene with the background.\r\n     * 0 by default.\r\n     */\r\n    backgroundYRotation: number;\r\n\r\n    /**\r\n     * Compute automatically the size of the elements to best fit with the scene.\r\n     */\r\n    sizeAuto: boolean;\r\n\r\n    /**\r\n     * Default position of the rootMesh if autoSize is not true.\r\n     */\r\n    rootPosition: Vector3;\r\n\r\n    /**\r\n     * Sets up the image processing in the scene.\r\n     * true by default.\r\n     */\r\n    setupImageProcessing: boolean;\r\n\r\n    /**\r\n     * The texture used as your environment texture in the scene.\r\n     * Comes from the BabylonJS CDN by default and in use if setupImageProcessing is true.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    environmentTexture: string | BaseTexture;\r\n\r\n    /**\r\n     * The value of the exposure to apply to the scene.\r\n     * 0.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraExposure: number;\r\n\r\n    /**\r\n     * The value of the contrast to apply to the scene.\r\n     * 1.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraContrast: number;\r\n\r\n    /**\r\n     * Specifies whether or not tonemapping should be enabled in the scene.\r\n     * true by default if setupImageProcessing is true.\r\n     */\r\n    toneMappingEnabled: boolean;\r\n}\r\n\r\ninterface ISceneSize {\r\n    groundSize: number;\r\n    skyboxSize: number;\r\n    rootPosition: Vector3;\r\n}\r\n\r\n/**\r\n * The Environment helper class can be used to add a fully featured none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n */\r\nexport class EnvironmentHelper {\r\n    /**\r\n     * Default ground texture URL.\r\n     */\r\n    private static _GroundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\r\n\r\n    /**\r\n     * Default skybox texture URL.\r\n     */\r\n    private static _SkyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\r\n\r\n    /**\r\n     * Default environment texture URL.\r\n     */\r\n    private static _EnvironmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\r\n\r\n    /**\r\n     * Creates the default options for the helper.\r\n     */\r\n    private static _GetDefaultOptions(): IEnvironmentHelperOptions {\r\n        return {\r\n            createGround: true,\r\n            groundSize: 15,\r\n            groundTexture: this._GroundTextureCDNUrl,\r\n            groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n            groundOpacity: 0.9,\r\n            enableGroundShadow: true,\r\n            groundShadowLevel: 0.5,\r\n\r\n            enableGroundMirror: false,\r\n            groundMirrorSizeRatio: 0.3,\r\n            groundMirrorBlurKernel: 64,\r\n            groundMirrorAmount: 1,\r\n            groundMirrorFresnelWeight: 1,\r\n            groundMirrorFallOffDistance: 0,\r\n            groundMirrorTextureType: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n\r\n            groundYBias: 0.00001,\r\n\r\n            createSkybox: true,\r\n            skyboxSize: 20,\r\n            skyboxTexture: this._SkyboxTextureCDNUrl,\r\n            skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n\r\n            backgroundYRotation: 0,\r\n            sizeAuto: true,\r\n            rootPosition: Vector3.Zero(),\r\n\r\n            setupImageProcessing: true,\r\n            environmentTexture: this._EnvironmentTextureCDNUrl,\r\n            cameraExposure: 0.8,\r\n            cameraContrast: 1.2,\r\n            toneMappingEnabled: true,\r\n        };\r\n    }\r\n\r\n    private _rootMesh: Mesh;\r\n    /**\r\n     * Gets the root mesh created by the helper.\r\n     */\r\n    public get rootMesh(): Mesh {\r\n        return this._rootMesh;\r\n    }\r\n\r\n    private _skybox: Nullable<Mesh>;\r\n    /**\r\n     * Gets the skybox created by the helper.\r\n     */\r\n    public get skybox(): Nullable<Mesh> {\r\n        return this._skybox;\r\n    }\r\n\r\n    private _skyboxTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the skybox texture created by the helper.\r\n     */\r\n    public get skyboxTexture(): Nullable<BaseTexture> {\r\n        return this._skyboxTexture;\r\n    }\r\n\r\n    private _skyboxMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the skybox material created by the helper.\r\n     */\r\n    public get skyboxMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._skyboxMaterial;\r\n    }\r\n\r\n    private _ground: Nullable<Mesh>;\r\n    /**\r\n     * Gets the ground mesh created by the helper.\r\n     */\r\n    public get ground(): Nullable<Mesh> {\r\n        return this._ground;\r\n    }\r\n\r\n    private _groundTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the ground texture created by the helper.\r\n     */\r\n    public get groundTexture(): Nullable<BaseTexture> {\r\n        return this._groundTexture;\r\n    }\r\n\r\n    private _groundMirror: Nullable<MirrorTexture>;\r\n    /**\r\n     * Gets the ground mirror created by the helper.\r\n     */\r\n    public get groundMirror(): Nullable<MirrorTexture> {\r\n        return this._groundMirror;\r\n    }\r\n\r\n    /**\r\n     * Gets the ground mirror render list to helps pushing the meshes\r\n     * you wish in the ground reflection.\r\n     */\r\n    public get groundMirrorRenderList(): Nullable<AbstractMesh[]> {\r\n        if (this._groundMirror) {\r\n            return this._groundMirror.renderList;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _groundMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the ground material created by the helper.\r\n     */\r\n    public get groundMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._groundMaterial;\r\n    }\r\n\r\n    /**\r\n     * Stores the creation options.\r\n     */\r\n    private readonly _scene: Scene;\r\n    private _options: IEnvironmentHelperOptions;\r\n\r\n    /**\r\n     * This observable will be notified with any error during the creation of the environment,\r\n     * mainly texture creation errors.\r\n     */\r\n    public onErrorObservable: Observable<{ message?: string; exception?: any }>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param options Defines the options we want to customize the helper\r\n     * @param scene The scene to add the material to\r\n     */\r\n    constructor(options: Partial<IEnvironmentHelperOptions>, scene: Scene) {\r\n        this._options = {\r\n            ...EnvironmentHelper._GetDefaultOptions(),\r\n            ...options,\r\n        };\r\n        this._scene = scene;\r\n        this.onErrorObservable = new Observable();\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Updates the background according to the new options\r\n     * @param options\r\n     */\r\n    public updateOptions(options: Partial<IEnvironmentHelperOptions>) {\r\n        const newOptions = {\r\n            ...this._options,\r\n            ...options,\r\n        };\r\n\r\n        if (this._ground && !newOptions.createGround) {\r\n            this._ground.dispose();\r\n            this._ground = null;\r\n        }\r\n\r\n        if (this._groundMaterial && !newOptions.createGround) {\r\n            this._groundMaterial.dispose();\r\n            this._groundMaterial = null;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            if (this._options.groundTexture != newOptions.groundTexture) {\r\n                this._groundTexture.dispose();\r\n                this._groundTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._skybox && !newOptions.createSkybox) {\r\n            this._skybox.dispose();\r\n            this._skybox = null;\r\n        }\r\n\r\n        if (this._skyboxMaterial && !newOptions.createSkybox) {\r\n            this._skyboxMaterial.dispose();\r\n            this._skyboxMaterial = null;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            if (this._options.skyboxTexture != newOptions.skyboxTexture) {\r\n                this._skyboxTexture.dispose();\r\n                this._skyboxTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._groundMirror && !newOptions.enableGroundMirror) {\r\n            this._groundMirror.dispose();\r\n            this._groundMirror = null;\r\n        }\r\n\r\n        if (this._scene.environmentTexture) {\r\n            if (this._options.environmentTexture != newOptions.environmentTexture) {\r\n                this._scene.environmentTexture.dispose();\r\n            }\r\n        }\r\n\r\n        this._options = newOptions;\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Sets the primary color of all the available elements.\r\n     * @param color the main color to affect to the ground and the background\r\n     */\r\n    public setMainColor(color: Color3): void {\r\n        if (this.groundMaterial) {\r\n            this.groundMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.skyboxMaterial) {\r\n            this.skyboxMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.groundMirror) {\r\n            this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the image processing according to the specified options.\r\n     */\r\n    private _setupImageProcessing(): void {\r\n        if (this._options.setupImageProcessing) {\r\n            this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\r\n            this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\r\n            this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\r\n            this._setupEnvironmentTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the environment texture according to the specified options.\r\n     */\r\n    private _setupEnvironmentTexture(): void {\r\n        if (this._scene.environmentTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.environmentTexture instanceof BaseTexture) {\r\n            this._scene.environmentTexture = this._options.environmentTexture;\r\n            return;\r\n        }\r\n\r\n        const environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\r\n        this._scene.environmentTexture = environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the background according to the specified options.\r\n     */\r\n    private _setupBackground(): void {\r\n        if (!this._rootMesh) {\r\n            this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\r\n        }\r\n        this._rootMesh.rotation.y = this._options.backgroundYRotation;\r\n\r\n        const sceneSize = this._getSceneSize();\r\n        if (this._options.createGround) {\r\n            this._setupGround(sceneSize);\r\n            this._setupGroundMaterial();\r\n            this._setupGroundDiffuseTexture();\r\n\r\n            if (this._options.enableGroundMirror) {\r\n                this._setupGroundMirrorTexture(sceneSize);\r\n            }\r\n            this._setupMirrorInGroundMaterial();\r\n        }\r\n\r\n        if (this._options.createSkybox) {\r\n            this._setupSkybox(sceneSize);\r\n            this._setupSkyboxMaterial();\r\n            this._setupSkyboxReflectionTexture();\r\n        }\r\n\r\n        this._rootMesh.position.x = sceneSize.rootPosition.x;\r\n        this._rootMesh.position.z = sceneSize.rootPosition.z;\r\n        this._rootMesh.position.y = sceneSize.rootPosition.y;\r\n    }\r\n\r\n    /**\r\n     * Get the scene sizes according to the setup.\r\n     */\r\n    private _getSceneSize(): ISceneSize {\r\n        let groundSize = this._options.groundSize;\r\n        let skyboxSize = this._options.skyboxSize;\r\n        let rootPosition = this._options.rootPosition;\r\n        if (!this._scene.meshes || this._scene.meshes.length === 1) {\r\n            // 1 only means the root of the helper.\r\n            return { groundSize, skyboxSize, rootPosition };\r\n        }\r\n\r\n        const sceneExtends = this._scene.getWorldExtends((mesh) => {\r\n            return mesh !== this._ground && mesh !== this._rootMesh && mesh !== this._skybox;\r\n        });\r\n        const sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\r\n\r\n        if (this._options.sizeAuto) {\r\n            if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\r\n                groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            const sceneDiagonalLenght = sceneDiagonal.length();\r\n            if (sceneDiagonalLenght > groundSize) {\r\n                groundSize = sceneDiagonalLenght * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            // 10 % bigger.\r\n            groundSize *= 1.1;\r\n            skyboxSize *= 1.5;\r\n            rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\r\n            rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\r\n        }\r\n\r\n        return { groundSize, skyboxSize, rootPosition };\r\n    }\r\n\r\n    /**\r\n     * Setup the ground according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupGround(sceneSize: ISceneSize): void {\r\n        if (!this._ground || this._ground.isDisposed()) {\r\n            this._ground = CreatePlane(\"BackgroundPlane\", { size: sceneSize.groundSize }, this._scene);\r\n            this._ground.rotation.x = Math.PI / 2; // Face up by default.\r\n            this._ground.parent = this._rootMesh;\r\n            this._ground.onDisposeObservable.add(() => {\r\n                this._ground = null;\r\n            });\r\n        }\r\n\r\n        this._ground.receiveShadows = this._options.enableGroundShadow;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground material according to the specified options.\r\n     */\r\n    private _setupGroundMaterial(): void {\r\n        if (!this._groundMaterial) {\r\n            this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\r\n        }\r\n        this._groundMaterial.alpha = this._options.groundOpacity;\r\n        this._groundMaterial.alphaMode = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n        this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\r\n        this._groundMaterial.primaryColor = this._options.groundColor;\r\n        this._groundMaterial.useRGBColor = false;\r\n        this._groundMaterial.enableNoise = true;\r\n\r\n        if (this._ground) {\r\n            this._ground.material = this._groundMaterial;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the ground diffuse texture according to the specified options.\r\n     */\r\n    private _setupGroundDiffuseTexture(): void {\r\n        if (!this._groundMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.groundTexture instanceof BaseTexture) {\r\n            this._groundMaterial.diffuseTexture = this._options.groundTexture;\r\n            return;\r\n        }\r\n\r\n        this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._groundTexture.gammaSpace = false;\r\n        this._groundTexture.hasAlpha = true;\r\n        this._groundMaterial.diffuseTexture = this._groundTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground mirror texture according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupGroundMirrorTexture(sceneSize: ISceneSize): void {\r\n        const wrapping = Texture.CLAMP_ADDRESSMODE;\r\n        if (!this._groundMirror) {\r\n            this._groundMirror = new MirrorTexture(\r\n                \"BackgroundPlaneMirrorTexture\",\r\n                { ratio: this._options.groundMirrorSizeRatio },\r\n                this._scene,\r\n                false,\r\n                this._options.groundMirrorTextureType,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                true\r\n            );\r\n            this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\r\n            this._groundMirror.anisotropicFilteringLevel = 1;\r\n            this._groundMirror.wrapU = wrapping;\r\n            this._groundMirror.wrapV = wrapping;\r\n\r\n            if (this._groundMirror.renderList) {\r\n                for (let i = 0; i < this._scene.meshes.length; i++) {\r\n                    const mesh = this._scene.meshes[i];\r\n                    if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\r\n                        this._groundMirror.renderList.push(mesh);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const gammaGround = this._options.groundColor.toGammaSpace();\r\n        this._groundMirror.clearColor = new Color4(gammaGround.r, gammaGround.g, gammaGround.b, 1);\r\n        this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground to receive the mirror texture.\r\n     */\r\n    private _setupMirrorInGroundMaterial(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.reflectionTexture = this._groundMirror;\r\n            this._groundMaterial.reflectionFresnel = true;\r\n            this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\r\n            this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\r\n            this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupSkybox(sceneSize: ISceneSize): void {\r\n        if (!this._skybox || this._skybox.isDisposed()) {\r\n            this._skybox = CreateBox(\"BackgroundSkybox\", { size: sceneSize.skyboxSize, sideOrientation: Mesh.BACKSIDE }, this._scene);\r\n            this._skybox.onDisposeObservable.add(() => {\r\n                this._skybox = null;\r\n            });\r\n        }\r\n        this._skybox.parent = this._rootMesh;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox material according to the specified options.\r\n     */\r\n    private _setupSkyboxMaterial(): void {\r\n        if (!this._skybox) {\r\n            return;\r\n        }\r\n\r\n        if (!this._skyboxMaterial) {\r\n            this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\r\n        }\r\n        this._skyboxMaterial.useRGBColor = false;\r\n        this._skyboxMaterial.primaryColor = this._options.skyboxColor;\r\n        this._skyboxMaterial.enableNoise = true;\r\n\r\n        this._skybox.material = this._skyboxMaterial;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox reflection texture according to the specified options.\r\n     */\r\n    private _setupSkyboxReflectionTexture(): void {\r\n        if (!this._skyboxMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.skyboxTexture instanceof BaseTexture) {\r\n            this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\r\n            return;\r\n        }\r\n\r\n        this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        this._skyboxTexture.gammaSpace = false;\r\n        this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\r\n    }\r\n\r\n    private _errorHandler = (message?: string, exception?: any) => {\r\n        this.onErrorObservable.notifyObservers({ message: message, exception: exception });\r\n    };\r\n\r\n    /**\r\n     * Dispose all the elements created by the Helper.\r\n     */\r\n    public dispose(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.dispose(true, true);\r\n        }\r\n        if (this._skyboxMaterial) {\r\n            this._skyboxMaterial.dispose(true, true);\r\n        }\r\n        this._rootMesh.dispose(false);\r\n    }\r\n}\r\n"]}