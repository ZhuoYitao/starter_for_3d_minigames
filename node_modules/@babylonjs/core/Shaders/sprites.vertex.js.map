{"version":3,"file":"sprites.vertex.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/sprites.vertex.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,uCAAuC,CAAC;AAE/C,IAAM,IAAI,GAAG,qBAAqB,CAAC;AACnC,IAAM,MAAM,GAAG,ykCAoCb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,mBAAmB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/fogVertexDeclaration\";\n\nconst name = \"spritesVertexShader\";\nconst shader = `attribute vec4 position;\rattribute vec2 options;\rattribute vec2 offsets;\rattribute vec2 inverts;\rattribute vec4 cellInfo;\rattribute vec4 color;\runiform mat4 view;\runiform mat4 projection;\rvarying vec2 vUV;\rvarying vec4 vColor;\r#include<fogVertexDeclaration>\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\nvec3 viewPos=(view*vec4(position.xyz,1.0)).xyz; \rvec2 cornerPos;\rfloat angle=position.w;\rvec2 size=vec2(options.x,options.y);\rvec2 offset=offsets.xy;\rcornerPos=vec2(offset.x-0.5,offset.y -0.5)*size;\rvec3 rotatedCorner;\rrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.z=0.;\rviewPos+=rotatedCorner;\rgl_Position=projection*vec4(viewPos,1.0); \rvColor=color;\rvec2 uvOffset=vec2(abs(offset.x-inverts.x),abs(1.0-offset.y-inverts.y));\rvec2 uvPlace=cellInfo.xy;\rvec2 uvSize=cellInfo.zw;\rvUV.x=uvPlace.x+uvSize.x*uvOffset.x;\rvUV.y=uvPlace.y+uvSize.y*uvOffset.y;\r#ifdef FOG\nvFogDistance=viewPos;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const spritesVertexShader = { name, shader };\n"]}