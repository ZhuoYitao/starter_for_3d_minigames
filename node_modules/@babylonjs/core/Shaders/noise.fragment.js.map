{"version":3,"file":"noise.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/noise.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,kBAAkB,CAAC;AAChC,IAAM,MAAM,GAAG,soCA6Cd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,gBAAgB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"noisePixelShader\";\nconst shader = `uniform float brightness;\runiform float persistence;\runiform float timeScale;\rvarying vec2 vUV;\rvec2 hash22(vec2 p)\r{\rp=p*mat2(127.1,311.7,269.5,183.3);\rp=-1.0+2.0*fract(sin(p)*43758.5453123);\rreturn sin(p*6.283+timeScale);\r}\rfloat interpolationNoise(vec2 p)\r{\rvec2 pi=floor(p);\rvec2 pf=p-pi;\rvec2 w=pf*pf*(3.-2.*pf);\rfloat f00=dot(hash22(pi+vec2(.0,.0)),pf-vec2(.0,.0));\rfloat f01=dot(hash22(pi+vec2(.0,1.)),pf-vec2(.0,1.));\rfloat f10=dot(hash22(pi+vec2(1.0,0.)),pf-vec2(1.0,0.));\rfloat f11=dot(hash22(pi+vec2(1.0,1.)),pf-vec2(1.0,1.));\rfloat xm1=mix(f00,f10,w.x);\rfloat xm2=mix(f01,f11,w.x);\rfloat ym=mix(xm1,xm2,w.y); \rreturn ym;\r}\rfloat perlinNoise2D(float x,float y)\r{\rfloat sum=0.0;\rfloat frequency=0.0;\rfloat amplitude=0.0;\rfor(int i=0; i<OCTAVES; i++)\r{\rfrequency=pow(2.0,float(i));\ramplitude=pow(persistence,float(i));\rsum=sum+interpolationNoise(vec2(x*frequency,y*frequency))*amplitude;\r}\rreturn sum;\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rfloat x=abs(vUV.x);\rfloat y=abs(vUV.y);\rfloat noise=brightness+(1.0-brightness)*perlinNoise2D(x,y);\rgl_FragColor=vec4(noise,noise,noise,1.0);\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const noisePixelShader = { name, shader };\n"]}