{"version":3,"file":"grain.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/grain.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,kCAAkC,CAAC;AAE1C,IAAM,IAAI,GAAG,kBAAkB,CAAC;AAChC,IAAM,MAAM,GAAG,qeAeb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,gBAAgB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/helperFunctions\";\n\nconst name = \"grainPixelShader\";\nconst shader = `#include<helperFunctions>\nuniform sampler2D textureSampler; \runiform float intensity;\runiform float animatedSeed;\rvarying vec2 vUV;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rgl_FragColor=texture2D(textureSampler,vUV);\rvec2 seed=vUV*(animatedSeed);\rfloat grain=dither(seed,intensity);\rfloat lum=getLuminance(gl_FragColor.rgb);\rfloat grainAmount=(cos(-PI+(lum*PI*2.))+1.)/2.;\rgl_FragColor.rgb+=grain*grainAmount;\rgl_FragColor.rgb=max(gl_FragColor.rgb,0.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const grainPixelShader = { name, shader };\n"]}