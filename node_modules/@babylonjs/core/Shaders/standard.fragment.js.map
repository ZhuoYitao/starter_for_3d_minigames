{"version":3,"file":"standard.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/standard.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,mCAAmC,CAAC;AAE3C,IAAM,IAAI,GAAG,qBAAqB,CAAC;AACnC,IAAM,MAAM,GAAG,2vTA+Ud,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,mBAAmB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/packingFunctions\";\n\nconst name = \"standardPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\rvarying vec2 vUV;\r#define CUSTOM_FRAGMENT_DEFINITIONS\n#if defined(PASS_POST_PROCESS)\nvoid main(void)\r{\rvec4 color=texture2D(textureSampler,vUV);\rgl_FragColor=color;\r}\r#endif\n#if defined(DOWN_SAMPLE_X4)\nuniform vec2 dsOffsets[16];\rvoid main(void)\r{\rvec4 average=vec4(0.0,0.0,0.0,0.0);\raverage=texture2D(textureSampler,vUV+dsOffsets[0]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[1]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[2]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[3]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[4]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[5]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[6]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[7]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[8]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[9]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[10]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[11]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[12]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[13]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[14]);\raverage+=texture2D(textureSampler,vUV+dsOffsets[15]);\raverage/=16.0;\rgl_FragColor=average;\r}\r#endif\n#if defined(BRIGHT_PASS)\nuniform vec2 dsOffsets[4];\runiform float brightThreshold;\rvoid main(void)\r{\rvec4 average=vec4(0.0,0.0,0.0,0.0);\raverage=texture2D(textureSampler,vUV+vec2(dsOffsets[0].x,dsOffsets[0].y));\raverage+=texture2D(textureSampler,vUV+vec2(dsOffsets[1].x,dsOffsets[1].y));\raverage+=texture2D(textureSampler,vUV+vec2(dsOffsets[2].x,dsOffsets[2].y));\raverage+=texture2D(textureSampler,vUV+vec2(dsOffsets[3].x,dsOffsets[3].y));\raverage*=0.25;\rfloat luminance=length(average.rgb);\rif (luminance<brightThreshold) {\raverage=vec4(0.0,0.0,0.0,1.0);\r}\rgl_FragColor=average;\r}\r#endif\n#if defined(TEXTURE_ADDER)\nuniform sampler2D otherSampler;\runiform sampler2D lensSampler;\runiform float exposure;\rvoid main(void)\r{\rvec3 colour=texture2D(textureSampler,vUV).rgb;\rcolour*=exposure;\rvec3 X=max(vec3(0.0,0.0,0.0),colour-0.004);\rvec3 retColor=(X*(6.2*X+0.5))/(X*(6.2*X+1.7)+0.06);\rcolour=retColor*retColor;\rcolour+=colour*texture2D(lensSampler,vUV).rgb;\rvec4 finalColor=vec4(colour.rgb,1.0)+texture2D(otherSampler,vUV);\rgl_FragColor=finalColor;\r}\r#endif\n#if defined(VLS)\n#define PI 3.1415926535897932384626433832795\nuniform mat4 shadowViewProjection;\runiform mat4 lightWorld;\runiform vec3 cameraPosition;\runiform vec3 sunDirection;\runiform vec3 sunColor;\runiform vec2 depthValues;\runiform float scatteringCoefficient;\runiform float scatteringPower;\runiform sampler2D shadowMapSampler;\runiform sampler2D positionSampler;\rfloat computeScattering(float lightDotView)\r{\rfloat result=1.0-scatteringCoefficient*scatteringCoefficient;\rresult/=(4.0*PI*pow(1.0+scatteringCoefficient*scatteringCoefficient-(2.0*scatteringCoefficient)*lightDotView,1.5));\rreturn result;\r}\rvoid main(void)\r{\rvec3 worldPos=texture2D(positionSampler,vUV).rgb;\rvec3 startPosition=cameraPosition;\rvec3 rayVector=worldPos-startPosition;\rfloat rayLength=length(rayVector);\rvec3 rayDirection=rayVector/rayLength;\rfloat stepLength=rayLength/NB_STEPS;\rvec3 stepL=rayDirection*stepLength;\rvec3 currentPosition=startPosition;\rvec3 accumFog=vec3(0.0);\rfor (int i=0; i<int(NB_STEPS); i++)\r{\rvec4 worldInShadowCameraSpace=shadowViewProjection*vec4(currentPosition,1.0);\rfloat depthMetric= (worldInShadowCameraSpace.z+depthValues.x)/(depthValues.y);\rfloat shadowPixelDepth=clamp(depthMetric,0.0,1.0);\rworldInShadowCameraSpace.xyz/=worldInShadowCameraSpace.w;\rworldInShadowCameraSpace.xyz=0.5*worldInShadowCameraSpace.xyz+vec3(0.5);\rfloat shadowMapValue=texture2D(shadowMapSampler,worldInShadowCameraSpace.xy).r;\rif (shadowMapValue>shadowPixelDepth)\raccumFog+=sunColor*computeScattering(dot(rayDirection,sunDirection));\rcurrentPosition+=stepL;\r}\raccumFog/=NB_STEPS;\rvec3 color=accumFog*scatteringPower;\rgl_FragColor=vec4(color*exp(color) ,1.0);\r}\r#endif\n#if defined(VLSMERGE)\nuniform sampler2D originalSampler;\rvoid main(void)\r{\rgl_FragColor=texture2D(originalSampler,vUV)+texture2D(textureSampler,vUV);\r}\r#endif\n#if defined(LUMINANCE)\nuniform vec2 lumOffsets[4];\rvoid main()\r{\rfloat average=0.0;\rvec4 color=vec4(0.0);\rfloat maximum=-1e20;\rvec3 weight=vec3(0.299,0.587,0.114);\rfor (int i=0; i<4; i++)\r{\rcolor=texture2D(textureSampler,vUV+ lumOffsets[i]);\rfloat GreyValue=dot(color.rgb,vec3(0.33,0.33,0.33));\r#ifdef WEIGHTED_AVERAGE\nfloat GreyValue=dot(color.rgb,weight);\r#endif\n#ifdef BRIGHTNESS\nfloat GreyValue=max(color.r,max(color.g,color.b));\r#endif\n#ifdef HSL_COMPONENT\nfloat GreyValue=0.5*(max(color.r,max(color.g,color.b))+min(color.r,min(color.g,color.b)));\r#endif\n#ifdef MAGNITUDE\nfloat GreyValue=length(color.rgb);\r#endif\nmaximum=max(maximum,GreyValue);\raverage+=(0.25*log(1e-5+GreyValue));\r}\raverage=exp(average);\rgl_FragColor=vec4(average,maximum,0.0,1.0);\r}\r#endif\n#if defined(LUMINANCE_DOWN_SAMPLE)\nuniform vec2 dsOffsets[9];\runiform float halfDestPixelSize;\r#ifdef FINAL_DOWN_SAMPLER\n#include<packingFunctions>\n#endif\nvoid main()\r{\rvec4 color=vec4(0.0);\rfloat average=0.0;\rfor (int i=0; i<9; i++)\r{\rcolor=texture2D(textureSampler,vUV+vec2(halfDestPixelSize,halfDestPixelSize)+dsOffsets[i]);\raverage+=color.r;\r}\raverage/=9.0;\r#ifdef FINAL_DOWN_SAMPLER\ngl_FragColor=pack(average);\r#else\ngl_FragColor=vec4(average,average,0.0,1.0);\r#endif\n}\r#endif\n#if defined(HDR)\nuniform sampler2D textureAdderSampler;\runiform float averageLuminance;\rvoid main()\r{\rvec4 color=texture2D(textureAdderSampler,vUV);\r#ifndef AUTO_EXPOSURE\nvec4 adjustedColor=color/averageLuminance;\rcolor=adjustedColor;\rcolor.a=1.0;\r#endif\ngl_FragColor=color;\r}\r#endif\n#if defined(LENS_FLARE)\n#define GHOSTS 3\nuniform sampler2D lensColorSampler;\runiform float strength;\runiform float ghostDispersal;\runiform float haloWidth;\runiform vec2 resolution;\runiform float distortionStrength;\rfloat hash(vec2 p)\r{\rfloat h=dot(p,vec2(127.1,311.7));\rreturn -1.0+2.0*fract(sin(h)*43758.5453123);\r}\rfloat noise(in vec2 p)\r{\rvec2 i=floor(p);\rvec2 f=fract(p);\rvec2 u=f*f*(3.0-2.0*f);\rreturn mix(mix(hash(i+vec2(0.0,0.0)),\rhash(i+vec2(1.0,0.0)),u.x),\rmix(hash(i+vec2(0.0,1.0)),\rhash(i+vec2(1.0,1.0)),u.x),u.y);\r}\rfloat fbm(vec2 p)\r{\rfloat f=0.0;\rf+=0.5000*noise(p); p*=2.02;\rf+=0.2500*noise(p); p*=2.03;\rf+=0.1250*noise(p); p*=2.01;\rf+=0.0625*noise(p); p*=2.04;\rf/=0.9375;\rreturn f;\r}\rvec3 pattern(vec2 uv)\r{\rvec2 p=-1.0+2.0*uv;\rfloat p2=dot(p,p);\rfloat f=fbm(vec2(15.0*p2))/2.0;\rfloat r=0.2+0.6*sin(12.5*length(uv-vec2(0.5)));\rfloat g=0.2+0.6*sin(20.5*length(uv-vec2(0.5)));\rfloat b=0.2+0.6*sin(17.2*length(uv-vec2(0.5)));\rreturn (1.0-f)*vec3(r,g,b);\r}\rfloat luminance(vec3 color)\r{\rreturn dot(color.rgb,vec3(0.2126,0.7152,0.0722));\r}\rvec4 textureDistorted(sampler2D tex,vec2 texcoord,vec2 direction,vec3 distortion)\r{\rreturn vec4(\rtexture2D(tex,texcoord+direction*distortion.r).r,\rtexture2D(tex,texcoord+direction*distortion.g).g,\rtexture2D(tex,texcoord+direction*distortion.b).b,\r1.0\r);\r}\rvoid main(void)\r{\rvec2 uv=-vUV+vec2(1.0);\rvec2 ghostDir=(vec2(0.5)-uv)*ghostDispersal;\rvec2 texelSize=1.0/resolution;\rvec3 distortion=vec3(-texelSize.x*distortionStrength,0.0,texelSize.x*distortionStrength);\rvec4 result=vec4(0.0);\rfloat ghostIndice=1.0;\rfor (int i=0; i<GHOSTS; ++i)\r{\rvec2 offset=fract(uv+ghostDir*ghostIndice);\rfloat weight=length(vec2(0.5)-offset)/length(vec2(0.5));\rweight=pow(1.0-weight,10.0);\rresult+=textureDistorted(textureSampler,offset,normalize(ghostDir),distortion)*weight*strength;\rghostIndice+=1.0;\r}\rvec2 haloVec=normalize(ghostDir)*haloWidth;\rfloat weight=length(vec2(0.5)-fract(uv+haloVec))/length(vec2(0.5));\rweight=pow(1.0-weight,10.0);\rresult+=textureDistorted(textureSampler,fract(uv+haloVec),normalize(ghostDir),distortion)*weight*strength;\rresult*=texture2D(lensColorSampler,vec2(length(vec2(0.5)-uv)/length(vec2(0.5))));\rgl_FragColor=result;\r}\r#endif\n#if defined(LENS_FLARE_COMPOSE)\nuniform sampler2D otherSampler;\runiform sampler2D lensDirtSampler;\runiform sampler2D lensStarSampler;\runiform mat4 lensStarMatrix;\rvoid main(void)\r{\rvec2 lensFlareCoords=(lensStarMatrix*vec4(vUV,1.0,1.0)).xy;\rvec4 lensMod=texture2D(lensDirtSampler,vUV);\rlensMod+=texture2D(lensStarSampler,vUV/*lensFlareCoords*/);\rvec4 result=texture2D(textureSampler,vUV)*lensMod;\rgl_FragColor=texture2D(otherSampler,vUV)+result;\r}\r#endif\n#if defined(DEPTH_OF_FIELD)\nuniform sampler2D otherSampler;\runiform sampler2D depthSampler;\runiform float distance;\rvoid main(void)\r{\rvec4 sharp=texture2D(otherSampler,vUV);\rvec4 blur=texture2D(textureSampler,vUV);\rfloat dist=clamp(texture2D(depthSampler,vUV).r*distance,0.0,1.0);\rfloat factor=0.0;\rif (dist<0.05)\rfactor=1.0;\relse if (dist<0.1)\rfactor=20.0*(0.1-dist);\relse if (dist<0.5)\rfactor=0.0;\relse\rfactor=2.0*(dist-0.5);\rfactor=clamp(factor,0.0,0.90);\rgl_FragColor=mix(sharp,blur,factor);\r}\r#endif\n#if defined(MOTION_BLUR)\nuniform mat4 inverseViewProjection;\runiform mat4 prevViewProjection;\runiform vec2 screenSize;\runiform float motionScale;\runiform float motionStrength;\runiform sampler2D depthSampler;\rvoid main(void)\r{\rvec2 texelSize=1.0/screenSize;\rfloat depth=texture2D(depthSampler,vUV).r;\rvec4 cpos=vec4(vUV*2.0-1.0,depth,1.0);\rcpos=cpos*inverseViewProjection;\rvec4 ppos=cpos*prevViewProjection;\rppos.xyz/=ppos.w;\rppos.xy=ppos.xy*0.5+0.5;\rvec2 velocity=(ppos.xy-vUV)*motionScale*motionStrength;\rfloat speed=length(velocity/texelSize);\rint nSamples=int(clamp(speed,1.0,MAX_MOTION_SAMPLES));\rvec4 result=texture2D(textureSampler,vUV);\rfor (int i=1; i<int(MAX_MOTION_SAMPLES); ++i) {\rif (i>=nSamples)\rbreak;\rvec2 offset1=vUV+velocity*(float(i)/float(nSamples-1)-0.5);\rresult+=texture2D(textureSampler,offset1);\r}\rgl_FragColor=result/float(nSamples);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const standardPixelShader = { name, shader };\n"]}