{"version":3,"file":"gpuRenderParticles.vertex.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,8CAA8C,CAAC;AACtD,OAAO,kCAAkC,CAAC;AAE1C,IAAM,IAAI,GAAG,gCAAgC,CAAC;AAC9C,IAAM,MAAM,GAAG,w4IAsIb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,8BAA8B,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration2\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nconst name = \"gpuRenderParticlesVertexShader\";\nconst shader = `precision highp float;\runiform mat4 view;\runiform mat4 projection;\runiform vec2 translationPivot;\runiform vec3 worldOffset;\r#ifdef LOCAL\nuniform mat4 emitterWM;\r#endif\nattribute vec3 position;\rattribute float age;\rattribute float life;\rattribute vec3 size;\r#ifndef BILLBOARD\nattribute vec3 initialDirection;\r#endif\n#ifdef BILLBOARDSTRETCHED\nattribute vec3 direction;\r#endif\nattribute float angle;\r#ifdef ANIMATESHEET\nattribute float cellIndex;\r#endif\nattribute vec2 offset;\rattribute vec2 uv;\rvarying vec2 vUV;\rvarying vec4 vColor;\rvarying vec3 vPositionW;\r#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\nuniform mat4 invView;\r#endif\n#include<clipPlaneVertexDeclaration2>\n#ifdef COLORGRADIENTS\nuniform sampler2D colorGradientSampler;\r#else\nuniform vec4 colorDead;\rattribute vec4 color;\r#endif\n#ifdef ANIMATESHEET\nuniform vec3 sheetInfos;\r#endif\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\r#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\rvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\rvec3 zaxis=normalize(cross(yaxis,xaxis));\rvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\rvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\rvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\rmat3 rotMatrix= mat3(row0,row1,row2);\rvec3 alignedCorner=rotMatrix*rotatedCorner;\r#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\r#else\nreturn (position+worldOffset)+alignedCorner;\r#endif\n}\r#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\rvec3 normalizedToCamera=normalize(toCamera);\rvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\rvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\rvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\rvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\rvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\rmat3 rotMatrix= mat3(row0,row1,row2);\rvec3 alignedCorner=rotMatrix*rotatedCorner;\r#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\r#else\nreturn (position+worldOffset)+alignedCorner;\r#endif\n}\r#endif\nvoid main() {\r#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\rfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\rvec2 uvScale=sheetInfos.xy;\rvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\rvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\r#else\nvUV=uv;\r#endif\nfloat ratio=age/life;\r#ifdef COLORGRADIENTS\nvColor=texture2D(colorGradientSampler,vec2(ratio,0));\r#else\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\r#endif\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\r#ifdef BILLBOARD\nvec4 rotatedCorner;\rrotatedCorner.w=0.;\r#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.y=0.;\rvec3 yaxis=(position+worldOffset)-eyePosition;\ryaxis.y=0.;\rvPositionW=rotate(normalize(yaxis),rotatedCorner.xyz);\rvec4 viewPosition=(view*vec4(vPositionW,1.0));\r#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.z=0.;\rvec3 toCamera=(position+worldOffset)-eyePosition;\rvPositionW=rotateAlign(toCamera,rotatedCorner.xyz);\rvec4 viewPosition=(view*vec4(vPositionW,1.0));\r#else\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.z=0.;\r#ifdef LOCAL\nvec4 viewPosition=view*vec4(((emitterWM*vec4(position,1.0)).xyz+worldOffset),1.0)+rotatedCorner;\r#else\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\r#endif\nvPositionW=(invView*viewPosition).xyz;\r#endif\n#else\nvec3 rotatedCorner;\rrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=0.;\rrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rvec3 yaxis=normalize(initialDirection);\rvPositionW=rotate(yaxis,rotatedCorner);\rvec4 viewPosition=view*vec4(vPositionW,1.0);\r#endif\ngl_Position=projection*viewPosition;\r#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nvec4 worldPos=vec4(vPositionW,1.0);\r#endif\n#include<clipPlaneVertex>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const gpuRenderParticlesVertexShader = { name, shader };\n"]}