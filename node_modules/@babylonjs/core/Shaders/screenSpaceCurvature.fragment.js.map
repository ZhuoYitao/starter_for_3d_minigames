{"version":3,"file":"screenSpaceCurvature.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/screenSpaceCurvature.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,iCAAiC,CAAC;AAC/C,IAAM,MAAM,GAAG,6wCAkCb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,+BAA+B,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"screenSpaceCurvaturePixelShader\";\nconst shader = `precision highp float;\rvarying vec2 vUV;\runiform sampler2D textureSampler;\runiform sampler2D normalSampler;\runiform float curvature_ridge;\runiform float curvature_valley;\r#ifndef CURVATURE_OFFSET\n#define CURVATURE_OFFSET 1\n#endif\nfloat curvature_soft_clamp(float curvature,float control)\r{\rif (curvature<0.5/control)\rreturn curvature*(1.0-curvature*control);\rreturn 0.25/control;\r}\rfloat calculate_curvature(ivec2 texel,float ridge,float valley)\r{\rvec2 normal_up =texelFetch(normalSampler,texel+ivec2(0, CURVATURE_OFFSET),0).rb;\rvec2 normal_down =texelFetch(normalSampler,texel+ivec2(0,-CURVATURE_OFFSET),0).rb;\rvec2 normal_left =texelFetch(normalSampler,texel+ivec2(-CURVATURE_OFFSET,0),0).rb;\rvec2 normal_right=texelFetch(normalSampler,texel+ivec2( CURVATURE_OFFSET,0),0).rb;\rfloat normal_diff=((normal_up.g-normal_down.g)+(normal_right.r-normal_left.r));\rif (normal_diff<0.0)\rreturn -2.0*curvature_soft_clamp(-normal_diff,valley);\rreturn 2.0*curvature_soft_clamp(normal_diff,ridge);\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) \r{\rivec2 texel=ivec2(gl_FragCoord.xy);\rvec4 baseColor=texture2D(textureSampler,vUV);\rfloat curvature=calculate_curvature(texel,curvature_ridge,curvature_valley);\rbaseColor.rgb*=curvature+1.0;\rgl_FragColor=baseColor;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const screenSpaceCurvaturePixelShader = { name, shader };\n"]}