{"version":3,"file":"blackAndWhite.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/blackAndWhite.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,0BAA0B,CAAC;AACxC,IAAM,MAAM,GAAG,kWAUb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,wBAAwB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"blackAndWhitePixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\runiform float degree;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) \r{\rvec3 color=texture2D(textureSampler,vUV).rgb;\rfloat luminance=dot(color,vec3(0.3,0.59,0.11)); \rvec3 blackAndWhite=vec3(luminance,luminance,luminance);\rgl_FragColor=vec4(color-((color-blackAndWhite)*degree),1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const blackAndWhitePixelShader = { name, shader };\n"]}