{"version":3,"file":"colorCorrection.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/colorCorrection.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,4BAA4B,CAAC;AAC1C,IAAM,MAAM,GAAG,g7BAwBb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,0BAA0B,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"colorCorrectionPixelShader\";\nconst shader = `uniform sampler2D textureSampler; \runiform sampler2D colorTable; \rvarying vec2 vUV;\rconst float SLICE_COUNT=16.0; \rvec4 sampleAs3DTexture(sampler2D textureSampler,vec3 uv,float width) {\rfloat sliceSize=1.0/width; \rfloat slicePixelSize=sliceSize/width; \rfloat sliceInnerSize=slicePixelSize*(width-1.0); \rfloat zSlice0=min(floor(uv.z*width),width-1.0);\rfloat zSlice1=min(zSlice0+1.0,width-1.0);\rfloat xOffset=slicePixelSize*0.5+uv.x*sliceInnerSize;\rfloat s0=xOffset+(zSlice0*sliceSize);\rfloat s1=xOffset+(zSlice1*sliceSize);\rvec4 slice0Color=texture2D(textureSampler,vec2(s0,uv.y));\rvec4 slice1Color=texture2D(textureSampler,vec2(s1,uv.y));\rfloat zOffset=mod(uv.z*width,1.0);\rvec4 result=mix(slice0Color,slice1Color,zOffset);\rreturn result;\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rvec4 screen_color=texture2D(textureSampler,vUV);\rgl_FragColor=sampleAs3DTexture(colorTable,screen_color.rgb,SLICE_COUNT);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const colorCorrectionPixelShader = { name, shader };\n"]}