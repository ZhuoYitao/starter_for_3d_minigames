{"version":3,"file":"pbrBlockSubSurface.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/pbrBlockSubSurface.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,IAAM,IAAI,GAAG,oBAAoB,CAAC;AAClC,IAAM,MAAM,GAAG,m7UA0Ud,CAAC;AACF,aAAa;AACb,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAChD,cAAc;AACd,MAAM,CAAC,IAAM,kBAAkB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrBlockSubSurface\";\nconst shader = `struct subSurfaceOutParams\r{\rvec3 specularEnvironmentReflectance;\r#ifdef SS_REFRACTION\nvec3 finalRefraction;\rvec3 surfaceAlbedo;\r#ifdef SS_LINKREFRACTIONTOTRANSPARENCY\nfloat alpha;\r#endif\n#ifdef REFLECTION\nfloat refractionFactorForIrradiance;\r#endif\n#endif\n#ifdef SS_TRANSLUCENCY\nvec3 transmittance;\rfloat translucencyIntensity;\r#ifdef REFLECTION\nvec3 refractionIrradiance;\r#endif\n#endif\n#if DEBUGMODE>0\nvec4 thicknessMap;\rvec4 environmentRefraction;\rvec3 refractionTransmittance;\r#endif\n};\r#ifdef SUBSURFACE\n#define pbr_inline\n#define inline\nvoid subSurfaceBlock(\rin vec3 vSubSurfaceIntensity,\rin vec2 vThicknessParam,\rin vec4 vTintColor,\rin vec3 normalW,\rin vec3 specularEnvironmentReflectance,\r#ifdef SS_THICKNESSANDMASK_TEXTURE\nin vec4 thicknessMap,\r#endif\n#ifdef SS_REFRACTIONINTENSITY_TEXTURE\nin vec4 refractionIntensityMap,\r#endif\n#ifdef SS_TRANSLUCENCYINTENSITY_TEXTURE\nin vec4 translucencyIntensityMap,\r#endif\n#ifdef REFLECTION\n#ifdef SS_TRANSLUCENCY\nin mat4 reflectionMatrix,\r#ifdef USESPHERICALFROMREFLECTIONMAP\n#if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\nin vec3 irradianceVector_,\r#endif\n#if defined(REALTIME_FILTERING)\nin samplerCube reflectionSampler,\rin vec2 vReflectionFilteringInfo,\r#endif\n#endif\n#ifdef USEIRRADIANCEMAP\n#ifdef REFLECTIONMAP_3D\nin samplerCube irradianceSampler,\r#else\nin sampler2D irradianceSampler,\r#endif\n#endif\n#endif\n#endif\n#if defined(SS_REFRACTION) || defined(SS_TRANSLUCENCY)\nin vec3 surfaceAlbedo,\r#endif\n#ifdef SS_REFRACTION\nin vec3 vPositionW,\rin vec3 viewDirectionW,\rin mat4 view,\rin vec4 vRefractionInfos,\rin mat4 refractionMatrix,\rin vec4 vRefractionMicrosurfaceInfos,\rin vec4 vLightingIntensity,\r#ifdef SS_LINKREFRACTIONTOTRANSPARENCY\nin float alpha,\r#endif\n#ifdef SS_LODINREFRACTIONALPHA\nin float NdotVUnclamped,\r#endif\n#ifdef SS_LINEARSPECULARREFRACTION\nin float roughness,\r#endif\nin float alphaG,\r#ifdef SS_REFRACTIONMAP_3D\nin samplerCube refractionSampler,\r#ifndef LODBASEDMICROSFURACE\nin samplerCube refractionSamplerLow,\rin samplerCube refractionSamplerHigh,\r#endif\n#else\nin sampler2D refractionSampler,\r#ifndef LODBASEDMICROSFURACE\nin sampler2D refractionSamplerLow,\rin sampler2D refractionSamplerHigh,\r#endif\n#endif\n#ifdef ANISOTROPIC\nin anisotropicOutParams anisotropicOut,\r#endif\n#ifdef REALTIME_FILTERING\nin vec2 vRefractionFilteringInfo,\r#endif\n#ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\nin vec3 refractionPosition,\rin vec3 refractionSize,\r#endif\n#endif\n#ifdef SS_TRANSLUCENCY\nin vec3 vDiffusionDistance,\r#endif\nout subSurfaceOutParams outParams\r)\r{\routParams.specularEnvironmentReflectance=specularEnvironmentReflectance;\r#ifdef SS_REFRACTION\nfloat refractionIntensity=vSubSurfaceIntensity.x;\r#ifdef SS_LINKREFRACTIONTOTRANSPARENCY\nrefractionIntensity*=(1.0-alpha);\routParams.alpha=1.0;\r#endif\n#endif\n#ifdef SS_TRANSLUCENCY\nfloat translucencyIntensity=vSubSurfaceIntensity.y;\r#endif\n#ifdef SS_THICKNESSANDMASK_TEXTURE\n#if defined(SS_USE_GLTF_TEXTURES)\nfloat thickness=thicknessMap.g*vThicknessParam.y+vThicknessParam.x;\r#else\nfloat thickness=thicknessMap.r*vThicknessParam.y+vThicknessParam.x;\r#endif\n#if DEBUGMODE>0\noutParams.thicknessMap=thicknessMap;\r#endif\n#ifdef SS_MASK_FROM_THICKNESS_TEXTURE\n#if defined(SS_REFRACTION) && defined(SS_REFRACTION_USE_INTENSITY_FROM_TEXTURE)\n#if defined(SS_USE_GLTF_TEXTURES)\nrefractionIntensity*=thicknessMap.r;\r#else\nrefractionIntensity*=thicknessMap.g;\r#endif\n#endif\n#if defined(SS_TRANSLUCENCY) && defined(SS_TRANSLUCENCY_USE_INTENSITY_FROM_TEXTURE)\ntranslucencyIntensity*=thicknessMap.b;\r#endif\n#endif\n#else\nfloat thickness=vThicknessParam.y;\r#endif\n#ifdef SS_REFRACTIONINTENSITY_TEXTURE\n#ifdef SS_USE_GLTF_TEXTURES\nrefractionIntensity*=refractionIntensityMap.r;\r#else\nrefractionIntensity*=refractionIntensityMap.g;\r#endif\n#endif\n#ifdef SS_TRANSLUCENCYINTENSITY_TEXTURE\ntranslucencyIntensity*=translucencyIntensityMap.b;\r#endif\n#ifdef SS_TRANSLUCENCY\nthickness=maxEps(thickness);\rvec3 transmittance=transmittanceBRDF_Burley(vTintColor.rgb,vDiffusionDistance,thickness);\rtransmittance*=translucencyIntensity;\routParams.transmittance=transmittance;\routParams.translucencyIntensity=translucencyIntensity;\r#endif\n#ifdef SS_REFRACTION\nvec4 environmentRefraction=vec4(0.,0.,0.,0.);\r#ifdef ANISOTROPIC\nvec3 refractionVector=refract(-viewDirectionW,anisotropicOut.anisotropicNormal,vRefractionInfos.y);\r#else\nvec3 refractionVector=refract(-viewDirectionW,normalW,vRefractionInfos.y);\r#endif\n#ifdef SS_REFRACTIONMAP_OPPOSITEZ\nrefractionVector.z*=-1.0;\r#endif\n#ifdef SS_REFRACTIONMAP_3D\n#ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\nrefractionVector=parallaxCorrectNormal(vPositionW,refractionVector,refractionSize,refractionPosition);\r#endif\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\rvec3 refractionCoords=refractionVector;\rrefractionCoords=vec3(refractionMatrix*vec4(refractionCoords,0));\r#else\n#ifdef SS_USE_THICKNESS_AS_DEPTH\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*thickness,1.0)));\r#else\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\r#endif\nvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\rrefractionCoords.y=1.0-refractionCoords.y;\r#endif\n#ifdef SS_HAS_THICKNESS\nfloat ior=vRefractionInfos.y;\r#else\nfloat ior=vRefractionMicrosurfaceInfos.w;\r#endif\n#ifdef SS_LODINREFRACTIONALPHA\nfloat refractionAlphaG=alphaG;\rrefractionAlphaG=mix(alphaG,0.0,clamp(ior*3.0-2.0,0.0,1.0));\rfloat refractionLOD=getLodFromAlphaG(vRefractionMicrosurfaceInfos.x,refractionAlphaG,NdotVUnclamped);\r#elif defined(SS_LINEARSPECULARREFRACTION)\nfloat refractionRoughness=alphaG;\rrefractionRoughness=mix(alphaG,0.0,clamp(ior*3.0-2.0,0.0,1.0));\rfloat refractionLOD=getLinearLodFromRoughness(vRefractionMicrosurfaceInfos.x,refractionRoughness);\r#else\nfloat refractionAlphaG=alphaG;\rrefractionAlphaG=mix(alphaG,0.0,clamp(ior*3.0-2.0,0.0,1.0));\rfloat refractionLOD=getLodFromAlphaG(vRefractionMicrosurfaceInfos.x,refractionAlphaG);\r#endif\n#ifdef LODBASEDMICROSFURACE\nrefractionLOD=refractionLOD*vRefractionMicrosurfaceInfos.y+vRefractionMicrosurfaceInfos.z;\r#ifdef SS_LODINREFRACTIONALPHA\nfloat automaticRefractionLOD=UNPACK_LOD(sampleRefraction(refractionSampler,refractionCoords).a);\rfloat requestedRefractionLOD=max(automaticRefractionLOD,refractionLOD);\r#else\nfloat requestedRefractionLOD=refractionLOD;\r#endif\n#ifdef REALTIME_FILTERING\nenvironmentRefraction=vec4(radiance(alphaG,refractionSampler,refractionCoords,vRefractionFilteringInfo),1.0);\r#else\nenvironmentRefraction=sampleRefractionLod(refractionSampler,refractionCoords,requestedRefractionLOD);\r#endif\n#else\nfloat lodRefractionNormalized=saturate(refractionLOD/log2(vRefractionMicrosurfaceInfos.x));\rfloat lodRefractionNormalizedDoubled=lodRefractionNormalized*2.0;\rvec4 environmentRefractionMid=sampleRefraction(refractionSampler,refractionCoords);\rif (lodRefractionNormalizedDoubled<1.0){\renvironmentRefraction=mix(\rsampleRefraction(refractionSamplerHigh,refractionCoords),\renvironmentRefractionMid,\rlodRefractionNormalizedDoubled\r);\r} else {\renvironmentRefraction=mix(\renvironmentRefractionMid,\rsampleRefraction(refractionSamplerLow,refractionCoords),\rlodRefractionNormalizedDoubled-1.0\r);\r}\r#endif\n#ifdef SS_RGBDREFRACTION\nenvironmentRefraction.rgb=fromRGBD(environmentRefraction);\r#endif\n#ifdef SS_GAMMAREFRACTION\nenvironmentRefraction.rgb=toLinearSpace(environmentRefraction.rgb);\r#endif\nenvironmentRefraction.rgb*=vRefractionInfos.x;\r#endif\n#ifdef SS_REFRACTION\nvec3 refractionTransmittance=vec3(refractionIntensity);\r#ifdef SS_THICKNESSANDMASK_TEXTURE\nvec3 volumeAlbedo=computeColorAtDistanceInMedia(vTintColor.rgb,vTintColor.w);\rrefractionTransmittance*=cocaLambert(volumeAlbedo,thickness);\r#elif defined(SS_LINKREFRACTIONTOTRANSPARENCY)\nfloat maxChannel=max(max(surfaceAlbedo.r,surfaceAlbedo.g),surfaceAlbedo.b);\rvec3 volumeAlbedo=saturate(maxChannel*surfaceAlbedo);\renvironmentRefraction.rgb*=volumeAlbedo;\r#else\nvec3 volumeAlbedo=computeColorAtDistanceInMedia(vTintColor.rgb,vTintColor.w);\rrefractionTransmittance*=cocaLambert(volumeAlbedo,vThicknessParam.y);\r#endif\n#ifdef SS_ALBEDOFORREFRACTIONTINT\nenvironmentRefraction.rgb*=surfaceAlbedo.rgb;\r#endif\noutParams.surfaceAlbedo=surfaceAlbedo*(1.-refractionIntensity);\r#ifdef REFLECTION\noutParams.refractionFactorForIrradiance=(1.-refractionIntensity);\r#endif\n#ifdef UNUSED_MULTIPLEBOUNCES\nvec3 bounceSpecularEnvironmentReflectance=(2.0*specularEnvironmentReflectance)/(1.0+specularEnvironmentReflectance);\routParams.specularEnvironmentReflectance=mix(bounceSpecularEnvironmentReflectance,specularEnvironmentReflectance,refractionIntensity);\r#endif\nrefractionTransmittance*=1.0-outParams.specularEnvironmentReflectance;\r#if DEBUGMODE>0\noutParams.refractionTransmittance=refractionTransmittance;\r#endif\noutParams.finalRefraction=environmentRefraction.rgb*refractionTransmittance*vLightingIntensity.z;\r#if DEBUGMODE>0\noutParams.environmentRefraction=environmentRefraction;\r#endif\n#endif\n#if defined(REFLECTION) && defined(SS_TRANSLUCENCY)\n#if defined(NORMAL) && defined(USESPHERICALINVERTEX) || !defined(USESPHERICALFROMREFLECTIONMAP)\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(normalW,0)).xyz;\r#ifdef REFLECTIONMAP_OPPOSITEZ\nirradianceVector.z*=-1.0;\r#endif\n#ifdef INVERTCUBICMAP\nirradianceVector.y*=-1.0;\r#endif\n#else\nvec3 irradianceVector=irradianceVector_;\r#endif\n#if defined(USESPHERICALFROMREFLECTIONMAP)\n#if defined(REALTIME_FILTERING)\nvec3 refractionIrradiance=irradiance(reflectionSampler,-irradianceVector,vReflectionFilteringInfo);\r#else\nvec3 refractionIrradiance=computeEnvironmentIrradiance(-irradianceVector);\r#endif\n#elif defined(USEIRRADIANCEMAP)\n#ifdef REFLECTIONMAP_3D\nvec3 irradianceCoords=irradianceVector;\r#else\nvec2 irradianceCoords=irradianceVector.xy;\r#ifdef REFLECTIONMAP_PROJECTION\nirradianceCoords/=irradianceVector.z;\r#endif\nirradianceCoords.y=1.0-irradianceCoords.y;\r#endif\nvec4 refractionIrradiance=sampleReflection(irradianceSampler,-irradianceCoords);\r#ifdef RGBDREFLECTION\nrefractionIrradiance.rgb=fromRGBD(refractionIrradiance);\r#endif\n#ifdef GAMMAREFLECTION\nrefractionIrradiance.rgb=toLinearSpace(refractionIrradiance.rgb);\r#endif\n#else\nvec4 refractionIrradiance=vec4(0.);\r#endif\nrefractionIrradiance.rgb*=transmittance;\r#ifdef SS_ALBEDOFORTRANSLUCENCYTINT\nrefractionIrradiance.rgb*=surfaceAlbedo.rgb;\r#endif\noutParams.refractionIrradiance=refractionIrradiance.rgb;\r#endif\n}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const pbrBlockSubSurface = { name, shader };\n"]}