{"version":3,"file":"lightsFragmentFunctions.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,IAAM,IAAI,GAAG,yBAAyB,CAAC;AACvC,IAAM,MAAM,GAAG,stFA0Fb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAChD,cAAc;AACd,MAAM,CAAC,IAAM,uBAAuB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"lightsFragmentFunctions\";\nconst shader = `struct lightingInfo\r{\rvec3 diffuse;\r#ifdef SPECULARTERM\nvec3 specular;\r#endif\n#ifdef NDOTL\nfloat ndl;\r#endif\n};\rlightingInfo computeLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 lightVectorW;\rfloat attenuation=1.0;\rif (lightData.w==0.)\r{\rvec3 direction=lightData.xyz-vPositionW;\rattenuation=max(0.,1.0-length(direction)/range);\rlightVectorW=normalize(direction);\r}\relse\r{\rlightVectorW=normalize(-lightData.xyz);\r}\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rlightingInfo computeSpotLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec4 lightDirection,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 direction=lightData.xyz-vPositionW;\rvec3 lightVectorW=normalize(direction);\rfloat attenuation=max(0.,1.0-length(direction)/range);\rfloat cosAngle=max(0.,dot(lightDirection.xyz,-lightVectorW));\rif (cosAngle>=lightDirection.w)\r{\rcosAngle=max(0.,pow(cosAngle,lightData.w));\rattenuation*=cosAngle;\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rresult.diffuse=vec3(0.);\r#ifdef SPECULARTERM\nresult.specular=vec3(0.);\r#endif\n#ifdef NDOTL\nresult.ndl=0.;\r#endif\nreturn result;\r}\rlightingInfo computeHemisphericLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,vec3 groundColor,float glossiness) {\rlightingInfo result;\rfloat ndl=dot(vNormal,lightData.xyz)*0.5+0.5;\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=mix(groundColor,diffuseColor,ndl);\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightData.xyz);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor;\r#endif\nreturn result;\r}\r#define inline\nvec3 computeProjectionTextureDiffuseLighting(sampler2D projectionLightSampler,mat4 textureProjectionMatrix){\rvec4 strq=textureProjectionMatrix*vec4(vPositionW,1.0);\rstrq/=strq.w;\rvec3 textureColor=texture2D(projectionLightSampler,strq.xy).rgb;\rreturn textureColor;\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const lightsFragmentFunctions = { name, shader };\n"]}