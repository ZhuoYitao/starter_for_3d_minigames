{"version":3,"file":"pbrBRDFFunctions.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/pbrBRDFFunctions.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,IAAM,IAAI,GAAG,kBAAkB,CAAC;AAChC,IAAM,MAAM,GAAG,q5RAyQd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAChD,cAAc;AACd,MAAM,CAAC,IAAM,gBAAgB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrBRDFFunctions\";\nconst shader = `#define FRESNEL_MAXIMUM_ON_ROUGH 0.25\n#ifdef MS_BRDF_ENERGY_CONSERVATION\nvec3 getEnergyConservationFactor(const vec3 specularEnvironmentR0,const vec3 environmentBrdf) {\rreturn 1.0+specularEnvironmentR0*(1.0/environmentBrdf.y-1.0);\r}\r#endif\n#ifdef ENVIRONMENTBRDF\nvec3 getBRDFLookup(float NdotV,float perceptualRoughness) {\rvec2 UV=vec2(NdotV,perceptualRoughness);\rvec4 brdfLookup=texture2D(environmentBrdfSampler,UV);\r#ifdef ENVIRONMENTBRDF_RGBD\nbrdfLookup.rgb=fromRGBD(brdfLookup.rgba);\r#endif\nreturn brdfLookup.rgb;\r}\rvec3 getReflectanceFromBRDFLookup(const vec3 specularEnvironmentR0,const vec3 specularEnvironmentR90,const vec3 environmentBrdf) {\r#ifdef BRDF_V_HEIGHT_CORRELATED\nvec3 reflectance=(specularEnvironmentR90-specularEnvironmentR0)*environmentBrdf.x+specularEnvironmentR0*environmentBrdf.y;\r#else\nvec3 reflectance=specularEnvironmentR0*environmentBrdf.x+specularEnvironmentR90*environmentBrdf.y;\r#endif\nreturn reflectance;\r}\rvec3 getReflectanceFromBRDFLookup(const vec3 specularEnvironmentR0,const vec3 environmentBrdf) {\r#ifdef BRDF_V_HEIGHT_CORRELATED\nvec3 reflectance=mix(environmentBrdf.xxx,environmentBrdf.yyy,specularEnvironmentR0);\r#else\nvec3 reflectance=specularEnvironmentR0*environmentBrdf.x+environmentBrdf.y;\r#endif\nreturn reflectance;\r}\r#endif\n/* NOT USED\r#if defined(SHEEN) && defined(SHEEN_SOFTER)\nfloat getBRDFLookupCharlieSheen(float NdotV,float perceptualRoughness)\r{\rfloat c=1.0-NdotV;\rfloat c3=c*c*c;\rreturn 0.65584461*c3+1.0/(4.16526551+exp(-7.97291361*perceptualRoughness+6.33516894));\r}\r#endif\n*/\r#if !defined(ENVIRONMENTBRDF) || defined(REFLECTIONMAP_SKYBOX) || defined(ALPHAFRESNEL)\nvec3 getReflectanceFromAnalyticalBRDFLookup_Jones(float VdotN,vec3 reflectance0,vec3 reflectance90,float smoothness)\r{\rfloat weight=mix(FRESNEL_MAXIMUM_ON_ROUGH,1.0,smoothness);\rreturn reflectance0+weight*(reflectance90-reflectance0)*pow5(saturate(1.0-VdotN));\r}\r#endif\n#if defined(SHEEN) && defined(ENVIRONMENTBRDF)\n/**\r* The sheen BRDF not containing F can be easily stored in the blue channel of the BRDF texture.\r* The blue channel contains DCharlie*VAshikhmin*NdotL as a lokkup table\r*/\rvec3 getSheenReflectanceFromBRDFLookup(const vec3 reflectance0,const vec3 environmentBrdf) {\rvec3 sheenEnvironmentReflectance=reflectance0*environmentBrdf.b;\rreturn sheenEnvironmentReflectance;\r}\r#endif\nvec3 fresnelSchlickGGX(float VdotH,vec3 reflectance0,vec3 reflectance90)\r{\rreturn reflectance0+(reflectance90-reflectance0)*pow5(1.0-VdotH);\r}\rfloat fresnelSchlickGGX(float VdotH,float reflectance0,float reflectance90)\r{\rreturn reflectance0+(reflectance90-reflectance0)*pow5(1.0-VdotH);\r}\r#ifdef CLEARCOAT\nvec3 getR0RemappedForClearCoat(vec3 f0) {\r#ifdef CLEARCOAT_DEFAULTIOR\n#ifdef MOBILE\nreturn saturate(f0*(f0*0.526868+0.529324)-0.0482256);\r#else\nreturn saturate(f0*(f0*(0.941892-0.263008*f0)+0.346479)-0.0285998);\r#endif\n#else\nvec3 s=sqrt(f0);\rvec3 t=(vClearCoatRefractionParams.z+vClearCoatRefractionParams.w*s)/(vClearCoatRefractionParams.w+vClearCoatRefractionParams.z*s);\rreturn square(t);\r#endif\n}\r#endif\n#ifdef IRIDESCENCE\nconst mat3 XYZ_TO_REC709=mat3(\r3.2404542,-0.9692660, 0.0556434,\r-1.5371385, 1.8760108,-0.2040259,\r-0.4985314, 0.0415560, 1.0572252\r);\rvec3 getIORTfromAirToSurfaceR0(vec3 f0) {\rvec3 sqrtF0=sqrt(f0);\rreturn (1.+sqrtF0)/(1.-sqrtF0);\r}\rvec3 getR0fromIORs(vec3 iorT,float iorI) {\rreturn square((iorT-vec3(iorI))/(iorT+vec3(iorI)));\r}\rfloat getR0fromIORs(float iorT,float iorI) {\rreturn square((iorT-iorI)/(iorT+iorI));\r}\rvec3 evalSensitivity(float opd,vec3 shift) {\rfloat phase=2.0*PI*opd*1.0e-9;\rconst vec3 val=vec3(5.4856e-13,4.4201e-13,5.2481e-13);\rconst vec3 pos=vec3(1.6810e+06,1.7953e+06,2.2084e+06);\rconst vec3 var=vec3(4.3278e+09,9.3046e+09,6.6121e+09);\rvec3 xyz=val*sqrt(2.0*PI*var)*cos(pos*phase+shift)*exp(-square(phase)*var);\rxyz.x+=9.7470e-14*sqrt(2.0*PI*4.5282e+09)*cos(2.2399e+06*phase+shift[0])*exp(-4.5282e+09*square(phase));\rxyz/=1.0685e-7;\rvec3 srgb=XYZ_TO_REC709*xyz;\rreturn srgb;\r}\rvec3 evalIridescence(float outsideIOR,float eta2,float cosTheta1,float thinFilmThickness,vec3 baseF0) {\rvec3 I=vec3(1.0);\rfloat iridescenceIOR=mix(outsideIOR,eta2,smoothstep(0.0,0.03,thinFilmThickness));\rfloat sinTheta2Sq=square(outsideIOR/iridescenceIOR)*(1.0-square(cosTheta1));\rfloat cosTheta2Sq=1.0-sinTheta2Sq;\rif (cosTheta2Sq<0.0) {\rreturn I;\r}\rfloat cosTheta2=sqrt(cosTheta2Sq);\rfloat R0=getR0fromIORs(iridescenceIOR,outsideIOR);\rfloat R12=fresnelSchlickGGX(cosTheta1,R0,1.);\rfloat R21=R12;\rfloat T121=1.0-R12;\rfloat phi12=0.0;\rif (iridescenceIOR<outsideIOR) phi12=PI;\rfloat phi21=PI-phi12;\rvec3 baseIOR=getIORTfromAirToSurfaceR0(clamp(baseF0,0.0,0.9999)); \rvec3 R1=getR0fromIORs(baseIOR,iridescenceIOR);\rvec3 R23=fresnelSchlickGGX(cosTheta2,R1,vec3(1.));\rvec3 phi23=vec3(0.0);\rif (baseIOR[0]<iridescenceIOR) phi23[0]=PI;\rif (baseIOR[1]<iridescenceIOR) phi23[1]=PI;\rif (baseIOR[2]<iridescenceIOR) phi23[2]=PI;\rfloat opd=2.0*iridescenceIOR*thinFilmThickness*cosTheta2;\rvec3 phi=vec3(phi21)+phi23;\rvec3 R123=clamp(R12*R23,1e-5,0.9999);\rvec3 r123=sqrt(R123);\rvec3 Rs=square(T121)*R23/(vec3(1.0)-R123);\rvec3 C0=R12+Rs;\rI=C0;\rvec3 Cm=Rs-T121;\rfor (int m=1; m<=2; ++m)\r{\rCm*=r123;\rvec3 Sm=2.0*evalSensitivity(float(m)*opd,float(m)*phi);\rI+=Cm*Sm;\r}\rreturn max(I,vec3(0.0));\r}\r#endif\nfloat normalDistributionFunction_TrowbridgeReitzGGX(float NdotH,float alphaG)\r{\rfloat a2=square(alphaG);\rfloat d=NdotH*NdotH*(a2-1.0)+1.0;\rreturn a2/(PI*d*d);\r}\r#ifdef SHEEN\nfloat normalDistributionFunction_CharlieSheen(float NdotH,float alphaG)\r{\rfloat invR=1./alphaG;\rfloat cos2h=NdotH*NdotH;\rfloat sin2h=1.-cos2h;\rreturn (2.+invR)*pow(sin2h,invR*.5)/(2.*PI);\r}\r#endif\n#ifdef ANISOTROPIC\nfloat normalDistributionFunction_BurleyGGX_Anisotropic(float NdotH,float TdotH,float BdotH,const vec2 alphaTB) {\rfloat a2=alphaTB.x*alphaTB.y;\rvec3 v=vec3(alphaTB.y*TdotH,alphaTB.x *BdotH,a2*NdotH);\rfloat v2=dot(v,v);\rfloat w2=a2/v2;\rreturn a2*w2*w2*RECIPROCAL_PI;\r}\r#endif\n#ifdef BRDF_V_HEIGHT_CORRELATED\nfloat smithVisibility_GGXCorrelated(float NdotL,float NdotV,float alphaG) {\r#ifdef MOBILE\nfloat GGXV=NdotL*(NdotV*(1.0-alphaG)+alphaG);\rfloat GGXL=NdotV*(NdotL*(1.0-alphaG)+alphaG);\rreturn 0.5/(GGXV+GGXL);\r#else\nfloat a2=alphaG*alphaG;\rfloat GGXV=NdotL*sqrt(NdotV*(NdotV-a2*NdotV)+a2);\rfloat GGXL=NdotV*sqrt(NdotL*(NdotL-a2*NdotL)+a2);\rreturn 0.5/(GGXV+GGXL);\r#endif\n}\r#else\nfloat smithVisibilityG1_TrowbridgeReitzGGXFast(float dot,float alphaG)\r{\r#ifdef MOBILE\nreturn 1.0/(dot+alphaG+(1.0-alphaG)*dot ));\r#else\nfloat alphaSquared=alphaG*alphaG;\rreturn 1.0/(dot+sqrt(alphaSquared+(1.0-alphaSquared)*dot*dot));\r#endif\n}\rfloat smithVisibility_TrowbridgeReitzGGXFast(float NdotL,float NdotV,float alphaG)\r{\rfloat visibility=smithVisibilityG1_TrowbridgeReitzGGXFast(NdotL,alphaG)*smithVisibilityG1_TrowbridgeReitzGGXFast(NdotV,alphaG);\rreturn visibility;\r}\r#endif\n#ifdef ANISOTROPIC\nfloat smithVisibility_GGXCorrelated_Anisotropic(float NdotL,float NdotV,float TdotV,float BdotV,float TdotL,float BdotL,const vec2 alphaTB) {\rfloat lambdaV=NdotL*length(vec3(alphaTB.x*TdotV,alphaTB.y*BdotV,NdotV));\rfloat lambdaL=NdotV*length(vec3(alphaTB.x*TdotL,alphaTB.y*BdotL,NdotL));\rfloat v=0.5/(lambdaV+lambdaL);\rreturn v;\r}\r#endif\n#ifdef CLEARCOAT\nfloat visibility_Kelemen(float VdotH) {\rreturn 0.25/(VdotH*VdotH); \r}\r#endif\n#ifdef SHEEN\nfloat visibility_Ashikhmin(float NdotL,float NdotV)\r{\rreturn 1./(4.*(NdotL+NdotV-NdotL*NdotV));\r}\r/* NOT USED\r#ifdef SHEEN_SOFTER\nfloat l(float x,float alphaG)\r{\rfloat oneMinusAlphaSq=(1.0-alphaG)*(1.0-alphaG);\rfloat a=mix(21.5473,25.3245,oneMinusAlphaSq);\rfloat b=mix(3.82987,3.32435,oneMinusAlphaSq);\rfloat c=mix(0.19823,0.16801,oneMinusAlphaSq);\rfloat d=mix(-1.97760,-1.27393,oneMinusAlphaSq);\rfloat e=mix(-4.32054,-4.85967,oneMinusAlphaSq);\rreturn a/(1.0+b*pow(x,c))+d*x+e;\r}\rfloat lambdaSheen(float cosTheta,float alphaG)\r{\rreturn abs(cosTheta)<0.5 ? exp(l(cosTheta,alphaG)) : exp(2.0*l(0.5,alphaG)-l(1.0-cosTheta,alphaG));\r}\rfloat visibility_CharlieSheen(float NdotL,float NdotV,float alphaG)\r{\rfloat G=1.0/(1.0+lambdaSheen(NdotV,alphaG)+lambdaSheen(NdotL,alphaG));\rreturn G/(4.0*NdotV*NdotL);\r}\r#endif\n*/\r#endif\nfloat diffuseBRDF_Burley(float NdotL,float NdotV,float VdotH,float roughness) {\rfloat diffuseFresnelNV=pow5(saturateEps(1.0-NdotL));\rfloat diffuseFresnelNL=pow5(saturateEps(1.0-NdotV));\rfloat diffuseFresnel90=0.5+2.0*VdotH*VdotH*roughness;\rfloat fresnel =\r(1.0+(diffuseFresnel90-1.0)*diffuseFresnelNL) *\r(1.0+(diffuseFresnel90-1.0)*diffuseFresnelNV);\rreturn fresnel/PI;\r}\r#ifdef SS_TRANSLUCENCY\nvec3 transmittanceBRDF_Burley(const vec3 tintColor,const vec3 diffusionDistance,float thickness) {\rvec3 S=1./maxEps(diffusionDistance);\rvec3 temp=exp((-0.333333333*thickness)*S);\rreturn tintColor.rgb*0.25*(temp*temp*temp+3.0*temp);\r}\rfloat computeWrappedDiffuseNdotL(float NdotL,float w) {\rfloat t=1.0+w;\rfloat invt2=1.0/square(t);\rreturn saturate((NdotL+w)*invt2);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const pbrBRDFFunctions = { name, shader };\n"]}