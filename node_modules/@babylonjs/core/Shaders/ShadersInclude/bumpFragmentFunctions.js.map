{"version":3,"file":"bumpFragmentFunctions.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AACxD,OAAO,8BAA8B,CAAC;AAEtC,IAAM,IAAI,GAAG,uBAAuB,CAAC;AACrC,IAAM,MAAM,GAAG,slDAkDd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAChD,cAAc;AACd,MAAM,CAAC,IAAM,qBAAqB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./samplerFragmentDeclaration\";\n\nconst name = \"bumpFragmentFunctions\";\nconst shader = `#if defined(BUMP)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump)\n#endif\n#if defined(DETAIL)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_SAMPLERNAME_,detail)\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;\rconst float maxSamples=15.;\rconst int iMaxSamples=15;\rvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\rfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\rparallaxLimit*=parallaxScale;\rvec2 vOffsetDir=normalize(vViewDirCoT.xy);\rvec2 vMaxOffset=vOffsetDir*parallaxLimit;\rfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\rfloat stepSize=1.0/numSamples;\rfloat currRayHeight=1.0;\rvec2 vCurrOffset=vec2(0,0);\rvec2 vLastOffset=vec2(0,0);\rfloat lastSampledHeight=1.0;\rfloat currSampledHeight=1.0;\rfor (int i=0; i<iMaxSamples; i++)\r{\rcurrSampledHeight=texture2D(bumpSampler,texCoord+vCurrOffset).w;\rif (currSampledHeight>currRayHeight)\r{\rfloat delta1=currSampledHeight-currRayHeight;\rfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\rfloat ratio=delta1/(delta1+delta2);\rvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\rbreak;\r}\relse\r{\rcurrRayHeight-=stepSize;\rvLastOffset=vCurrOffset;\rvCurrOffset+=stepSize*vMaxOffset;\rlastSampledHeight=currSampledHeight;\r}\r}\rreturn vCurrOffset;\r}\rvec2 parallaxOffset(vec3 viewDir,float heightScale)\r{\rfloat height=texture2D(bumpSampler,vBumpUV).w;\rvec2 texCoordOffset=heightScale*viewDir.xy*height;\rreturn -texCoordOffset;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const bumpFragmentFunctions = { name, shader };\n"]}