{"version":3,"file":"motionBlur.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/motionBlur.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,uBAAuB,CAAC;AACrC,IAAM,MAAM,GAAG,myDA4Dd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,qBAAqB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"motionBlurPixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\runiform float motionStrength;\runiform float motionScale;\runiform vec2 screenSize;\r#ifdef OBJECT_BASED\nuniform sampler2D velocitySampler;\r#else\nuniform sampler2D depthSampler;\runiform mat4 inverseViewProjection;\runiform mat4 prevViewProjection;\r#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\r#ifdef GEOMETRY_SUPPORTED\n#ifdef OBJECT_BASED\nvec2 texelSize=1.0/screenSize;\rvec4 velocityColor=texture2D(velocitySampler,vUV);\rvelocityColor.rg=velocityColor.rg*2.0-vec2(1.0);\rvec2 velocity=vec2(pow(velocityColor.r,3.0),pow(velocityColor.g,3.0))*velocityColor.a;\rvelocity*=motionScale*motionStrength;\rfloat speed=length(velocity/texelSize);\rint samplesCount=int(clamp(speed,1.0,SAMPLES));\rvelocity=normalize(velocity)*texelSize;\rfloat hlim=float(-samplesCount)*0.5+0.5;\rvec4 result=texture2D(textureSampler,vUV);\rfor (int i=1; i<int(SAMPLES); ++i)\r{\rif (i>=samplesCount)\rbreak;\rvec2 offset=vUV+velocity*(hlim+float(i));\rresult+=texture2D(textureSampler,offset);\r}\rgl_FragColor=result/float(samplesCount);\rgl_FragColor.a=1.0;\r#else\nvec2 texelSize=1.0/screenSize;\rfloat depth=texture2D(depthSampler,vUV).r;\rvec4 cpos=vec4(vUV*2.0-1.0,depth,1.0);\rcpos=cpos*inverseViewProjection;\rvec4 ppos=cpos*prevViewProjection;\rppos.xyz/=ppos.w;\rppos.xy=ppos.xy*0.5+0.5;\rvec2 velocity=(ppos.xy-vUV)*motionScale*motionStrength;\rfloat speed=length(velocity/texelSize);\rint nSamples=int(clamp(speed,1.0,SAMPLES));\rvec4 result=texture2D(textureSampler,vUV);\rfor (int i=1; i<int(SAMPLES); ++i) {\rif (i>=nSamples)\rbreak;\rvec2 offset1=vUV+velocity*(float(i)/float(nSamples-1)-0.5);\rresult+=texture2D(textureSampler,offset1);\r}\rgl_FragColor=result/float(nSamples);\r#endif\n#else\ngl_FragColor=texture2D(textureSampler,vUV);\r#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const motionBlurPixelShader = { name, shader };\n"]}