{"version":3,"file":"chromaticAberration.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/chromaticAberration.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,gCAAgC,CAAC;AAC9C,IAAM,MAAM,GAAG,qhDA+Bb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,8BAA8B,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"chromaticAberrationPixelShader\";\nconst shader = `uniform sampler2D textureSampler; \runiform float chromatic_aberration;\runiform float radialIntensity;\runiform vec2 direction;\runiform vec2 centerPosition;\runiform float screen_width;\runiform float screen_height;\rvarying vec2 vUV;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rvec2 centered_screen_pos=vec2(vUV.x-centerPosition.x,vUV.y-centerPosition.y);\rvec2 directionOfEffect=direction;\rif(directionOfEffect.x==0. && directionOfEffect.y==0.){\rdirectionOfEffect=normalize(centered_screen_pos);\r}\rfloat radius2=centered_screen_pos.x*centered_screen_pos.x\r+ centered_screen_pos.y*centered_screen_pos.y;\rfloat radius=sqrt(radius2);\rvec4 original=texture2D(textureSampler,vUV);\rvec3 ref_indices=vec3(-0.3,0.0,0.3);\rfloat ref_shiftX=chromatic_aberration*pow(radius,radialIntensity)*directionOfEffect.x/screen_width;\rfloat ref_shiftY=chromatic_aberration*pow(radius,radialIntensity)*directionOfEffect.y/screen_height;\rvec2 ref_coords_r=vec2(vUV.x+ref_indices.r*ref_shiftX,vUV.y+ref_indices.r*ref_shiftY*0.5);\rvec2 ref_coords_g=vec2(vUV.x+ref_indices.g*ref_shiftX,vUV.y+ref_indices.g*ref_shiftY*0.5);\rvec2 ref_coords_b=vec2(vUV.x+ref_indices.b*ref_shiftX,vUV.y+ref_indices.b*ref_shiftY*0.5);\roriginal.r=texture2D(textureSampler,ref_coords_r).r;\roriginal.g=texture2D(textureSampler,ref_coords_g).g;\roriginal.b=texture2D(textureSampler,ref_coords_b).b;\roriginal.a=clamp(texture2D(textureSampler,ref_coords_r).a+texture2D(textureSampler,ref_coords_g).a+texture2D(textureSampler,ref_coords_b).a,0.,1.);\rgl_FragColor=original;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const chromaticAberrationPixelShader = { name, shader };\n"]}