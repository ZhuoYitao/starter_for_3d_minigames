{"version":3,"file":"refraction.fragment.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/refraction.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,IAAM,IAAI,GAAG,uBAAuB,CAAC;AACrC,IAAM,MAAM,GAAG,0ZAYb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAM,qBAAqB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"refractionPixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\runiform sampler2D refractionSampler;\runiform vec3 baseColor;\runiform float depth;\runiform float colorLevel;\rvoid main() {\rfloat ref=1.0-texture2D(refractionSampler,vUV).r;\rvec2 uv=vUV-vec2(0.5);\rvec2 offset=uv*depth*ref;\rvec3 sourceColor=texture2D(textureSampler,vUV-offset).rgb;\rgl_FragColor=vec4(sourceColor+sourceColor*ref*colorLevel,1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const refractionPixelShader = { name, shader };\n"]}