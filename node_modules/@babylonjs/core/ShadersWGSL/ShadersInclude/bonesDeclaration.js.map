{"version":3,"file":"bonesDeclaration.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/ShadersWGSL/ShadersInclude/bonesDeclaration.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,IAAM,IAAI,GAAG,kBAAkB,CAAC;AAChC,IAAM,MAAM,GAAG,44BA8Bd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACpD,cAAc;AACd,MAAM,CAAC,IAAM,gBAAgB,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bonesDeclaration\";\nconst shader = `#if NUM_BONE_INFLUENCERS>0\nattribute matricesIndices : vec4<f32>;\rattribute matricesWeights : vec4<f32>;\r#if NUM_BONE_INFLUENCERS>4\nattribute matricesIndicesExtra : vec4<f32>;\rattribute matricesWeightsExtra : vec4<f32>;\r#endif\n#ifndef BAKED_VERTEX_ANIMATION_TEXTURE\n#ifdef BONETEXTURE\nvar boneSampler : texture_2d<f32>;\runiform boneTextureWidth : f32;\r#else\nuniform mBones : array<mat4x4,BonesPerMesh>;\r#ifdef BONES_VELOCITY_ENABLED\nuniform mPreviousBones : array<mat4x4,BonesPerMesh>;\r#endif\n#endif\n#ifdef BONETEXTURE\nfn readMatrixFromRawSampler(smp : texture_2d<f32>,index : f32)->mat4x4<f32>\r{\rlet offset=i32(index) *4; \rlet m0=textureLoad(smp,vec2<i32>(offset+0,0),0);\rlet m1=textureLoad(smp,vec2<i32>(offset+1,0),0);\rlet m2=textureLoad(smp,vec2<i32>(offset+2,0),0);\rlet m3=textureLoad(smp,vec2<i32>(offset+3,0),0);\rreturn mat4x4<f32>(m0,m1,m2,m3);\r}\r#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStoreWGSL[name] = shader;\n/** @hidden */\nexport const bonesDeclaration = { name, shader };\n"]}