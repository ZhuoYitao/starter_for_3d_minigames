{"version":3,"file":"physicsHelper.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/physicsHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder\";\r\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { Ray } from \"../Culling/ray\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { IPhysicsEngine } from \"./IPhysicsEngine\";\r\nimport type { PhysicsEngine } from \"./physicsEngine\";\r\nimport type { PhysicsImpostor } from \"./physicsImpostor\";\r\n\r\n/**\r\n * A helper for physics simulations\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport class PhysicsHelper {\r\n    private _scene: Scene;\r\n    private _physicsEngine: Nullable<IPhysicsEngine>;\r\n\r\n    /**\r\n     * Initializes the Physics helper\r\n     * @param scene Babylon.js scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._physicsEngine = this._scene.getPhysicsEngine();\r\n\r\n        if (!this._physicsEngine) {\r\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you can use the methods.\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies a radial explosion impulse\r\n     * @param origin the origin of the explosion\r\n     * @param radiusOrEventOptions the radius or the options of radial explosion\r\n     * @param strength the explosion strength\r\n     * @param falloff possible options: Constant & Linear. Defaults to Constant\r\n     * @returns A physics radial explosion event, or null\r\n     */\r\n    public applyRadialExplosionImpulse(\r\n        origin: Vector3,\r\n        radiusOrEventOptions: number | PhysicsRadialExplosionEventOptions,\r\n        strength?: number,\r\n        falloff?: PhysicsRadialImpulseFalloff\r\n    ): Nullable<PhysicsRadialExplosionEvent> {\r\n        if (!this._physicsEngine) {\r\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call this method.\");\r\n            return null;\r\n        }\r\n\r\n        const impostors = this._physicsEngine.getImpostors();\r\n        if (impostors.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof radiusOrEventOptions === \"number\") {\r\n            radiusOrEventOptions = new PhysicsRadialExplosionEventOptions();\r\n            radiusOrEventOptions.radius = <number>(<any>radiusOrEventOptions);\r\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\r\n            radiusOrEventOptions.falloff = falloff || radiusOrEventOptions.falloff;\r\n        }\r\n\r\n        const event = new PhysicsRadialExplosionEvent(this._scene, radiusOrEventOptions);\r\n        const affectedImpostorsWithData = Array<PhysicsAffectedImpostorWithData>();\r\n\r\n        impostors.forEach((impostor) => {\r\n            const impostorHitData = event.getImpostorHitData(impostor, origin);\r\n            if (!impostorHitData) {\r\n                return;\r\n            }\r\n\r\n            impostor.applyImpulse(impostorHitData.force, impostorHitData.contactPoint);\r\n\r\n            affectedImpostorsWithData.push({\r\n                impostor: impostor,\r\n                hitData: impostorHitData,\r\n            });\r\n        });\r\n\r\n        event.triggerAffectedImpostorsCallback(affectedImpostorsWithData);\r\n\r\n        event.dispose(false);\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Applies a radial explosion force\r\n     * @param origin the origin of the explosion\r\n     * @param radiusOrEventOptions the radius or the options of radial explosion\r\n     * @param strength the explosion strength\r\n     * @param falloff possible options: Constant & Linear. Defaults to Constant\r\n     * @returns A physics radial explosion event, or null\r\n     */\r\n    public applyRadialExplosionForce(\r\n        origin: Vector3,\r\n        radiusOrEventOptions: number | PhysicsRadialExplosionEventOptions,\r\n        strength?: number,\r\n        falloff?: PhysicsRadialImpulseFalloff\r\n    ): Nullable<PhysicsRadialExplosionEvent> {\r\n        if (!this._physicsEngine) {\r\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\r\n            return null;\r\n        }\r\n\r\n        const impostors = this._physicsEngine.getImpostors();\r\n        if (impostors.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof radiusOrEventOptions === \"number\") {\r\n            radiusOrEventOptions = new PhysicsRadialExplosionEventOptions();\r\n            radiusOrEventOptions.radius = <number>(<any>radiusOrEventOptions);\r\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\r\n            radiusOrEventOptions.falloff = falloff || radiusOrEventOptions.falloff;\r\n        }\r\n\r\n        const event = new PhysicsRadialExplosionEvent(this._scene, radiusOrEventOptions);\r\n        const affectedImpostorsWithData = Array<PhysicsAffectedImpostorWithData>();\r\n\r\n        impostors.forEach((impostor) => {\r\n            const impostorHitData = event.getImpostorHitData(impostor, origin);\r\n            if (!impostorHitData) {\r\n                return;\r\n            }\r\n\r\n            impostor.applyForce(impostorHitData.force, impostorHitData.contactPoint);\r\n\r\n            affectedImpostorsWithData.push({\r\n                impostor: impostor,\r\n                hitData: impostorHitData,\r\n            });\r\n        });\r\n\r\n        event.triggerAffectedImpostorsCallback(affectedImpostorsWithData);\r\n\r\n        event.dispose(false);\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Creates a gravitational field\r\n     * @param origin the origin of the explosion\r\n     * @param radiusOrEventOptions the radius or the options of radial explosion\r\n     * @param strength the explosion strength\r\n     * @param falloff possible options: Constant & Linear. Defaults to Constant\r\n     * @returns A physics gravitational field event, or null\r\n     */\r\n    public gravitationalField(\r\n        origin: Vector3,\r\n        radiusOrEventOptions: number | PhysicsRadialExplosionEventOptions,\r\n        strength?: number,\r\n        falloff?: PhysicsRadialImpulseFalloff\r\n    ): Nullable<PhysicsGravitationalFieldEvent> {\r\n        if (!this._physicsEngine) {\r\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\r\n            return null;\r\n        }\r\n\r\n        const impostors = this._physicsEngine.getImpostors();\r\n        if (impostors.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof radiusOrEventOptions === \"number\") {\r\n            radiusOrEventOptions = new PhysicsRadialExplosionEventOptions();\r\n            radiusOrEventOptions.radius = <number>(<any>radiusOrEventOptions);\r\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\r\n            radiusOrEventOptions.falloff = falloff || radiusOrEventOptions.falloff;\r\n        }\r\n\r\n        const event = new PhysicsGravitationalFieldEvent(this, this._scene, origin, radiusOrEventOptions);\r\n\r\n        event.dispose(false);\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Creates a physics updraft event\r\n     * @param origin the origin of the updraft\r\n     * @param radiusOrEventOptions the radius or the options of the updraft\r\n     * @param strength the strength of the updraft\r\n     * @param height the height of the updraft\r\n     * @param updraftMode possible options: Center & Perpendicular. Defaults to Center\r\n     * @returns A physics updraft event, or null\r\n     */\r\n    public updraft(\r\n        origin: Vector3,\r\n        radiusOrEventOptions: number | PhysicsUpdraftEventOptions,\r\n        strength?: number,\r\n        height?: number,\r\n        updraftMode?: PhysicsUpdraftMode\r\n    ): Nullable<PhysicsUpdraftEvent> {\r\n        if (!this._physicsEngine) {\r\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\r\n            return null;\r\n        }\r\n\r\n        if (this._physicsEngine.getImpostors().length === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof radiusOrEventOptions === \"number\") {\r\n            radiusOrEventOptions = new PhysicsUpdraftEventOptions();\r\n            radiusOrEventOptions.radius = <number>(<any>radiusOrEventOptions);\r\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\r\n            radiusOrEventOptions.height = height || radiusOrEventOptions.height;\r\n            radiusOrEventOptions.updraftMode = updraftMode || radiusOrEventOptions.updraftMode;\r\n        }\r\n\r\n        const event = new PhysicsUpdraftEvent(this._scene, origin, radiusOrEventOptions);\r\n\r\n        event.dispose(false);\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Creates a physics vortex event\r\n     * @param origin the of the vortex\r\n     * @param radiusOrEventOptions the radius or the options of the vortex\r\n     * @param strength the strength of the vortex\r\n     * @param height   the height of the vortex\r\n     * @returns a Physics vortex event, or null\r\n     * A physics vortex event or null\r\n     */\r\n    public vortex(origin: Vector3, radiusOrEventOptions: number | PhysicsVortexEventOptions, strength?: number, height?: number): Nullable<PhysicsVortexEvent> {\r\n        if (!this._physicsEngine) {\r\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\r\n            return null;\r\n        }\r\n\r\n        if (this._physicsEngine.getImpostors().length === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof radiusOrEventOptions === \"number\") {\r\n            radiusOrEventOptions = new PhysicsVortexEventOptions();\r\n            radiusOrEventOptions.radius = <number>(<any>radiusOrEventOptions);\r\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\r\n            radiusOrEventOptions.height = height || radiusOrEventOptions.height;\r\n        }\r\n\r\n        const event = new PhysicsVortexEvent(this._scene, origin, radiusOrEventOptions);\r\n\r\n        event.dispose(false);\r\n\r\n        return event;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a physics radial explosion event\r\n */\r\nclass PhysicsRadialExplosionEvent {\r\n    private _sphere: Mesh; // create a sphere, so we can get the intersecting meshes inside\r\n    private _dataFetched: boolean = false; // check if the data has been fetched. If not, do cleanup\r\n\r\n    /**\r\n     * Initializes a radial explosion event\r\n     * @param _scene BabylonJS scene\r\n     * @param _options The options for the vortex event\r\n     */\r\n    constructor(private _scene: Scene, private _options: PhysicsRadialExplosionEventOptions) {\r\n        this._options = { ...new PhysicsRadialExplosionEventOptions(), ...this._options };\r\n    }\r\n\r\n    /**\r\n     * Returns the data related to the radial explosion event (sphere).\r\n     * @returns The radial explosion event data\r\n     */\r\n    public getData(): PhysicsRadialExplosionEventData {\r\n        this._dataFetched = true;\r\n\r\n        return {\r\n            sphere: this._sphere,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the force and contact point of the impostor or false, if the impostor is not affected by the force/impulse.\r\n     * @param impostor A physics imposter\r\n     * @param origin the origin of the explosion\r\n     * @returns {Nullable<PhysicsHitData>} A physics force and contact point, or null\r\n     */\r\n    public getImpostorHitData(impostor: PhysicsImpostor, origin: Vector3): Nullable<PhysicsHitData> {\r\n        if (impostor.mass === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (!this._intersectsWithSphere(impostor, origin, this._options.radius)) {\r\n            return null;\r\n        }\r\n\r\n        if (impostor.object.getClassName() !== \"Mesh\" && impostor.object.getClassName() !== \"InstancedMesh\") {\r\n            return null;\r\n        }\r\n\r\n        const impostorObjectCenter = impostor.getObjectCenter();\r\n        const direction = impostorObjectCenter.subtract(origin);\r\n\r\n        const ray = new Ray(origin, direction, this._options.radius);\r\n        const hit = ray.intersectsMesh(<AbstractMesh>impostor.object);\r\n\r\n        const contactPoint = hit.pickedPoint;\r\n        if (!contactPoint) {\r\n            return null;\r\n        }\r\n\r\n        const distanceFromOrigin = Vector3.Distance(origin, contactPoint);\r\n\r\n        if (distanceFromOrigin > this._options.radius) {\r\n            return null;\r\n        }\r\n\r\n        const multiplier =\r\n            this._options.falloff === PhysicsRadialImpulseFalloff.Constant ? this._options.strength : this._options.strength * (1 - distanceFromOrigin / this._options.radius);\r\n\r\n        const force = direction.multiplyByFloats(multiplier, multiplier, multiplier);\r\n\r\n        return { force: force, contactPoint: contactPoint, distanceFromOrigin: distanceFromOrigin };\r\n    }\r\n\r\n    /**\r\n     * Triggers affected impostors callbacks\r\n     * @param affectedImpostorsWithData defines the list of affected impostors (including associated data)\r\n     */\r\n    public triggerAffectedImpostorsCallback(affectedImpostorsWithData: Array<PhysicsAffectedImpostorWithData>) {\r\n        if (this._options.affectedImpostorsCallback) {\r\n            this._options.affectedImpostorsCallback(affectedImpostorsWithData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the sphere.\r\n     * @param force Specifies if the sphere should be disposed by force\r\n     */\r\n    public dispose(force: boolean = true) {\r\n        if (force) {\r\n            this._sphere.dispose();\r\n        } else {\r\n            setTimeout(() => {\r\n                if (!this._dataFetched) {\r\n                    this._sphere.dispose();\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    /*** Helpers ***/\r\n\r\n    private _prepareSphere(): void {\r\n        if (!this._sphere) {\r\n            this._sphere = CreateSphere(\"radialExplosionEventSphere\", this._options.sphere, this._scene);\r\n            this._sphere.isVisible = false;\r\n        }\r\n    }\r\n\r\n    private _intersectsWithSphere(impostor: PhysicsImpostor, origin: Vector3, radius: number): boolean {\r\n        const impostorObject = <AbstractMesh>impostor.object;\r\n\r\n        this._prepareSphere();\r\n\r\n        this._sphere.position = origin;\r\n        this._sphere.scaling = new Vector3(radius * 2, radius * 2, radius * 2);\r\n        this._sphere._updateBoundingInfo();\r\n        this._sphere.computeWorldMatrix(true);\r\n\r\n        return this._sphere.intersectsMesh(impostorObject, true);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a gravitational field event\r\n */\r\nclass PhysicsGravitationalFieldEvent {\r\n    private _tickCallback: any;\r\n    private _sphere: Mesh;\r\n    private _dataFetched: boolean = false; // check if the has been fetched the data. If not, do cleanup\r\n\r\n    /**\r\n     * Initializes the physics gravitational field event\r\n     * @param _physicsHelper A physics helper\r\n     * @param _scene BabylonJS scene\r\n     * @param _origin The origin position of the gravitational field event\r\n     * @param _options The options for the vortex event\r\n     */\r\n    constructor(private _physicsHelper: PhysicsHelper, private _scene: Scene, private _origin: Vector3, private _options: PhysicsRadialExplosionEventOptions) {\r\n        this._options = { ...new PhysicsRadialExplosionEventOptions(), ...this._options };\r\n\r\n        this._tickCallback = this._tick.bind(this);\r\n\r\n        this._options.strength = this._options.strength * -1;\r\n    }\r\n\r\n    /**\r\n     * Returns the data related to the gravitational field event (sphere).\r\n     * @returns A gravitational field event\r\n     */\r\n    public getData(): PhysicsGravitationalFieldEventData {\r\n        this._dataFetched = true;\r\n\r\n        return {\r\n            sphere: this._sphere,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enables the gravitational field.\r\n     */\r\n    public enable() {\r\n        this._tickCallback.call(this);\r\n        this._scene.registerBeforeRender(this._tickCallback);\r\n    }\r\n\r\n    /**\r\n     * Disables the gravitational field.\r\n     */\r\n    public disable() {\r\n        this._scene.unregisterBeforeRender(this._tickCallback);\r\n    }\r\n\r\n    /**\r\n     * Disposes the sphere.\r\n     * @param force The force to dispose from the gravitational field event\r\n     */\r\n    public dispose(force: boolean = true) {\r\n        if (force) {\r\n            this._sphere.dispose();\r\n        } else {\r\n            setTimeout(() => {\r\n                if (!this._dataFetched) {\r\n                    this._sphere.dispose();\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    private _tick() {\r\n        // Since the params won't change, we fetch the event only once\r\n        if (this._sphere) {\r\n            this._physicsHelper.applyRadialExplosionForce(this._origin, this._options);\r\n        } else {\r\n            const radialExplosionEvent = this._physicsHelper.applyRadialExplosionForce(this._origin, this._options);\r\n            if (radialExplosionEvent) {\r\n                this._sphere = <Mesh>radialExplosionEvent.getData().sphere.clone(\"radialExplosionEventSphereClone\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a physics updraft event\r\n */\r\nclass PhysicsUpdraftEvent {\r\n    private _physicsEngine: PhysicsEngine;\r\n    private _originTop: Vector3 = Vector3.Zero(); // the most upper part of the cylinder\r\n    private _originDirection: Vector3 = Vector3.Zero(); // used if the updraftMode is perpendicular\r\n    private _tickCallback: any;\r\n    private _cylinder: Mesh;\r\n    private _cylinderPosition: Vector3 = Vector3.Zero(); // to keep the cylinders position, because normally the origin is in the center and not on the bottom\r\n    private _dataFetched: boolean = false; // check if the has been fetched the data. If not, do cleanup\r\n\r\n    /**\r\n     * Initializes the physics updraft event\r\n     * @param _scene BabylonJS scene\r\n     * @param _origin The origin position of the updraft\r\n     * @param _options The options for the updraft event\r\n     */\r\n    constructor(private _scene: Scene, private _origin: Vector3, private _options: PhysicsUpdraftEventOptions) {\r\n        this._physicsEngine = <PhysicsEngine>this._scene.getPhysicsEngine();\r\n        this._options = { ...new PhysicsUpdraftEventOptions(), ...this._options };\r\n\r\n        this._origin.addToRef(new Vector3(0, this._options.height / 2, 0), this._cylinderPosition);\r\n        this._origin.addToRef(new Vector3(0, this._options.height, 0), this._originTop);\r\n\r\n        if (this._options.updraftMode === PhysicsUpdraftMode.Perpendicular) {\r\n            this._originDirection = this._origin.subtract(this._originTop).normalize();\r\n        }\r\n\r\n        this._tickCallback = this._tick.bind(this);\r\n\r\n        this._prepareCylinder();\r\n    }\r\n\r\n    /**\r\n     * Returns the data related to the updraft event (cylinder).\r\n     * @returns A physics updraft event\r\n     */\r\n    public getData(): PhysicsUpdraftEventData {\r\n        this._dataFetched = true;\r\n\r\n        return {\r\n            cylinder: this._cylinder,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enables the updraft.\r\n     */\r\n    public enable() {\r\n        this._tickCallback.call(this);\r\n        this._scene.registerBeforeRender(this._tickCallback);\r\n    }\r\n\r\n    /**\r\n     * Disables the updraft.\r\n     */\r\n    public disable() {\r\n        this._scene.unregisterBeforeRender(this._tickCallback);\r\n    }\r\n\r\n    /**\r\n     * Disposes the cylinder.\r\n     * @param force Specifies if the updraft should be disposed by force\r\n     */\r\n    public dispose(force: boolean = true) {\r\n        if (!this._cylinder) {\r\n            return;\r\n        }\r\n        if (force) {\r\n            this._cylinder.dispose();\r\n        } else {\r\n            setTimeout(() => {\r\n                if (!this._dataFetched) {\r\n                    this._cylinder.dispose();\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    private _getImpostorHitData(impostor: PhysicsImpostor): Nullable<PhysicsHitData> {\r\n        if (impostor.mass === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (!this._intersectsWithCylinder(impostor)) {\r\n            return null;\r\n        }\r\n\r\n        const impostorObjectCenter = impostor.getObjectCenter();\r\n\r\n        let direction: Vector3;\r\n        if (this._options.updraftMode === PhysicsUpdraftMode.Perpendicular) {\r\n            direction = this._originDirection;\r\n        } else {\r\n            direction = impostorObjectCenter.subtract(this._originTop);\r\n        }\r\n\r\n        const distanceFromOrigin = Vector3.Distance(this._origin, impostorObjectCenter);\r\n\r\n        const multiplier = this._options.strength * -1;\r\n\r\n        const force = direction.multiplyByFloats(multiplier, multiplier, multiplier);\r\n\r\n        return { force: force, contactPoint: impostorObjectCenter, distanceFromOrigin: distanceFromOrigin };\r\n    }\r\n\r\n    private _tick() {\r\n        this._physicsEngine.getImpostors().forEach((impostor) => {\r\n            const impostorHitData = this._getImpostorHitData(impostor);\r\n            if (!impostorHitData) {\r\n                return;\r\n            }\r\n\r\n            impostor.applyForce(impostorHitData.force, impostorHitData.contactPoint);\r\n        });\r\n    }\r\n\r\n    /*** Helpers ***/\r\n\r\n    private _prepareCylinder(): void {\r\n        if (!this._cylinder) {\r\n            this._cylinder = CreateCylinder(\r\n                \"updraftEventCylinder\",\r\n                {\r\n                    height: this._options.height,\r\n                    diameter: this._options.radius * 2,\r\n                },\r\n                this._scene\r\n            );\r\n            this._cylinder.isVisible = false;\r\n        }\r\n    }\r\n\r\n    private _intersectsWithCylinder(impostor: PhysicsImpostor): boolean {\r\n        const impostorObject = <AbstractMesh>impostor.object;\r\n\r\n        this._cylinder.position = this._cylinderPosition;\r\n\r\n        return this._cylinder.intersectsMesh(impostorObject, true);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a physics vortex event\r\n */\r\nclass PhysicsVortexEvent {\r\n    private _physicsEngine: PhysicsEngine;\r\n    private _originTop: Vector3 = Vector3.Zero(); // the most upper part of the cylinder\r\n    private _tickCallback: any;\r\n    private _cylinder: Mesh;\r\n    private _cylinderPosition: Vector3 = Vector3.Zero(); // to keep the cylinders position, because normally the origin is in the center and not on the bottom\r\n    private _dataFetched: boolean = false; // check if the has been fetched the data. If not, do cleanup\r\n\r\n    /**\r\n     * Initializes the physics vortex event\r\n     * @param _scene The BabylonJS scene\r\n     * @param _origin The origin position of the vortex\r\n     * @param _options The options for the vortex event\r\n     */\r\n    constructor(private _scene: Scene, private _origin: Vector3, private _options: PhysicsVortexEventOptions) {\r\n        this._physicsEngine = <PhysicsEngine>this._scene.getPhysicsEngine();\r\n        this._options = { ...new PhysicsVortexEventOptions(), ...this._options };\r\n\r\n        this._origin.addToRef(new Vector3(0, this._options.height / 2, 0), this._cylinderPosition);\r\n        this._origin.addToRef(new Vector3(0, this._options.height, 0), this._originTop);\r\n\r\n        this._tickCallback = this._tick.bind(this);\r\n\r\n        this._prepareCylinder();\r\n    }\r\n\r\n    /**\r\n     * Returns the data related to the vortex event (cylinder).\r\n     * @returns The physics vortex event data\r\n     */\r\n    public getData(): PhysicsVortexEventData {\r\n        this._dataFetched = true;\r\n\r\n        return {\r\n            cylinder: this._cylinder,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enables the vortex.\r\n     */\r\n    public enable() {\r\n        this._tickCallback.call(this);\r\n        this._scene.registerBeforeRender(this._tickCallback);\r\n    }\r\n\r\n    /**\r\n     * Disables the cortex.\r\n     */\r\n    public disable() {\r\n        this._scene.unregisterBeforeRender(this._tickCallback);\r\n    }\r\n\r\n    /**\r\n     * Disposes the sphere.\r\n     * @param force\r\n     */\r\n    public dispose(force: boolean = true) {\r\n        if (force) {\r\n            this._cylinder.dispose();\r\n        } else {\r\n            setTimeout(() => {\r\n                if (!this._dataFetched) {\r\n                    this._cylinder.dispose();\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    private _getImpostorHitData(impostor: PhysicsImpostor): Nullable<PhysicsHitData> {\r\n        if (impostor.mass === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (!this._intersectsWithCylinder(impostor)) {\r\n            return null;\r\n        }\r\n\r\n        if (impostor.object.getClassName() !== \"Mesh\" && impostor.object.getClassName() !== \"InstancedMesh\") {\r\n            return null;\r\n        }\r\n\r\n        const impostorObjectCenter = impostor.getObjectCenter();\r\n        const originOnPlane = new Vector3(this._origin.x, impostorObjectCenter.y, this._origin.z); // the distance to the origin as if both objects were on a plane (Y-axis)\r\n        const originToImpostorDirection = impostorObjectCenter.subtract(originOnPlane);\r\n\r\n        const ray = new Ray(originOnPlane, originToImpostorDirection, this._options.radius);\r\n        const hit = ray.intersectsMesh(<AbstractMesh>impostor.object);\r\n        const contactPoint = hit.pickedPoint;\r\n        if (!contactPoint) {\r\n            return null;\r\n        }\r\n        const absoluteDistanceFromOrigin = hit.distance / this._options.radius;\r\n\r\n        let directionToOrigin = contactPoint.normalize();\r\n        if (absoluteDistanceFromOrigin > this._options.centripetalForceThreshold) {\r\n            directionToOrigin = directionToOrigin.negate();\r\n        }\r\n\r\n        let forceX: number;\r\n        let forceY: number;\r\n        let forceZ: number;\r\n\r\n        if (absoluteDistanceFromOrigin > this._options.centripetalForceThreshold) {\r\n            forceX = directionToOrigin.x * this._options.centripetalForceMultiplier;\r\n            forceY = directionToOrigin.y * this._options.updraftForceMultiplier;\r\n            forceZ = directionToOrigin.z * this._options.centripetalForceMultiplier;\r\n        } else {\r\n            const perpendicularDirection = Vector3.Cross(originOnPlane, impostorObjectCenter).normalize();\r\n\r\n            forceX = (perpendicularDirection.x + directionToOrigin.x) * this._options.centrifugalForceMultiplier;\r\n            forceY = this._originTop.y * this._options.updraftForceMultiplier;\r\n            forceZ = (perpendicularDirection.z + directionToOrigin.z) * this._options.centrifugalForceMultiplier;\r\n        }\r\n\r\n        let force = new Vector3(forceX, forceY, forceZ);\r\n        force = force.multiplyByFloats(this._options.strength, this._options.strength, this._options.strength);\r\n\r\n        return { force: force, contactPoint: impostorObjectCenter, distanceFromOrigin: absoluteDistanceFromOrigin };\r\n    }\r\n\r\n    private _tick() {\r\n        this._physicsEngine.getImpostors().forEach((impostor) => {\r\n            const impostorHitData = this._getImpostorHitData(impostor);\r\n            if (!impostorHitData) {\r\n                return;\r\n            }\r\n\r\n            impostor.applyForce(impostorHitData.force, impostorHitData.contactPoint);\r\n        });\r\n    }\r\n\r\n    /*** Helpers ***/\r\n\r\n    private _prepareCylinder(): void {\r\n        if (!this._cylinder) {\r\n            this._cylinder = CreateCylinder(\r\n                \"vortexEventCylinder\",\r\n                {\r\n                    height: this._options.height,\r\n                    diameter: this._options.radius * 2,\r\n                },\r\n                this._scene\r\n            );\r\n            this._cylinder.isVisible = false;\r\n        }\r\n    }\r\n\r\n    private _intersectsWithCylinder(impostor: PhysicsImpostor): boolean {\r\n        const impostorObject = <AbstractMesh>impostor.object;\r\n\r\n        this._cylinder.position = this._cylinderPosition;\r\n\r\n        return this._cylinder.intersectsMesh(impostorObject, true);\r\n    }\r\n}\r\n\r\n/**\r\n * Options fot the radial explosion event\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport class PhysicsRadialExplosionEventOptions {\r\n    /**\r\n     * The radius of the sphere for the radial explosion.\r\n     */\r\n    radius: number = 5;\r\n\r\n    /**\r\n     * The strength of the explosion.\r\n     */\r\n    strength: number = 10;\r\n\r\n    /**\r\n     * The strength of the force in correspondence to the distance of the affected object\r\n     */\r\n    falloff: PhysicsRadialImpulseFalloff = PhysicsRadialImpulseFalloff.Constant;\r\n\r\n    /**\r\n     * Sphere options for the radial explosion.\r\n     */\r\n    sphere: { segments: number; diameter: number } = { segments: 32, diameter: 1 };\r\n\r\n    /**\r\n     * Sphere options for the radial explosion.\r\n     */\r\n    affectedImpostorsCallback: (affectedImpostorsWithData: Array<PhysicsAffectedImpostorWithData>) => void;\r\n}\r\n\r\n/**\r\n * Options fot the updraft event\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport class PhysicsUpdraftEventOptions {\r\n    /**\r\n     * The radius of the cylinder for the vortex\r\n     */\r\n    radius: number = 5;\r\n\r\n    /**\r\n     * The strength of the updraft.\r\n     */\r\n    strength: number = 10;\r\n\r\n    /**\r\n     * The height of the cylinder for the updraft.\r\n     */\r\n    height: number = 10;\r\n\r\n    /**\r\n     * The mode for the the updraft.\r\n     */\r\n    updraftMode: PhysicsUpdraftMode = PhysicsUpdraftMode.Center;\r\n}\r\n\r\n/**\r\n * Options fot the vortex event\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport class PhysicsVortexEventOptions {\r\n    /**\r\n     * The radius of the cylinder for the vortex\r\n     */\r\n    radius: number = 5;\r\n\r\n    /**\r\n     * The strength of the vortex.\r\n     */\r\n    strength: number = 10;\r\n\r\n    /**\r\n     * The height of the cylinder for the vortex.\r\n     */\r\n    height: number = 10;\r\n\r\n    /**\r\n     * At which distance, relative to the radius the centripetal forces should kick in? Range: 0-1\r\n     */\r\n    centripetalForceThreshold: number = 0.7;\r\n\r\n    /**\r\n     * This multiplier determines with how much force the objects will be pushed sideways/around the vortex, when below the threshold.\r\n     */\r\n    centripetalForceMultiplier: number = 5;\r\n\r\n    /**\r\n     * This multiplier determines with how much force the objects will be pushed sideways/around the vortex, when above the threshold.\r\n     */\r\n    centrifugalForceMultiplier: number = 0.5;\r\n\r\n    /**\r\n     * This multiplier determines with how much force the objects will be pushed upwards, when in the vortex.\r\n     */\r\n    updraftForceMultiplier: number = 0.02;\r\n}\r\n\r\n/**\r\n * The strength of the force in correspondence to the distance of the affected object\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport enum PhysicsRadialImpulseFalloff {\r\n    /** Defines that impulse is constant in strength across it's whole radius */\r\n    Constant,\r\n    /** Defines that impulse gets weaker if it's further from the origin */\r\n    Linear,\r\n}\r\n\r\n/**\r\n * The strength of the force in correspondence to the distance of the affected object\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport enum PhysicsUpdraftMode {\r\n    /** Defines that the upstream forces will pull towards the top center of the cylinder */\r\n    Center,\r\n    /** Defines that once a impostor is inside the cylinder, it will shoot out perpendicular from the ground of the cylinder */\r\n    Perpendicular,\r\n}\r\n\r\n/**\r\n * Interface for a physics hit data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport interface PhysicsHitData {\r\n    /**\r\n     * The force applied at the contact point\r\n     */\r\n    force: Vector3;\r\n    /**\r\n     * The contact point\r\n     */\r\n    contactPoint: Vector3;\r\n    /**\r\n     * The distance from the origin to the contact point\r\n     */\r\n    distanceFromOrigin: number;\r\n}\r\n\r\n/**\r\n * Interface for radial explosion event data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport interface PhysicsRadialExplosionEventData {\r\n    /**\r\n     * A sphere used for the radial explosion event\r\n     */\r\n    sphere: Mesh;\r\n}\r\n\r\n/**\r\n * Interface for gravitational field event data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport interface PhysicsGravitationalFieldEventData {\r\n    /**\r\n     * A sphere mesh used for the gravitational field event\r\n     */\r\n    sphere: Mesh;\r\n}\r\n\r\n/**\r\n * Interface for updraft event data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport interface PhysicsUpdraftEventData {\r\n    /**\r\n     * A cylinder used for the updraft event\r\n     */\r\n    cylinder: Mesh;\r\n}\r\n\r\n/**\r\n * Interface for vortex event data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport interface PhysicsVortexEventData {\r\n    /**\r\n     * A cylinder used for the vortex event\r\n     */\r\n    cylinder: Mesh;\r\n}\r\n\r\n/**\r\n * Interface for an affected physics impostor\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\r\n */\r\nexport interface PhysicsAffectedImpostorWithData {\r\n    /**\r\n     * The impostor affected by the effect\r\n     */\r\n    impostor: PhysicsImpostor;\r\n\r\n    /**\r\n     * The data about the hit/force from the explosion\r\n     */\r\n    hitData: PhysicsHitData;\r\n}\r\n"]}