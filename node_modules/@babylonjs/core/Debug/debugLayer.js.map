{"version":3,"file":"debugLayer.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Debug/debugLayer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n// declare INSPECTOR namespace for compilation issue\r\ndeclare let INSPECTOR: any;\r\ndeclare let BABYLON: any;\r\n// load the inspector using require, if not present in the global namespace.\r\n\r\n/**\r\n * Interface used to define scene explorer extensibility option\r\n */\r\nexport interface IExplorerExtensibilityOption {\r\n    /**\r\n     * Define the option label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Defines the action to execute on click\r\n     */\r\n    action: (entity: any) => void;\r\n}\r\n\r\n/**\r\n * Defines a group of actions associated with a predicate to use when extending the Inspector scene explorer\r\n */\r\nexport interface IExplorerExtensibilityGroup {\r\n    /**\r\n     * Defines a predicate to test if a given type mut be extended\r\n     */\r\n    predicate: (entity: any) => boolean;\r\n    /**\r\n     * Gets the list of options added to a type\r\n     */\r\n    entries: IExplorerExtensibilityOption[];\r\n}\r\n\r\n/**\r\n * Interface used to define the options to use to create the Inspector\r\n */\r\nexport interface IInspectorOptions {\r\n    /**\r\n     * Display in overlay mode (default: false)\r\n     */\r\n    overlay?: boolean;\r\n    /**\r\n     * HTML element to use as root (the parent of the rendering canvas will be used as default value)\r\n     */\r\n    globalRoot?: HTMLElement;\r\n    /**\r\n     * Display the Scene explorer\r\n     */\r\n    showExplorer?: boolean;\r\n    /**\r\n     * Display the property inspector\r\n     */\r\n    showInspector?: boolean;\r\n    /**\r\n     * Display in embed mode (both panes on the right)\r\n     */\r\n    embedMode?: boolean;\r\n    /**\r\n     * let the Inspector handles resize of the canvas when panes are resized (default to true)\r\n     */\r\n    handleResize?: boolean;\r\n    /**\r\n     * Allow the panes to popup (default: true)\r\n     */\r\n    enablePopup?: boolean;\r\n    /**\r\n     * Allow the panes to be closed by users (default: true)\r\n     */\r\n    enableClose?: boolean;\r\n    /**\r\n     * Optional list of extensibility entries\r\n     */\r\n    explorerExtensibility?: IExplorerExtensibilityGroup[];\r\n    /**\r\n     * Optional URL to get the inspector script from (by default it uses the babylonjs CDN).\r\n     */\r\n    inspectorURL?: string;\r\n    /**\r\n     * Optional initial tab (default to DebugLayerTab.Properties)\r\n     */\r\n    initialTab?: DebugLayerTab;\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @hidden\r\n         * Backing field\r\n         */\r\n        _debugLayer: DebugLayer;\r\n\r\n        /**\r\n         * Gets the debug layer (aka Inspector) associated with the scene\r\n         * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n         */\r\n        debugLayer: DebugLayer;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\r\n    get: function (this: Scene) {\r\n        if (!this._debugLayer) {\r\n            this._debugLayer = new DebugLayer(this);\r\n        }\r\n        return this._debugLayer;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Enum of inspector action tab\r\n */\r\nexport enum DebugLayerTab {\r\n    /**\r\n     * Properties tag (default)\r\n     */\r\n    Properties = 0,\r\n    /**\r\n     * Debug tab\r\n     */\r\n    Debug = 1,\r\n    /**\r\n     * Statistics tab\r\n     */\r\n    Statistics = 2,\r\n    /**\r\n     * Tools tab\r\n     */\r\n    Tools = 3,\r\n    /**\r\n     * Settings tab\r\n     */\r\n    Settings = 4,\r\n}\r\n\r\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n */\r\nexport class DebugLayer {\r\n    /**\r\n     * Define the url to get the inspector script from.\r\n     * By default it uses the babylonjs CDN.\r\n     * @ignoreNaming\r\n     */\r\n    public static InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;\r\n\r\n    private _scene: Scene;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private BJSINSPECTOR = this._getGlobalInspector();\r\n\r\n    private _onPropertyChangedObservable?: Observable<{ object: any; property: string; value: any; initialValue: any }>;\r\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\r\n    public get onPropertyChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\r\n        }\r\n\r\n        if (!this._onPropertyChangedObservable) {\r\n            this._onPropertyChangedObservable = new Observable<{ object: any; property: string; value: any; initialValue: any }>();\r\n        }\r\n\r\n        return this._onPropertyChangedObservable;\r\n    }\r\n\r\n    private _onSelectionChangedObservable?: Observable<any>;\r\n    /**\r\n     * Observable triggered when the selection is changed through the inspector.\r\n     */\r\n    public get onSelectionChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\r\n        }\r\n\r\n        if (!this._onSelectionChangedObservable) {\r\n            this._onSelectionChangedObservable = new Observable<any>();\r\n        }\r\n\r\n        return this._onSelectionChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new debug layer.\r\n     * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n     * what is happening in your scene\r\n     * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n     * @param scene Defines the scene to inspect\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this._scene.onDisposeObservable.add(() => {\r\n            // Debug layer\r\n            if (this._scene._debugLayer) {\r\n                this._scene._debugLayer.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the inspector window.\r\n     * @param config\r\n     */\r\n    private _createInspector(config?: Partial<IInspectorOptions>) {\r\n        if (this.isVisible()) {\r\n            return;\r\n        }\r\n\r\n        if (this._onPropertyChangedObservable) {\r\n            for (const observer of this._onPropertyChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\r\n            }\r\n            this._onPropertyChangedObservable.clear();\r\n            this._onPropertyChangedObservable = undefined;\r\n        }\r\n\r\n        if (this._onSelectionChangedObservable) {\r\n            for (const observer of this._onSelectionChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\r\n            }\r\n            this._onSelectionChangedObservable.clear();\r\n            this._onSelectionChangedObservable = undefined;\r\n        }\r\n\r\n        const userOptions: IInspectorOptions = {\r\n            overlay: false,\r\n            showExplorer: true,\r\n            showInspector: true,\r\n            embedMode: false,\r\n            handleResize: true,\r\n            enablePopup: true,\r\n            ...config,\r\n        };\r\n\r\n        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\r\n\r\n        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\r\n    }\r\n\r\n    /**\r\n     * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n     * @param entity defines the entity to select\r\n     * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n     */\r\n    public select(entity: any, lineContainerTitles?: string | string[]) {\r\n        if (this.BJSINSPECTOR) {\r\n            if (lineContainerTitles) {\r\n                if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\r\n                    this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\r\n                } else {\r\n                    this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\r\n                }\r\n            }\r\n            this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\r\n        }\r\n    }\r\n\r\n    /** Get the inspector from bundle or global */\r\n    private _getGlobalInspector(): any {\r\n        // UMD Global name detection from Webpack Bundle UMD Name.\r\n        if (typeof INSPECTOR !== \"undefined\") {\r\n            return INSPECTOR;\r\n        }\r\n\r\n        // In case of module let s check the global emitted from the Inspector entry point.\r\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\r\n            return BABYLON;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get if the inspector is visible or not.\r\n     * @returns true if visible otherwise, false\r\n     */\r\n    public isVisible(): boolean {\r\n        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\r\n    }\r\n\r\n    /**\r\n     * Hide the inspector and close its window.\r\n     */\r\n    public hide() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector.Hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the scene in the inspector\r\n     */\r\n    public setAsActiveScene() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Launch the debugLayer.\r\n     * @param config Define the configuration of the inspector\r\n     * @return a promise fulfilled when the debug layer is visible\r\n     */\r\n    public show(config?: IInspectorOptions): Promise<DebugLayer> {\r\n        return new Promise((resolve) => {\r\n            if (typeof this.BJSINSPECTOR == \"undefined\") {\r\n                const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\r\n\r\n                // Load inspector and add it to the DOM\r\n                Tools.LoadScript(inspectorUrl, () => {\r\n                    this._createInspector(config);\r\n                    resolve(this);\r\n                });\r\n            } else {\r\n                // Otherwise creates the inspector\r\n                this._createInspector(config);\r\n                resolve(this);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}