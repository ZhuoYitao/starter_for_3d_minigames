{"version":3,"file":"engineCapabilities.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/engineCapabilities.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Interface used to describe the capabilities of the engine relatively to the current browser\r\n */\r\nexport interface EngineCapabilities {\r\n    /** Maximum textures units per fragment shader */\r\n    maxTexturesImageUnits: number;\r\n    /** Maximum texture units per vertex shader */\r\n    maxVertexTextureImageUnits: number;\r\n    /** Maximum textures units in the entire pipeline */\r\n    maxCombinedTexturesImageUnits: number;\r\n    /** Maximum texture size */\r\n    maxTextureSize: number;\r\n    /** Maximum texture samples */\r\n    maxSamples?: number;\r\n    /** Maximum cube texture size */\r\n    maxCubemapTextureSize: number;\r\n    /** Maximum render texture size */\r\n    maxRenderTextureSize: number;\r\n    /** Maximum number of vertex attributes */\r\n    maxVertexAttribs: number;\r\n    /** Maximum number of varyings */\r\n    maxVaryingVectors: number;\r\n    /** Maximum number of uniforms per vertex shader */\r\n    maxVertexUniformVectors: number;\r\n    /** Maximum number of uniforms per fragment shader */\r\n    maxFragmentUniformVectors: number;\r\n    /** Defines if standard derivatives (dx/dy) are supported */\r\n    standardDerivatives: boolean;\r\n    /** Defines if s3tc texture compression is supported */\r\n    s3tc?: WEBGL_compressed_texture_s3tc;\r\n    /** Defines if s3tc sRGB texture compression is supported */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    s3tc_srgb?: WEBGL_compressed_texture_s3tc_srgb;\r\n    /** Defines if pvrtc texture compression is supported */\r\n    pvrtc: any; //WEBGL_compressed_texture_pvrtc;\r\n    /** Defines if etc1 texture compression is supported */\r\n    etc1: any; //WEBGL_compressed_texture_etc1;\r\n    /** Defines if etc2 texture compression is supported */\r\n    etc2: any; //WEBGL_compressed_texture_etc;\r\n    /** Defines if astc texture compression is supported */\r\n    astc: any; //WEBGL_compressed_texture_astc;\r\n    /** Defines if bptc texture compression is supported */\r\n    bptc: any; //EXT_texture_compression_bptc;\r\n    /** Defines if float textures are supported */\r\n    textureFloat: boolean;\r\n    /** Defines if vertex array objects are supported */\r\n    vertexArrayObject: boolean;\r\n    /** Gets the webgl extension for anisotropic filtering (null if not supported) */\r\n    textureAnisotropicFilterExtension?: EXT_texture_filter_anisotropic;\r\n    /** Gets the maximum level of anisotropy supported */\r\n    maxAnisotropy: number;\r\n    /** Defines if instancing is supported */\r\n    instancedArrays: boolean;\r\n    /** Defines if 32 bits indices are supported */\r\n    uintIndices: boolean;\r\n    /** Defines if high precision shaders are supported */\r\n    highPrecisionShaderSupported: boolean;\r\n    /** Defines if depth reading in the fragment shader is supported */\r\n    fragmentDepthSupported: boolean;\r\n    /** Defines if float texture linear filtering is supported*/\r\n    textureFloatLinearFiltering: boolean;\r\n    /** Defines if rendering to float textures is supported */\r\n    textureFloatRender: boolean;\r\n    /** Defines if half float textures are supported*/\r\n    textureHalfFloat: boolean;\r\n    /** Defines if half float texture linear filtering is supported*/\r\n    textureHalfFloatLinearFiltering: boolean;\r\n    /** Defines if rendering to half float textures is supported */\r\n    textureHalfFloatRender: boolean;\r\n    /** Defines if textureLOD shader command is supported */\r\n    textureLOD: boolean;\r\n    /** Defines if draw buffers extension is supported */\r\n    drawBuffersExtension: boolean;\r\n    /** Defines if depth textures are supported */\r\n    depthTextureExtension: boolean;\r\n    /** Defines if float color buffer are supported */\r\n    colorBufferFloat: boolean;\r\n    /** Gets disjoint timer query extension (null if not supported) */\r\n    timerQuery?: EXT_disjoint_timer_query;\r\n    /** Defines if timestamp can be used with timer query */\r\n    canUseTimestampForTimerQuery: boolean;\r\n    /** Defines if occlusion queries are supported by the engine */\r\n    supportOcclusionQuery: boolean;\r\n    /** Defines if multiview is supported (https://www.khronos.org/registry/webgl/extensions/WEBGL_multiview/) */\r\n    multiview?: any;\r\n    /** Defines if oculus multiview is supported (https://developer.oculus.com/documentation/oculus-browser/latest/concepts/browser-multiview/) */\r\n    oculusMultiview?: any;\r\n    /** Function used to let the system compiles shaders in background */\r\n    parallelShaderCompile?: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        COMPLETION_STATUS_KHR: number;\r\n    };\r\n    /** Max number of texture samples for MSAA */\r\n    maxMSAASamples: number;\r\n    /** Defines if the blend min max extension is supported */\r\n    blendMinMax: boolean;\r\n    /** In some iOS + WebGL1, gl_InstanceID (and gl_InstanceIDEXT) is undefined even if instancedArrays is true. So don't use gl_InstanceID in those cases */\r\n    canUseGLInstanceID: boolean;\r\n    /** Defines if gl_vertexID is available */\r\n    canUseGLVertexID: boolean;\r\n    /** Defines if compute shaders are supported by the engine */\r\n    supportComputeShaders: boolean;\r\n    /** Defines if sRGB texture formats are supported */\r\n    supportSRGBBuffers: boolean;\r\n    /** Defines if transform feedbacks are supported */\r\n    supportTransformFeedbacks: boolean;\r\n    /** Defines if texture max level are supported */\r\n    textureMaxLevel: boolean;\r\n}\r\n"]}