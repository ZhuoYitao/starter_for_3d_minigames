{"version":3,"file":"shaderCodeConditionNode.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Processors/shaderCodeConditionNode.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAGlD,cAAc;AACd;IAA6C,2CAAc;IAA3D;;IAYA,CAAC;IAXG,yCAAO,GAAP,UAAQ,aAAwC,EAAE,OAA0B;QACxE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACvD,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAElC,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;aAC/C;SACJ;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IACL,8BAAC;AAAD,CAAC,AAZD,CAA6C,cAAc,GAY1D","sourcesContent":["import { ShaderCodeNode } from \"./shaderCodeNode\";\r\nimport type { ProcessingOptions } from \"./shaderProcessingOptions\";\r\n\r\n/** @hidden */\r\nexport class ShaderCodeConditionNode extends ShaderCodeNode {\r\n    process(preprocessors: { [key: string]: string }, options: ProcessingOptions) {\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            const node = this.children[index];\r\n\r\n            if (node.isValid(preprocessors)) {\r\n                return node.process(preprocessors, options);\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n}\r\n"]}