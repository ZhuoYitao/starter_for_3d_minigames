{"version":3,"file":"webgpuSnapshotRendering.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuSnapshotRendering.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { WebGPUBundleList } from \"./webgpuBundleList\";\r\nimport type { WebGPUHardwareTexture } from \"./webgpuHardwareTexture\";\r\n\r\n/** @hidden */\r\nexport class WebGPUSnapshotRendering {\r\n    private _engine: WebGPUEngine;\r\n\r\n    private _record = false;\r\n    private _play = false;\r\n    private _mainPassBundleList: WebGPUBundleList[] = [];\r\n    private _modeSaved: number;\r\n    private _bundleList: WebGPUBundleList;\r\n    private _bundleListRenderTarget: WebGPUBundleList;\r\n\r\n    private _enabled = false;\r\n    private _mode: number;\r\n\r\n    constructor(engine: WebGPUEngine, renderingMode: number, bundleList: WebGPUBundleList, bundleListRenderTarget: WebGPUBundleList) {\r\n        this._engine = engine;\r\n        this._mode = renderingMode;\r\n        this._bundleList = bundleList;\r\n        this._bundleListRenderTarget = bundleListRenderTarget;\r\n    }\r\n\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public get play() {\r\n        return this._play;\r\n    }\r\n\r\n    public get record() {\r\n        return this._record;\r\n    }\r\n\r\n    public set enabled(activate: boolean) {\r\n        this._mainPassBundleList.length = 0;\r\n        this._record = this._enabled = activate;\r\n        this._play = false;\r\n        if (activate) {\r\n            this._modeSaved = this._mode;\r\n            this._mode = Constants.SNAPSHOTRENDERING_STANDARD; // need to reset to standard for the recording pass to avoid some code being bypassed\r\n        }\r\n    }\r\n\r\n    public get mode(): number {\r\n        return this._mode;\r\n    }\r\n\r\n    public set mode(mode: number) {\r\n        if (this._record) {\r\n            this._modeSaved = mode;\r\n        } else {\r\n            this._mode = mode;\r\n        }\r\n    }\r\n\r\n    public endMainRenderPass(): void {\r\n        if (this._record) {\r\n            this._mainPassBundleList.push(this._bundleList.clone());\r\n        }\r\n    }\r\n\r\n    public endRenderTargetPass(currentRenderPass: GPURenderPassEncoder, gpuWrapper: WebGPUHardwareTexture): boolean {\r\n        if (this._play) {\r\n            gpuWrapper._bundleLists?.[gpuWrapper._currentLayer]?.run(currentRenderPass);\r\n            if (this._mode === Constants.SNAPSHOTRENDERING_FAST) {\r\n                this._engine._reportDrawCall(gpuWrapper._bundleLists?.[gpuWrapper._currentLayer]?.numDrawCalls);\r\n            }\r\n        } else if (this._record) {\r\n            if (!gpuWrapper._bundleLists) {\r\n                gpuWrapper._bundleLists = [];\r\n            }\r\n            gpuWrapper._bundleLists[gpuWrapper._currentLayer] = this._bundleListRenderTarget.clone();\r\n            gpuWrapper._bundleLists[gpuWrapper._currentLayer].run(currentRenderPass);\r\n            this._bundleListRenderTarget.reset();\r\n        } else {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public endFrame(mainRenderPass: Nullable<GPURenderPassEncoder>): void {\r\n        if (this._record) {\r\n            this._mainPassBundleList.push(this._bundleList.clone());\r\n            this._record = false;\r\n            this._play = true;\r\n            this._mode = this._modeSaved;\r\n        }\r\n\r\n        if (mainRenderPass !== null && this._play) {\r\n            for (let i = 0; i < this._mainPassBundleList.length; ++i) {\r\n                this._mainPassBundleList[i].run(mainRenderPass);\r\n                if (this._mode === Constants.SNAPSHOTRENDERING_FAST) {\r\n                    this._engine._reportDrawCall(this._mainPassBundleList[i].numDrawCalls);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.enabled = false;\r\n        this.enabled = true;\r\n    }\r\n}\r\n"]}