{"version":3,"file":"engine.uniformBuffer.js","sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.uniformBuffer.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,KAAK,eAAe,MAAM,oBAAoB,CAAC;AAEtD,YAAY,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAU,QAAoB;IACvE,IAAI,IAAkB,CAAC;IACvB,IAAI,QAAQ,YAAY,KAAK,EAAE;QAC3B,IAAI,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;KACrC;SAAM;QACH,IAAI,GAAG,QAAQ,CAAC;KACnB;IAED,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,eAAe,CAAC,WAAW,CAAC,OAAO,GAAG,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACrI,OAAO,UAAU,CAAC;AACtB,CAAC,CAAC;AAEF,YAAY,CAAC,SAAS,CAAC,0BAA0B,GAAG,UAAU,QAAoB;IAC9E,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,YAAY,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAU,aAAyB,EAAE,QAAoB,EAAE,MAAe,EAAE,KAAc;IACnI,IAAI,MAAM,KAAK,SAAS,EAAE;QACtB,MAAM,GAAG,CAAC,CAAC;KACd;IAED,IAAM,UAAU,GAAG,aAAiC,CAAC;IACrD,IAAI,IAAkB,CAAC;IACvB,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,IAAI,QAAQ,YAAY,YAAY,EAAE;YAClC,IAAI,GAAG,QAAQ,CAAC;SACnB;aAAM;YACH,IAAI,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;SACrC;QACD,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;KAC3B;SAAM;QACH,IAAI,QAAQ,YAAY,YAAY,EAAE;YAClC,IAAI,GAAG,QAAQ,CAAC;SACnB;aAAM;YACH,IAAI,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;SACrC;KACJ;IAED,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,YAAY,CAAC,SAAS,CAAC,qBAAqB,GAAG,UAAU,MAAkB,EAAE,QAAgB,EAAE,IAAY;IACvG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,EAAE,MAA0B,CAAC,CAAC;AACzE,CAAC,CAAC;AAEF,YAAY,CAAC,SAAS,CAAC,gBAAgB,GAAG,cAAmB,CAAC,CAAC","sourcesContent":["import type { DataBuffer } from \"../../../Buffers/dataBuffer\";\r\nimport type { WebGPUDataBuffer } from \"../../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { FloatArray } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport * as WebGPUConstants from \"../webgpuConstants\";\r\n\r\nWebGPUEngine.prototype.createUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    let view: Float32Array;\r\n    if (elements instanceof Array) {\r\n        view = new Float32Array(elements);\r\n    } else {\r\n        view = elements;\r\n    }\r\n\r\n    const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst);\r\n    return dataBuffer;\r\n};\r\n\r\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    return this.createUniformBuffer(elements);\r\n};\r\n\r\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    const dataBuffer = uniformBuffer as WebGPUDataBuffer;\r\n    let view: Float32Array;\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n        count = view.byteLength;\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n    }\r\n\r\n    this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, location: number, name: string): void {\r\n    this._currentDrawContext.setBuffer(name, buffer as WebGPUDataBuffer);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBlock = function (): void {};\r\n"]}