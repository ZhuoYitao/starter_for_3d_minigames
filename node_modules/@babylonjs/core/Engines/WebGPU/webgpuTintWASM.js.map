{"version":3,"file":"webgpuTintWASM.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuTintWASM.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAsBzC,cAAc;AACd;IAAA;QAOY,WAAM,GAAQ,IAAI,CAAC;IAiC/B,CAAC;IA/BgB,kCAAS,GAAtB,UAAuB,YAA2B;;;;;;wBAC9C,YAAY,GAAG,YAAY,IAAI,EAAE,CAAC;wBAClC,YAAY,yBACL,cAAc,CAAC,oBAAoB,GACnC,YAAY,CAClB,CAAC;wBAEF,IAAI,YAAY,CAAC,KAAK,EAAE;4BACpB,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC;4BACjC,sBAAO,OAAO,CAAC,OAAO,EAAE,EAAC;yBAC5B;6BAEG,CAAA,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,QAAQ,CAAA,EAA5C,wBAA4C;6BACxC,mBAAmB,EAAE,EAArB,wBAAqB;wBACrB,qBAAM,KAAK,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,EAAA;;wBAAhD,SAAgD,CAAC;;;wBAEjD,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;;;6BAItC,IAAY,CAAC,KAAK,EAAnB,wBAAmB;wBACnB,KAAA,IAAI,CAAA;wBAAU,qBAAO,IAAY,CAAC,KAAK,CAAC,YAAa,CAAC,QAAQ,CAAC,EAAA;;wBAA/D,GAAK,MAAM,GAAG,SAAiD,CAAC;wBAChE,sBAAO,OAAO,CAAC,OAAO,EAAE,EAAC;4BAG7B,sBAAO,OAAO,CAAC,MAAM,CAAC,yBAAyB,CAAC,EAAC;;;;KACpD;IAEM,0CAAiB,GAAxB,UAAyB,IAAiB;QACtC,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAtCD,yBAAyB;IACD,mCAAoB,GAAiB;QACzD,MAAM,EAAE,8CAA8C;QACtD,QAAQ,EAAE,gDAAgD;KAC7D,CAAC;IAmCN,qBAAC;CAAA,AAxCD,IAwCC;SAxCY,cAAc","sourcesContent":["import { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n/**\r\n * Options to load the associated Twgsl library\r\n */\r\nexport interface TwgslOptions {\r\n    /**\r\n     * Defines an existing instance of Twgsl (useful in modules who do not access the global instance).\r\n     */\r\n    twgsl?: any;\r\n    /**\r\n     * Defines the URL of the twgsl JS File.\r\n     */\r\n    jsPath?: string;\r\n    /**\r\n     * Defines the URL of the twgsl WASM File.\r\n     */\r\n    wasmPath?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport class WebGPUTintWASM {\r\n    // Default twgsl options.\r\n    private static readonly _TWgslDefaultOptions: TwgslOptions = {\r\n        jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\r\n        wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\",\r\n    };\r\n\r\n    private _twgsl: any = null;\r\n\r\n    public async initTwgsl(twgslOptions?: TwgslOptions): Promise<void> {\r\n        twgslOptions = twgslOptions || {};\r\n        twgslOptions = {\r\n            ...WebGPUTintWASM._TWgslDefaultOptions,\r\n            ...twgslOptions,\r\n        };\r\n\r\n        if (twgslOptions.twgsl) {\r\n            this._twgsl = twgslOptions.twgsl;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (twgslOptions.jsPath && twgslOptions.wasmPath) {\r\n            if (IsWindowObjectExist()) {\r\n                await Tools.LoadScriptAsync(twgslOptions.jsPath);\r\n            } else {\r\n                importScripts(twgslOptions.jsPath);\r\n            }\r\n        }\r\n\r\n        if ((self as any).twgsl) {\r\n            this._twgsl = await (self as any).twgsl(twgslOptions!.wasmPath);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"twgsl is not available.\");\r\n    }\r\n\r\n    public convertSpirV2WGSL(code: Uint32Array): string {\r\n        return this._twgsl.convertSpirV2WGSL(code);\r\n    }\r\n}\r\n"]}