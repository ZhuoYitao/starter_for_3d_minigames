{"version":3,"file":"engine.storageBuffer.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.storageBuffer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AA4CtD,6DAA6D;AAC7D,UAAU,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAU,IAAwB,EAAE,aAAqB;IAChG,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;AAC/E,CAAC,CAAC;AAEF,6DAA6D;AAC7D,UAAU,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAU,MAAkB,EAAE,IAAe,EAAE,UAAmB,EAAE,UAAmB,IAAS,CAAC,CAAC;AAE7I,6DAA6D;AAC7D,UAAU,CAAC,SAAS,CAAC,qBAAqB,GAAG,UAAU,aAAyB,EAAE,MAAe,EAAE,IAAa,EAAE,MAAwB;IACtI,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;AACjF,CAAC,CAAC;AAEF,6DAA6D;AAC7D,UAAU,CAAC,SAAS,CAAC,gBAAgB,GAAG,UAAU,IAAY,EAAE,MAA+B;IAC3F,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;AAC5E,CAAC,CAAC","sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { DataArray, Nullable } from \"../../types\";\r\n\r\ndeclare type StorageBuffer = import(\"../../Buffers/storageBuffer\").StorageBuffer;\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a storage buffer\r\n         * @param data the data for the storage buffer or the size of the buffer\r\n         * @param creationFlags flags to use when creating the buffer (see Constants.BUFFER_CREATIONFLAG_XXX). The BUFFER_CREATIONFLAG_STORAGE flag will be automatically added\r\n         * @returns the new buffer\r\n         */\r\n        createStorageBuffer(data: DataArray | number, creationFlags: number): DataBuffer;\r\n\r\n        /**\r\n         * Updates a storage buffer\r\n         * @param buffer the storage buffer to update\r\n         * @param data the data used to update the storage buffer\r\n         * @param byteOffset the byte offset of the data\r\n         * @param byteLength the byte length of the data\r\n         */\r\n        updateStorageBuffer(buffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void;\r\n\r\n        /**\r\n         * Read data from a storage buffer\r\n         * @param storageBuffer The storage buffer to read from\r\n         * @param offset The offset in the storage buffer to start reading from (default: 0)\r\n         * @param size  The number of bytes to read from the storage buffer (default: capacity of the buffer)\r\n         * @param buffer The buffer to write the data we have read from the storage buffer to (optional)\r\n         * @returns If not undefined, returns the (promise) buffer (as provided by the 4th parameter) filled with the data, else it returns a (promise) Uint8Array with the data read from the storage buffer\r\n         */\r\n        readFromStorageBuffer(storageBuffer: DataBuffer, offset?: number, size?: number, buffer?: ArrayBufferView): Promise<ArrayBufferView>;\r\n\r\n        /**\r\n         * Sets a storage buffer in the shader\r\n         * @param name Defines the name of the storage buffer as defined in the shader\r\n         * @param buffer Defines the value to give to the uniform\r\n         */\r\n        setStorageBuffer(name: string, buffer: Nullable<StorageBuffer>): void;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.createStorageBuffer = function (data: DataArray | number, creationFlags: number): DataBuffer {\r\n    throw new Error(\"createStorageBuffer: Unsupported method in this engine!\");\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.updateStorageBuffer = function (buffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void {};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.readFromStorageBuffer = function (storageBuffer: DataBuffer, offset?: number, size?: number, buffer?: ArrayBufferView): Promise<ArrayBufferView> {\r\n    throw new Error(\"readFromStorageBuffer: Unsupported method in this engine!\");\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.setStorageBuffer = function (name: string, buffer: Nullable<StorageBuffer>): void {\r\n    throw new Error(\"setStorageBuffer: Unsupported method in this engine!\");\r\n};\r\n"]}