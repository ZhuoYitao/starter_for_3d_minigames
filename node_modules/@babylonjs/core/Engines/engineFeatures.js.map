{"version":3,"file":"engineFeatures.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/engineFeatures.ts"],"names":[],"mappings":"","sourcesContent":["/** @hidden */\r\nexport interface EngineFeatures {\r\n    /** Force using Bitmap when Bitmap or HTMLImageElement can be used */\r\n    forceBitmapOverHTMLImageElement: boolean;\r\n\r\n    /** Indicates that the engine support rendering to as well as copying to lod float textures */\r\n    supportRenderAndCopyToLodForFloatTextures: boolean;\r\n\r\n    /** Indicates that the engine support handling depth/stencil textures */\r\n    supportDepthStencilTexture: boolean;\r\n\r\n    /** Indicates that the engine support shadow samplers */\r\n    supportShadowSamplers: boolean;\r\n\r\n    /** Indicates to check the matrix bytes per bytes to know if it has changed or not. If false, only the updateFlag of the matrix is checked */\r\n    uniformBufferHardCheckMatrix: boolean;\r\n\r\n    /** Indicates that prefiltered mipmaps can be generated in some processes (for eg when loading an HDR cube texture) */\r\n    allowTexturePrefiltering: boolean;\r\n\r\n    /** Indicates to track the usage of ubos and to create new ones as necessary during a frame duration */\r\n    trackUbosInFrame: boolean;\r\n\r\n    /** Indicates that the current content of a ubo should be compared to the content of the corresponding GPU buffer and the GPU buffer updated only if different. Requires trackUbosInFrame to be true */\r\n    checkUbosContentBeforeUpload: boolean;\r\n\r\n    /** Indicates that the Cascaded Shadow Map technic is supported */\r\n    supportCSM: boolean;\r\n\r\n    /** Indicates that the textures transcoded by the basis transcoder must have power of 2 width and height */\r\n    basisNeedsPOT: boolean;\r\n\r\n    /** Indicates that the engine supports 3D textures */\r\n    support3DTextures: boolean;\r\n\r\n    /** Indicates that constants need a type suffix in shaders (used by realtime filtering...) */\r\n    needTypeSuffixInShaderConstants: boolean;\r\n\r\n    /** Indicates that MSAA is supported */\r\n    supportMSAA: boolean;\r\n\r\n    /** Indicates that SSAO2 is supported */\r\n    supportSSAO2: boolean;\r\n\r\n    /** Indicates that some additional texture formats are supported (like TEXTUREFORMAT_R for eg) */\r\n    supportExtendedTextureFormats: boolean;\r\n\r\n    /** Indicates that the switch/case construct is supported in shaders */\r\n    supportSwitchCaseInShader: boolean;\r\n\r\n    /** Indicates that synchronous texture reading is supported */\r\n    supportSyncTextureRead: boolean;\r\n\r\n    /** Indicates that y should be inverted when dealing with bitmaps (notably in environment tools) */\r\n    needsInvertingBitmap: boolean;\r\n\r\n    /** Indicates that the engine should cache the bound UBO */\r\n    useUBOBindingCache: boolean;\r\n\r\n    /** Indicates that the inliner should be run over every shader code */\r\n    needShaderCodeInlining: boolean;\r\n\r\n    /** Indicates that even if we don't have to update the properties of a uniform buffer (because of some optimzations in the material) we still need to bind the uniform buffer themselves */\r\n    needToAlwaysBindUniformBuffers: boolean;\r\n\r\n    /**  Indicates that the engine supports render passes */\r\n    supportRenderPasses: boolean;\r\n\r\n    /** @hidden */\r\n    _collectUbosUpdatedInFrame: boolean;\r\n}\r\n"]}