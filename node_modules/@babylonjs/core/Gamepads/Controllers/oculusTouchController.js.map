{"version":3,"file":"oculusTouchController.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/oculusTouchController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n/**\r\n * Oculus Touch Controller\r\n */\r\nexport class OculusTouchController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculus/\";\r\n    /**\r\n     * File name for the left controller model.\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.babylon\";\r\n    /**\r\n     * File name for the right controller model.\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.babylon\";\r\n\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculusQuest/\";\r\n\r\n    /**\r\n     * @hidden\r\n     * If the controllers are running on a device that needs the updated Quest controller models\r\n     */\r\n    public static _IsQuest = false;\r\n\r\n    /**\r\n     * Fired when the secondary trigger on this controller is modified\r\n     */\r\n    public onSecondaryTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Fired when the thumb rest on this controller is modified\r\n     */\r\n    public onThumbRestChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Creates a new OculusTouchController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.OCULUS;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        let meshName;\r\n\r\n        // Hand\r\n        if (this.hand === \"left\") {\r\n            meshName = OculusTouchController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        SceneLoader.ImportMesh(\r\n            \"\",\r\n            OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL,\r\n            meshName,\r\n            scene,\r\n            (newMeshes) => {\r\n                /*\r\n            Parent Mesh name: oculus_touch_left\r\n            - body\r\n            - trigger\r\n            - thumbstick\r\n            - grip\r\n            - button_y\r\n            - button_x\r\n            - button_enter\r\n            */\r\n\r\n                this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\r\n                this.attachToMesh(this._defaultModel);\r\n                if (meshLoaded) {\r\n                    meshLoaded(this._defaultModel);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fired when the A button on this controller is modified\r\n     */\r\n    public get onAButtonStateChangedObservable() {\r\n        if (this.hand === \"right\") {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No A button on left hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the B button on this controller is modified\r\n     */\r\n    public get onBButtonStateChangedObservable() {\r\n        if (this.hand === \"right\") {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No B button on left hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the X button on this controller is modified\r\n     */\r\n    public get onXButtonStateChangedObservable() {\r\n        if (this.hand === \"left\") {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No X button on right hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the Y button on this controller is modified\r\n     */\r\n    public get onYButtonStateChangedObservable() {\r\n        if (this.hand === \"left\") {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No Y button on right hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\r\n     * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\r\n     * 2) secondary trigger (same)\r\n     * 3) A (right) X (left), touch, pressed = value\r\n     * 4) B / Y\r\n     * 5) thumb rest\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        const notifyObject = state; //{ state: state, changes: changes };\r\n        const triggerDirection = this.hand === \"right\" ? -1 : 1;\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).rotation.x = -notifyObject.value * 0.2;\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).position.y = -notifyObject.value * 0.005;\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).position.z = -notifyObject.value * 0.005;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2: // secondary trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[4]).position.x = triggerDirection * notifyObject.value * 0.0035;\r\n                }\r\n                this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[1]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[1]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 4:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 5:\r\n                this.onThumbRestChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        // If the headset reports being an Oculus Quest, use the Quest controller models\r\n        if (EngineStore.LastCreatedEngine && EngineStore.LastCreatedEngine._vrDisplay && EngineStore.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\r\n            OculusTouchController._IsQuest = true;\r\n        }\r\n        return gamepadInfo.id.indexOf(\"Oculus Touch\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new OculusTouchController(gamepadInfo);\r\n    },\r\n});\r\n"]}