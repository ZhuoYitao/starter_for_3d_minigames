{"version":3,"file":"webVRController.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/webVRController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { ExtendedGamepadButton, MutableGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledController } from \"./poseEnabledController\";\r\nimport type { StickValues, GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Defines the WebVRController object that represents controllers tracked in 3D space\r\n * @deprecated Use WebXR instead\r\n */\r\nexport abstract class WebVRController extends PoseEnabledController {\r\n    /**\r\n     * Internal, the default controller model for the controller\r\n     */\r\n    protected _defaultModel: Nullable<AbstractMesh>;\r\n\r\n    // Observables\r\n    /**\r\n     * Fired when the trigger state has changed\r\n     */\r\n    public onTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the main button state has changed\r\n     */\r\n    public onMainButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the secondary button state has changed\r\n     */\r\n    public onSecondaryButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the pad state has changed\r\n     */\r\n    public onPadStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when controllers stick values have changed\r\n     */\r\n    public onPadValuesChangedObservable = new Observable<StickValues>();\r\n\r\n    /**\r\n     * Array of button available on the controller\r\n     */\r\n    protected _buttons: Array<MutableGamepadButton>;\r\n\r\n    private _onButtonStateChange: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void;\r\n\r\n    /**\r\n     * Fired when a controller button's state has changed\r\n     * @param callback the callback containing the button that was modified\r\n     */\r\n    public onButtonStateChange(callback: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void) {\r\n        this._onButtonStateChange = callback;\r\n    }\r\n\r\n    /**\r\n     * X and Y axis corresponding to the controllers joystick\r\n     */\r\n    public pad: StickValues = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * 'left' or 'right', see https://w3c.github.io/gamepad/extensions.html#gamepadhand-enum\r\n     */\r\n    public hand: string;\r\n\r\n    /**\r\n     * The default controller model for the controller\r\n     */\r\n    public get defaultModel(): Nullable<AbstractMesh> {\r\n        return this._defaultModel;\r\n    }\r\n\r\n    /**\r\n     * Creates a new WebVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the WebVRController should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this._buttons = new Array<ExtendedGamepadButton>(vrGamepad.buttons.length);\r\n        this.hand = vrGamepad.hand;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (let index = 0; index < this._buttons.length; index++) {\r\n            this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\r\n        }\r\n        if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\r\n            this.pad.x = this.leftStick.x;\r\n            this.pad.y = this.leftStick.y;\r\n            this.onPadValuesChangedObservable.notifyObservers(this.pad);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to be called when a button is modified\r\n     */\r\n    protected abstract _handleButtonChange(buttonIdx: number, value: ExtendedGamepadButton, changes: GamepadButtonChanges): void;\r\n\r\n    /**\r\n     * Loads a mesh and attaches it to the controller\r\n     * @param scene the scene the mesh should be added to\r\n     * @param meshLoaded callback for when the mesh has been loaded\r\n     */\r\n    public abstract initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void): void;\r\n\r\n    private _setButtonValue(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton, buttonIndex: number) {\r\n        if (!newState) {\r\n            newState = {\r\n                pressed: false,\r\n                touched: false,\r\n                value: 0,\r\n            };\r\n        }\r\n        if (!currentState) {\r\n            this._buttons[buttonIndex] = {\r\n                pressed: newState.pressed,\r\n                touched: newState.touched,\r\n                value: newState.value,\r\n            };\r\n            return;\r\n        }\r\n        this._checkChanges(newState, currentState);\r\n        if (this._changes.changed) {\r\n            this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\r\n\r\n            this._handleButtonChange(buttonIndex, newState, this._changes);\r\n        }\r\n        this._buttons[buttonIndex].pressed = newState.pressed;\r\n        this._buttons[buttonIndex].touched = newState.touched;\r\n        // oculus triggers are never 0, thou not touched.\r\n        this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\r\n    }\r\n\r\n    // avoid GC, store state in a tmp object\r\n    private _changes: GamepadButtonChanges = {\r\n        pressChanged: false,\r\n        touchChanged: false,\r\n        valueChanged: false,\r\n        changed: false,\r\n    };\r\n\r\n    private _checkChanges(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton) {\r\n        this._changes.pressChanged = newState.pressed !== currentState.pressed;\r\n        this._changes.touchChanged = newState.touched !== currentState.touched;\r\n        this._changes.valueChanged = newState.value !== currentState.value;\r\n        this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\r\n        return this._changes;\r\n    }\r\n\r\n    /**\r\n     * Disposes of th webVRController\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._defaultModel = null;\r\n\r\n        this.onTriggerStateChangedObservable.clear();\r\n        this.onMainButtonStateChangedObservable.clear();\r\n        this.onSecondaryButtonStateChangedObservable.clear();\r\n        this.onPadStateChangedObservable.clear();\r\n        this.onPadValuesChangedObservable.clear();\r\n    }\r\n}\r\n"]}