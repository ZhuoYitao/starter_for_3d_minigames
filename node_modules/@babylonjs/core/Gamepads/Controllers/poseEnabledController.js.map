{"version":3,"file":"poseEnabledController.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/poseEnabledController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Node } from \"../../node\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport type { WebVRFreeCamera, PoseControlled, DevicePose } from \"../../Cameras/VR/webVRCamera\";\r\nimport type { TargetCamera } from \"../../Cameras/targetCamera\";\r\n\r\n/**\r\n * Defines the types of pose enabled controllers that are supported\r\n */\r\nexport enum PoseEnabledControllerType {\r\n    /**\r\n     * HTC Vive\r\n     */\r\n    VIVE,\r\n    /**\r\n     * Oculus Rift\r\n     */\r\n    OCULUS,\r\n    /**\r\n     * Windows mixed reality\r\n     */\r\n    WINDOWS,\r\n    /**\r\n     * Samsung gear VR\r\n     */\r\n    GEAR_VR,\r\n    /**\r\n     * Google Daydream\r\n     */\r\n    DAYDREAM,\r\n    /**\r\n     * Generic\r\n     */\r\n    GENERIC,\r\n}\r\n\r\n/**\r\n * Defines the MutableGamepadButton interface for the state of a gamepad button\r\n */\r\nexport interface MutableGamepadButton {\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    value: number;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    touched: boolean;\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    pressed: boolean;\r\n}\r\n\r\n/**\r\n * Defines the ExtendedGamepadButton interface for a gamepad button which includes state provided by a pose controller\r\n * @hidden\r\n */\r\nexport interface ExtendedGamepadButton extends GamepadButton {\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    readonly pressed: boolean;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    readonly touched: boolean;\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    readonly value: number;\r\n}\r\n\r\n/** @hidden */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _GamePadFactory {\r\n    /**\r\n     * Returns whether or not the current gamepad can be created for this type of controller.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns true if it can be created, otherwise false\r\n     */\r\n    canCreate(gamepadInfo: any): boolean;\r\n\r\n    /**\r\n     * Creates a new instance of the Gamepad.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns the new gamepad instance\r\n     */\r\n    create(gamepadInfo: any): Gamepad;\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n */\r\nexport class PoseEnabledControllerHelper {\r\n    /** @hidden */\r\n    public static _ControllerFactories: _GamePadFactory[] = [];\r\n\r\n    /** @hidden */\r\n    public static _DefaultControllerFactory: Nullable<(gamepadInfo: any) => Gamepad> = null;\r\n\r\n    /**\r\n     * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n     * @param vrGamepad the gamepad to initialized\r\n     * @returns a vr controller of the type the gamepad identified as\r\n     */\r\n    public static InitiateController(vrGamepad: any) {\r\n        for (const factory of this._ControllerFactories) {\r\n            if (factory.canCreate(vrGamepad)) {\r\n                return factory.create(vrGamepad);\r\n            }\r\n        }\r\n\r\n        if (this._DefaultControllerFactory) {\r\n            return this._DefaultControllerFactory(vrGamepad);\r\n        }\r\n\r\n        throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledController object that contains state of a vr capable controller\r\n */\r\nexport class PoseEnabledController extends Gamepad implements PoseControlled {\r\n    /**\r\n     * If the controller is used in a webXR session\r\n     */\r\n    public isXR = false;\r\n    // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\r\n    private _deviceRoomPosition = Vector3.Zero();\r\n    private _deviceRoomRotationQuaternion = new Quaternion();\r\n\r\n    /**\r\n     * The device position in babylon space\r\n     */\r\n    public devicePosition = Vector3.Zero();\r\n    /**\r\n     * The device rotation in babylon space\r\n     */\r\n    public deviceRotationQuaternion = new Quaternion();\r\n    /**\r\n     * The scale factor of the device in babylon space\r\n     */\r\n    public deviceScaleFactor: number = 1;\r\n\r\n    /**\r\n     * (Likely devicePosition should be used instead) The device position in its room space\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * (Likely deviceRotationQuaternion should be used instead) The device rotation in its room space\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n    /**\r\n     * The type of controller (Eg. Windows mixed reality)\r\n     */\r\n    public controllerType: PoseEnabledControllerType;\r\n\r\n    protected _calculatedPosition: Vector3;\r\n    private _calculatedRotation: Quaternion;\r\n\r\n    /**\r\n     * The raw pose from the device\r\n     */\r\n    public rawPose: DevicePose; //GamepadPose;\r\n\r\n    // Used to convert 6dof controllers to 3dof\r\n    private _trackPosition = true;\r\n    private _maxRotationDistFromHeadset = Math.PI / 5;\r\n    private _draggedRoomRotation = 0;\r\n    /**\r\n     * @param fixedPosition\r\n     * @hidden\r\n     */\r\n    public _disableTrackPosition(fixedPosition: Vector3) {\r\n        if (this._trackPosition) {\r\n            this._calculatedPosition.copyFrom(fixedPosition);\r\n            this._trackPosition = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal, the mesh attached to the controller\r\n     * @hidden\r\n     */\r\n    public _mesh: Nullable<AbstractMesh>; // a node that will be attached to this Gamepad\r\n    private _poseControlledCamera: TargetCamera;\r\n\r\n    private _leftHandSystemQuaternion: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Internal, matrix used to convert room space to babylon space\r\n     * @hidden\r\n     */\r\n    public _deviceToWorld = Matrix.Identity();\r\n\r\n    /**\r\n     * Node to be used when casting a ray from the controller\r\n     * @hidden\r\n     */\r\n    public _pointingPoseNode: Nullable<TransformNode> = null;\r\n    /**\r\n     * Name of the child mesh that can be used to cast a ray from the controller\r\n     */\r\n    public static readonly POINTING_POSE = \"POINTING_POSE\";\r\n    /**\r\n     * Creates a new PoseEnabledController from a gamepad\r\n     * @param browserGamepad the gamepad that the PoseEnabledController should be created from\r\n     */\r\n    constructor(browserGamepad: any) {\r\n        super(browserGamepad.id, browserGamepad.index, browserGamepad);\r\n        this.type = Gamepad.POSE_ENABLED;\r\n        this.controllerType = PoseEnabledControllerType.GENERIC;\r\n        this.position = Vector3.Zero();\r\n        this.rotationQuaternion = new Quaternion();\r\n\r\n        this._calculatedPosition = Vector3.Zero();\r\n        this._calculatedRotation = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, this._leftHandSystemQuaternion);\r\n    }\r\n\r\n    private _workingMatrix = Matrix.Identity();\r\n    /**\r\n     * Updates the state of the pose enabled controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this._updatePoseAndMesh();\r\n    }\r\n\r\n    /**\r\n     * Updates only the pose device and mesh without doing any button event checking\r\n     */\r\n    protected _updatePoseAndMesh() {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        const pose: DevicePose = this.browserGamepad.pose;\r\n        this.updateFromDevice(pose);\r\n\r\n        if (\r\n            !this._trackPosition &&\r\n            EngineStore.LastCreatedScene &&\r\n            EngineStore.LastCreatedScene.activeCamera &&\r\n            (<WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera).devicePosition\r\n        ) {\r\n            const camera = <WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera;\r\n            camera._computeDevicePosition();\r\n\r\n            this._deviceToWorld.setTranslation(camera.devicePosition);\r\n            if (camera.deviceRotationQuaternion) {\r\n                camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]);\r\n\r\n                // Find the radian distance away that the headset is from the controllers rotation\r\n                const distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\r\n                if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\r\n                    // Only rotate enouph to be within the _maxRotationDistFromHeadset\r\n                    const rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\r\n                    this._draggedRoomRotation += rotationAmount;\r\n\r\n                    // Rotate controller around headset\r\n                    const sin = Math.sin(-rotationAmount);\r\n                    const cos = Math.cos(-rotationAmount);\r\n                    this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\r\n                    this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\r\n                }\r\n            }\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\r\n        this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\r\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\r\n        this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\r\n\r\n        if (this._mesh) {\r\n            this._mesh.position.copyFrom(this.devicePosition);\r\n\r\n            if (this._mesh.rotationQuaternion) {\r\n                this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the pose enbaled controller based on the raw pose data from the device\r\n     * @param poseData raw pose fromthe device\r\n     */\r\n    updateFromDevice(poseData: DevicePose) {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        if (poseData) {\r\n            this.rawPose = poseData;\r\n            if (poseData.position) {\r\n                this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\r\n                if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\r\n                    this._deviceRoomPosition.z *= -1;\r\n                }\r\n                if (this._trackPosition) {\r\n                    this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\r\n                }\r\n                this._calculatedPosition.addInPlace(this.position);\r\n            }\r\n            const pose = this.rawPose;\r\n            if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\r\n                this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\r\n                if (this._mesh) {\r\n                    if (this._mesh.getScene().useRightHandedSystem) {\r\n                        this._deviceRoomRotationQuaternion.z *= -1;\r\n                        this._deviceRoomRotationQuaternion.w *= -1;\r\n                    } else {\r\n                        this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\r\n                    }\r\n                }\r\n\r\n                // if the camera is set, rotate to the camera's rotation\r\n                this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _meshAttachedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Attaches a mesh to the controller\r\n     * @param mesh the mesh to be attached\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh) {\r\n        if (this._mesh) {\r\n            this._mesh.parent = null;\r\n        }\r\n        this._mesh = mesh;\r\n        if (this._poseControlledCamera) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n        if (!this._mesh.rotationQuaternion) {\r\n            this._mesh.rotationQuaternion = new Quaternion();\r\n        }\r\n\r\n        // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\r\n        if (!this.isXR) {\r\n            this._updatePoseAndMesh();\r\n            if (this._pointingPoseNode) {\r\n                const parents = [];\r\n                let obj: Node = this._pointingPoseNode;\r\n                while (obj.parent) {\r\n                    parents.push(obj.parent);\r\n                    obj = obj.parent;\r\n                }\r\n                parents.reverse().forEach((p) => {\r\n                    p.computeWorldMatrix(true);\r\n                });\r\n            }\r\n        }\r\n\r\n        this._meshAttachedObservable.notifyObservers(mesh);\r\n    }\r\n\r\n    /**\r\n     * Attaches the controllers mesh to a camera\r\n     * @param camera the camera the mesh should be attached to\r\n     */\r\n    public attachToPoseControlledCamera(camera: TargetCamera) {\r\n        this._poseControlledCamera = camera;\r\n        if (this._mesh) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the controller\r\n     */\r\n    public dispose() {\r\n        if (this._mesh) {\r\n            this._mesh.dispose();\r\n        }\r\n        this._mesh = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * The mesh that is attached to the controller\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray of the controller in the direction the controller is pointing\r\n     * @param length the length the resulting ray should be\r\n     * @returns a ray in the direction the controller is pointing\r\n     */\r\n    public getForwardRay(length = 100): Ray {\r\n        if (!this.mesh) {\r\n            return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\r\n        }\r\n\r\n        const m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\r\n        const origin = m.getTranslation();\r\n\r\n        const forward = new Vector3(0, 0, -1);\r\n        const forwardWorld = Vector3.TransformNormal(forward, m);\r\n\r\n        const direction = Vector3.Normalize(forwardWorld);\r\n\r\n        return new Ray(origin, direction, length);\r\n    }\r\n}\r\n"]}