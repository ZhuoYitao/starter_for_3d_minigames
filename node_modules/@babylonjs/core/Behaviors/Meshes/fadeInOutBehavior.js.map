{"version":3,"file":"fadeInOutBehavior.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Behaviors/Meshes/fadeInOutBehavior.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH;IAeI;;OAEG;IACH;QAAA,iBAAgB;QAjBhB;;WAEG;QACI,UAAK,GAAG,CAAC,CAAC;QACjB;;WAEG;QACI,eAAU,GAAG,GAAG,CAAC;QAEhB,0BAAqB,GAAG,IAAI,GAAG,EAAE,CAAC;QAClC,aAAQ,GAAG,KAAK,CAAC;QACjB,gBAAW,GAAG,CAAC,CAAC;QAChB,eAAU,GAAmB,IAAI,CAAC;QA2ClC,YAAO,GAAG;YACd,IAAI,KAAI,CAAC,UAAU,EAAE;gBACjB,KAAI,CAAC,WAAW,IAAI,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,qBAAqB,CAAC;gBAE7F,KAAI,CAAC,iBAAiB,CAAC,KAAI,CAAC,UAAU,EAAE,CAAC,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,KAAK,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC;gBAE3F,IAAI,KAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,EAAE;oBAChC,KAAI,CAAC,iBAAiB,CAAC,KAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;oBAC3C,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,KAAK,CAAC;oBAChD,OAAO;iBACV;qBAAM,IAAI,KAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,EAAE;oBACvC,KAAI,CAAC,iBAAiB,CAAC,KAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;oBAC3C,IAAI,KAAI,CAAC,WAAW,GAAG,CAAC,EAAE;wBACtB,KAAI,CAAC,WAAW,GAAG,CAAC,CAAC;wBACrB,OAAO;qBACV;iBACJ;gBACD,UAAU,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,qBAAqB,CAAC,CAAC;aACxD;QACL,CAAC,CAAC;IAzDa,CAAC;IAKhB,sBAAW,mCAAI;QAHf;;WAEG;aACH;YACI,OAAO,WAAW,CAAC;QACvB,CAAC;;;OAAA;IAED;;OAEG;IACI,gCAAI,GAAX,cAAe,CAAC;IAEhB;;;OAGG;IACI,kCAAM,GAAb,UAAc,SAAe;QACzB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IAC/C,CAAC;IACD;;OAEG;IACI,kCAAM,GAAb;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACI,kCAAM,GAAb,UAAc,KAAc;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAuBO,6CAAiB,GAAzB,UAA0B,IAAkB,EAAE,KAAa;QAA3D,iBAKC;QAJG,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,UAAC,CAAC;YAC5B,KAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,wBAAC;AAAD,CAAC,AAnFD,IAmFC","sourcesContent":["import type { Behavior } from \"../behavior\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\r\nexport class FadeInOutBehavior implements Behavior<Mesh> {\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\r\n    public delay = 0;\r\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\r\n    public fadeInTime = 300;\r\n\r\n    private _millisecondsPerFrame = 1000 / 60;\r\n    private _hovered = false;\r\n    private _hoverValue = 0;\r\n    private _ownerNode: Nullable<Mesh> = null;\r\n\r\n    /**\r\n     * Instantiates the FadeInOutBehavior\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"FadeInOut\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the fade behavior on the passed in mesh\r\n     * @param ownerNode The mesh that will be faded in/out once attached\r\n     */\r\n    public attach(ownerNode: Mesh): void {\r\n        this._ownerNode = ownerNode;\r\n        this._setAllVisibility(this._ownerNode, 0);\r\n    }\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._ownerNode = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading in or out\r\n     * @param value if the object should fade in or out (true to fade in)\r\n     */\r\n    public fadeIn(value: boolean) {\r\n        this._hovered = value;\r\n        this._update();\r\n    }\r\n\r\n    private _update = () => {\r\n        if (this._ownerNode) {\r\n            this._hoverValue += this._hovered ? this._millisecondsPerFrame : -this._millisecondsPerFrame;\r\n\r\n            this._setAllVisibility(this._ownerNode, (this._hoverValue - this.delay) / this.fadeInTime);\r\n\r\n            if (this._ownerNode.visibility > 1) {\r\n                this._setAllVisibility(this._ownerNode, 1);\r\n                this._hoverValue = this.fadeInTime + this.delay;\r\n                return;\r\n            } else if (this._ownerNode.visibility < 0) {\r\n                this._setAllVisibility(this._ownerNode, 0);\r\n                if (this._hoverValue < 0) {\r\n                    this._hoverValue = 0;\r\n                    return;\r\n                }\r\n            }\r\n            setTimeout(this._update, this._millisecondsPerFrame);\r\n        }\r\n    };\r\n\r\n    private _setAllVisibility(mesh: AbstractMesh, value: number) {\r\n        mesh.visibility = value;\r\n        mesh.getChildMeshes().forEach((c) => {\r\n            this._setAllVisibility(c, value);\r\n        });\r\n    }\r\n}\r\n"]}