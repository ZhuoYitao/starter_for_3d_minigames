{"version":3,"file":"alphaCullingState.js","sourceRoot":"","sources":["../../../../../lts/core/generated/States/alphaCullingState.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @hidden\r\n **/\r\nexport class AlphaState {\r\n    public _blendFunctionParameters = new Array<Nullable<number>>(4);\r\n    public _blendEquationParameters = new Array<Nullable<number>>(2);\r\n    public _blendConstants = new Array<Nullable<number>>(4);\r\n    public _isBlendConstantsDirty = false;\r\n\r\n    private _alphaBlend = false;\r\n    private _isAlphaBlendDirty = false;\r\n    private _isBlendFunctionParametersDirty = false;\r\n    private _isBlendEquationParametersDirty = false;\r\n\r\n    /**\r\n     * Initializes the state.\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty || this._isBlendEquationParametersDirty;\r\n    }\r\n\r\n    public get alphaBlend(): boolean {\r\n        return this._alphaBlend;\r\n    }\r\n\r\n    public set alphaBlend(value: boolean) {\r\n        if (this._alphaBlend === value) {\r\n            return;\r\n        }\r\n\r\n        this._alphaBlend = value;\r\n        this._isAlphaBlendDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendConstants(r: number, g: number, b: number, a: number): void {\r\n        if (this._blendConstants[0] === r && this._blendConstants[1] === g && this._blendConstants[2] === b && this._blendConstants[3] === a) {\r\n            return;\r\n        }\r\n\r\n        this._blendConstants[0] = r;\r\n        this._blendConstants[1] = g;\r\n        this._blendConstants[2] = b;\r\n        this._blendConstants[3] = a;\r\n\r\n        this._isBlendConstantsDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendFunctionParameters(value0: number, value1: number, value2: number, value3: number): void {\r\n        if (\r\n            this._blendFunctionParameters[0] === value0 &&\r\n            this._blendFunctionParameters[1] === value1 &&\r\n            this._blendFunctionParameters[2] === value2 &&\r\n            this._blendFunctionParameters[3] === value3\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._blendFunctionParameters[0] = value0;\r\n        this._blendFunctionParameters[1] = value1;\r\n        this._blendFunctionParameters[2] = value2;\r\n        this._blendFunctionParameters[3] = value3;\r\n\r\n        this._isBlendFunctionParametersDirty = true;\r\n    }\r\n\r\n    public setAlphaEquationParameters(rgb: number, alpha: number): void {\r\n        if (this._blendEquationParameters[0] === rgb && this._blendEquationParameters[1] === alpha) {\r\n            return;\r\n        }\r\n\r\n        this._blendEquationParameters[0] = rgb;\r\n        this._blendEquationParameters[1] = alpha;\r\n\r\n        this._isBlendEquationParametersDirty = true;\r\n    }\r\n\r\n    public reset() {\r\n        this._alphaBlend = false;\r\n        this._blendFunctionParameters[0] = null;\r\n        this._blendFunctionParameters[1] = null;\r\n        this._blendFunctionParameters[2] = null;\r\n        this._blendFunctionParameters[3] = null;\r\n\r\n        this._blendEquationParameters[0] = null;\r\n        this._blendEquationParameters[1] = null;\r\n\r\n        this._blendConstants[0] = null;\r\n        this._blendConstants[1] = null;\r\n        this._blendConstants[2] = null;\r\n        this._blendConstants[3] = null;\r\n\r\n        this._isAlphaBlendDirty = true;\r\n        this._isBlendFunctionParametersDirty = false;\r\n        this._isBlendEquationParametersDirty = false;\r\n        this._isBlendConstantsDirty = false;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Alpha blend\r\n        if (this._isAlphaBlendDirty) {\r\n            if (this._alphaBlend) {\r\n                gl.enable(gl.BLEND);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n\r\n            this._isAlphaBlendDirty = false;\r\n        }\r\n\r\n        // Alpha function\r\n        if (this._isBlendFunctionParametersDirty) {\r\n            gl.blendFuncSeparate(\r\n                <number>this._blendFunctionParameters[0],\r\n                <number>this._blendFunctionParameters[1],\r\n                <number>this._blendFunctionParameters[2],\r\n                <number>this._blendFunctionParameters[3]\r\n            );\r\n            this._isBlendFunctionParametersDirty = false;\r\n        }\r\n\r\n        // Alpha equation\r\n        if (this._isBlendEquationParametersDirty) {\r\n            gl.blendEquationSeparate(this._blendEquationParameters[0]!, this._blendEquationParameters[1]!);\r\n            this._isBlendEquationParametersDirty = false;\r\n        }\r\n\r\n        // Constants\r\n        if (this._isBlendConstantsDirty) {\r\n            gl.blendColor(<number>this._blendConstants[0], <number>this._blendConstants[1], <number>this._blendConstants[2], <number>this._blendConstants[3]);\r\n            this._isBlendConstantsDirty = false;\r\n        }\r\n    }\r\n}\r\n"]}