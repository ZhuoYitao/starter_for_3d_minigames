{"version":3,"file":"meshSimplification.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/meshSimplification.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IndicesArray } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { AsyncLoop } from \"../Misc/tools\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\n/**\r\n * A simplifier interface for future simplification implementations\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport interface ISimplifier {\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     * @param errorCallback in case of an error, this callback will be called. optional.\r\n     */\r\n    simplify(settings: ISimplificationSettings, successCallback: (simplifiedMeshes: Mesh) => void, errorCallback?: () => void): void;\r\n}\r\n\r\n/**\r\n * Expected simplification settings.\r\n * Quality should be between 0 and 1 (1 being 100%, 0 being 0%)\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport interface ISimplificationSettings {\r\n    /**\r\n     * Gets or sets the expected quality\r\n     */\r\n    quality: number;\r\n    /**\r\n     * Gets or sets the distance when this optimized version should be used\r\n     */\r\n    distance: number;\r\n    /**\r\n     * Gets an already optimized mesh\r\n     */\r\n    optimizeMesh?: boolean;\r\n}\r\n\r\n/**\r\n * Class used to specify simplification options\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class SimplificationSettings implements ISimplificationSettings {\r\n    /**\r\n     * Creates a SimplificationSettings\r\n     * @param quality expected quality\r\n     * @param distance distance when this optimized version should be used\r\n     * @param optimizeMesh already optimized mesh\r\n     */\r\n    constructor(\r\n        /** expected quality */\r\n        public quality: number,\r\n        /** distance when this optimized version should be used */\r\n        public distance: number,\r\n        /** already optimized mesh  */\r\n        public optimizeMesh?: boolean\r\n    ) {}\r\n}\r\n\r\n/**\r\n * Interface used to define a simplification task\r\n */\r\nexport interface ISimplificationTask {\r\n    /**\r\n     * Array of settings\r\n     */\r\n    settings: Array<ISimplificationSettings>;\r\n    /**\r\n     * Simplification type\r\n     */\r\n    simplificationType: SimplificationType;\r\n    /**\r\n     * Mesh to simplify\r\n     */\r\n    mesh: Mesh;\r\n    /**\r\n     * Callback called on success\r\n     */\r\n    successCallback?: () => void;\r\n    /**\r\n     * Defines if parallel processing can be used\r\n     */\r\n    parallelProcessing: boolean;\r\n}\r\n\r\n/**\r\n * Queue used to order the simplification tasks\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class SimplificationQueue {\r\n    private _simplificationArray: Array<ISimplificationTask>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the process is still running\r\n     */\r\n    public running: boolean;\r\n\r\n    /**\r\n     * Creates a new queue\r\n     */\r\n    constructor() {\r\n        this.running = false;\r\n        this._simplificationArray = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a new simplification task\r\n     * @param task defines a task to add\r\n     */\r\n    public addTask(task: ISimplificationTask) {\r\n        this._simplificationArray.push(task);\r\n    }\r\n\r\n    /**\r\n     * Execute next task\r\n     */\r\n    public executeNext() {\r\n        const task = this._simplificationArray.pop();\r\n        if (task) {\r\n            this.running = true;\r\n            this.runSimplification(task);\r\n        } else {\r\n            this.running = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a simplification task\r\n     * @param task defines the task to run\r\n     */\r\n    public runSimplification(task: ISimplificationTask) {\r\n        if (task.parallelProcessing) {\r\n            //parallel simplifier\r\n            task.settings.forEach((setting) => {\r\n                const simplifier = this._getSimplifier(task);\r\n                simplifier.simplify(setting, (newMesh) => {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //check if it is the last\r\n                    if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\r\n                        //all done, run the success callback.\r\n                        task.successCallback();\r\n                    }\r\n                    this.executeNext();\r\n                });\r\n            });\r\n        } else {\r\n            //single simplifier.\r\n            const simplifier = this._getSimplifier(task);\r\n\r\n            const runDecimation = (setting: ISimplificationSettings, callback: () => void) => {\r\n                simplifier.simplify(setting, (newMesh) => {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //run the next quality level\r\n                    callback();\r\n                });\r\n            };\r\n\r\n            AsyncLoop.Run(\r\n                task.settings.length,\r\n                (loop: AsyncLoop) => {\r\n                    runDecimation(task.settings[loop.index], () => {\r\n                        loop.executeNext();\r\n                    });\r\n                },\r\n                () => {\r\n                    //execution ended, run the success callback.\r\n                    if (task.successCallback) {\r\n                        task.successCallback();\r\n                    }\r\n                    this.executeNext();\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    private _getSimplifier(task: ISimplificationTask): ISimplifier {\r\n        switch (task.simplificationType) {\r\n            case SimplificationType.QUADRATIC:\r\n            default:\r\n                return new QuadraticErrorSimplification(task.mesh);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The implemented types of simplification\r\n * At the moment only Quadratic Error Decimation is implemented\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport enum SimplificationType {\r\n    /** Quadratic error decimation */\r\n    QUADRATIC,\r\n}\r\n\r\nclass DecimationTriangle {\r\n    public normal: Vector3;\r\n    public error: Array<number>;\r\n    public deleted: boolean;\r\n    public isDirty: boolean;\r\n    public borderFactor: number;\r\n    public deletePending: boolean;\r\n\r\n    public originalOffset: number;\r\n\r\n    constructor(public _vertices: Array<DecimationVertex>) {\r\n        this.error = new Array<number>(4);\r\n        this.deleted = false;\r\n        this.isDirty = false;\r\n        this.deletePending = false;\r\n        this.borderFactor = 0;\r\n    }\r\n}\r\n\r\nclass DecimationVertex {\r\n    public q: QuadraticMatrix;\r\n    public isBorder: boolean;\r\n\r\n    public triangleStart: number;\r\n    public triangleCount: number;\r\n\r\n    public originalOffsets: Array<number>;\r\n\r\n    constructor(public position: Vector3, public id: number) {\r\n        this.isBorder = true;\r\n        this.q = new QuadraticMatrix();\r\n        this.triangleCount = 0;\r\n        this.triangleStart = 0;\r\n        this.originalOffsets = [];\r\n    }\r\n\r\n    public updatePosition(newPosition: Vector3) {\r\n        this.position.copyFrom(newPosition);\r\n    }\r\n}\r\n\r\nclass QuadraticMatrix {\r\n    public data: Array<number>;\r\n\r\n    constructor(data?: Array<number>) {\r\n        this.data = new Array(10);\r\n        for (let i = 0; i < 10; ++i) {\r\n            if (data && data[i]) {\r\n                this.data[i] = data[i];\r\n            } else {\r\n                this.data[i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public det(a11: number, a12: number, a13: number, a21: number, a22: number, a23: number, a31: number, a32: number, a33: number): number {\r\n        const det =\r\n            this.data[a11] * this.data[a22] * this.data[a33] +\r\n            this.data[a13] * this.data[a21] * this.data[a32] +\r\n            this.data[a12] * this.data[a23] * this.data[a31] -\r\n            this.data[a13] * this.data[a22] * this.data[a31] -\r\n            this.data[a11] * this.data[a23] * this.data[a32] -\r\n            this.data[a12] * this.data[a21] * this.data[a33];\r\n        return det;\r\n    }\r\n\r\n    public addInPlace(matrix: QuadraticMatrix) {\r\n        for (let i = 0; i < 10; ++i) {\r\n            this.data[i] += matrix.data[i];\r\n        }\r\n    }\r\n\r\n    public addArrayInPlace(data: Array<number>) {\r\n        for (let i = 0; i < 10; ++i) {\r\n            this.data[i] += data[i];\r\n        }\r\n    }\r\n\r\n    public add(matrix: QuadraticMatrix): QuadraticMatrix {\r\n        const m = new QuadraticMatrix();\r\n        for (let i = 0; i < 10; ++i) {\r\n            m.data[i] = this.data[i] + matrix.data[i];\r\n        }\r\n        return m;\r\n    }\r\n\r\n    public static FromData(a: number, b: number, c: number, d: number): QuadraticMatrix {\r\n        return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\r\n    }\r\n\r\n    //returning an array to avoid garbage collection\r\n    public static DataFromNumbers(a: number, b: number, c: number, d: number) {\r\n        return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\r\n    }\r\n}\r\n\r\nclass Reference {\r\n    constructor(public vertexId: number, public triangleId: number) {}\r\n}\r\n\r\n/**\r\n * An implementation of the Quadratic Error simplification algorithm.\r\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\r\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\r\n * @author RaananW\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class QuadraticErrorSimplification implements ISimplifier {\r\n    private _triangles: Array<DecimationTriangle>;\r\n    private _vertices: Array<DecimationVertex>;\r\n    private _references: Array<Reference>;\r\n\r\n    private _reconstructedMesh: Mesh;\r\n\r\n    /** Gets or sets the number pf sync iterations */\r\n    public syncIterations = 5000;\r\n\r\n    /** Gets or sets the aggressiveness of the simplifier */\r\n    public aggressiveness: number;\r\n\r\n    /** Gets or sets the number of allowed iterations for decimation */\r\n    public decimationIterations: number;\r\n\r\n    /** Gets or sets the espilon to use for bounding box computation */\r\n    public boundingBoxEpsilon: number;\r\n\r\n    /**\r\n     * Creates a new QuadraticErrorSimplification\r\n     * @param _mesh defines the target mesh\r\n     */\r\n    constructor(private _mesh: Mesh) {\r\n        this.aggressiveness = 7;\r\n        this.decimationIterations = 100;\r\n        this.boundingBoxEpsilon = Epsilon;\r\n    }\r\n\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     */\r\n    public simplify(settings: ISimplificationSettings, successCallback: (simplifiedMesh: Mesh) => void) {\r\n        this._initDecimatedMesh();\r\n        //iterating through the submeshes array, one after the other.\r\n        AsyncLoop.Run(\r\n            this._mesh.subMeshes.length,\r\n            (loop: AsyncLoop) => {\r\n                this._initWithMesh(\r\n                    loop.index,\r\n                    () => {\r\n                        this._runDecimation(settings, loop.index, () => {\r\n                            loop.executeNext();\r\n                        });\r\n                    },\r\n                    settings.optimizeMesh\r\n                );\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    successCallback(this._reconstructedMesh);\r\n                }, 0);\r\n            }\r\n        );\r\n    }\r\n\r\n    private _runDecimation(settings: ISimplificationSettings, submeshIndex: number, successCallback: () => void) {\r\n        const targetCount = ~~(this._triangles.length * settings.quality);\r\n        let deletedTriangles = 0;\r\n\r\n        const triangleCount = this._triangles.length;\r\n\r\n        const iterationFunction = (iteration: number, callback: () => void) => {\r\n            setTimeout(() => {\r\n                if (iteration % 5 === 0) {\r\n                    this._updateMesh(iteration === 0);\r\n                }\r\n\r\n                for (let i = 0; i < this._triangles.length; ++i) {\r\n                    this._triangles[i].isDirty = false;\r\n                }\r\n\r\n                const threshold = 0.000000001 * Math.pow(iteration + 3, this.aggressiveness);\r\n\r\n                const trianglesIterator = (i: number) => {\r\n                    const tIdx = ~~((this._triangles.length / 2 + i) % this._triangles.length);\r\n                    const t = this._triangles[tIdx];\r\n                    if (!t) {\r\n                        return;\r\n                    }\r\n                    if (t.error[3] > threshold || t.deleted || t.isDirty) {\r\n                        return;\r\n                    }\r\n                    for (let j = 0; j < 3; ++j) {\r\n                        if (t.error[j] < threshold) {\r\n                            const deleted0: Array<boolean> = [];\r\n                            const deleted1: Array<boolean> = [];\r\n\r\n                            const v0 = t._vertices[j];\r\n                            const v1 = t._vertices[(j + 1) % 3];\r\n\r\n                            if (v0.isBorder || v1.isBorder) {\r\n                                continue;\r\n                            }\r\n\r\n                            const p = Vector3.Zero();\r\n                            // var n = Vector3.Zero();\r\n                            // var uv = Vector2.Zero();\r\n                            // var color = new Color4(0, 0, 0, 1);\r\n\r\n                            this._calculateError(v0, v1, p);\r\n\r\n                            const delTr = new Array<DecimationTriangle>();\r\n\r\n                            if (this._isFlipped(v0, v1, p, deleted0, delTr)) {\r\n                                continue;\r\n                            }\r\n                            if (this._isFlipped(v1, v0, p, deleted1, delTr)) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            const uniqueArray = new Array<DecimationTriangle>();\r\n                            delTr.forEach((deletedT) => {\r\n                                if (uniqueArray.indexOf(deletedT) === -1) {\r\n                                    deletedT.deletePending = true;\r\n                                    uniqueArray.push(deletedT);\r\n                                }\r\n                            });\r\n\r\n                            if (uniqueArray.length % 2 !== 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            v0.q = v1.q.add(v0.q);\r\n\r\n                            v0.updatePosition(p);\r\n\r\n                            const tStart = this._references.length;\r\n\r\n                            deletedTriangles = this._updateTriangles(v0, v0, deleted0, deletedTriangles);\r\n                            deletedTriangles = this._updateTriangles(v0, v1, deleted1, deletedTriangles);\r\n\r\n                            const tCount = this._references.length - tStart;\r\n\r\n                            if (tCount <= v0.triangleCount) {\r\n                                if (tCount) {\r\n                                    for (let c = 0; c < tCount; c++) {\r\n                                        this._references[v0.triangleStart + c] = this._references[tStart + c];\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                v0.triangleStart = tStart;\r\n                            }\r\n\r\n                            v0.triangleCount = tCount;\r\n                            break;\r\n                        }\r\n                    }\r\n                };\r\n                AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, trianglesIterator, callback, () => {\r\n                    return triangleCount - deletedTriangles <= targetCount;\r\n                });\r\n            }, 0);\r\n        };\r\n\r\n        AsyncLoop.Run(\r\n            this.decimationIterations,\r\n            (loop: AsyncLoop) => {\r\n                if (triangleCount - deletedTriangles <= targetCount) {\r\n                    loop.breakLoop();\r\n                } else {\r\n                    iterationFunction(loop.index, () => {\r\n                        loop.executeNext();\r\n                    });\r\n                }\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    //reconstruct this part of the mesh\r\n                    this._reconstructMesh(submeshIndex);\r\n                    successCallback();\r\n                }, 0);\r\n            }\r\n        );\r\n    }\r\n\r\n    private _initWithMesh(submeshIndex: number, callback: Function, optimizeMesh?: boolean) {\r\n        this._vertices = [];\r\n        this._triangles = [];\r\n\r\n        const positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const indices = this._mesh.getIndices();\r\n        const submesh = this._mesh.subMeshes[submeshIndex];\r\n\r\n        const findInVertices = (positionToSearch: Vector3) => {\r\n            if (optimizeMesh) {\r\n                for (let ii = 0; ii < this._vertices.length; ++ii) {\r\n                    if (this._vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\r\n                        return this._vertices[ii];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const vertexReferences: Array<number> = [];\r\n\r\n        const vertexInit = (i: number) => {\r\n            if (!positionData) {\r\n                return;\r\n            }\r\n\r\n            const offset = i + submesh.verticesStart;\r\n            const position = Vector3.FromArray(positionData, offset * 3);\r\n\r\n            const vertex = findInVertices(position) || new DecimationVertex(position, this._vertices.length);\r\n            vertex.originalOffsets.push(offset);\r\n            if (vertex.id === this._vertices.length) {\r\n                this._vertices.push(vertex);\r\n            }\r\n            vertexReferences.push(vertex.id);\r\n        };\r\n        //var totalVertices = mesh.getTotalVertices();\r\n        const totalVertices = submesh.verticesCount;\r\n        AsyncLoop.SyncAsyncForLoop(totalVertices, (this.syncIterations / 4) >> 0, vertexInit, () => {\r\n            const indicesInit = (i: number) => {\r\n                if (!indices) {\r\n                    return;\r\n                }\r\n\r\n                const offset = submesh.indexStart / 3 + i;\r\n                const pos = offset * 3;\r\n                const i0 = indices[pos + 0];\r\n                const i1 = indices[pos + 1];\r\n                const i2 = indices[pos + 2];\r\n                const v0: DecimationVertex = this._vertices[vertexReferences[i0 - submesh.verticesStart]];\r\n                const v1: DecimationVertex = this._vertices[vertexReferences[i1 - submesh.verticesStart]];\r\n                const v2: DecimationVertex = this._vertices[vertexReferences[i2 - submesh.verticesStart]];\r\n                const triangle = new DecimationTriangle([v0, v1, v2]);\r\n                triangle.originalOffset = pos;\r\n                this._triangles.push(triangle);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, this.syncIterations, indicesInit, () => {\r\n                this._init(callback);\r\n            });\r\n        });\r\n    }\r\n\r\n    private _init(callback: Function) {\r\n        const triangleInit1 = (i: number) => {\r\n            const t = this._triangles[i];\r\n            t.normal = Vector3.Cross(t._vertices[1].position.subtract(t._vertices[0].position), t._vertices[2].position.subtract(t._vertices[0].position)).normalize();\r\n            for (let j = 0; j < 3; j++) {\r\n                t._vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -Vector3.Dot(t.normal, t._vertices[0].position)));\r\n            }\r\n        };\r\n        AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit1, () => {\r\n            const triangleInit2 = (i: number) => {\r\n                const t = this._triangles[i];\r\n                for (let j = 0; j < 3; ++j) {\r\n                    t.error[j] = this._calculateError(t._vertices[j], t._vertices[(j + 1) % 3]);\r\n                }\r\n                t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit2, () => {\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    private _reconstructMesh(submeshIndex: number) {\r\n        const newTriangles: Array<DecimationTriangle> = [];\r\n        let i: number;\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            this._vertices[i].triangleCount = 0;\r\n        }\r\n        let t: DecimationTriangle;\r\n        let j: number;\r\n        for (i = 0; i < this._triangles.length; ++i) {\r\n            if (!this._triangles[i].deleted) {\r\n                t = this._triangles[i];\r\n                for (j = 0; j < 3; ++j) {\r\n                    t._vertices[j].triangleCount = 1;\r\n                }\r\n                newTriangles.push(t);\r\n            }\r\n        }\r\n\r\n        const newPositionData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || []);\r\n        const newNormalData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || []);\r\n        const newUVsData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || []);\r\n        const newColorsData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || []);\r\n\r\n        const normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\r\n        const colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\r\n\r\n        let vertexCount = 0;\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            const vertex = this._vertices[i];\r\n            vertex.id = vertexCount;\r\n            if (vertex.triangleCount) {\r\n                vertex.originalOffsets.forEach((originalOffset) => {\r\n                    newPositionData.push(vertex.position.x);\r\n                    newPositionData.push(vertex.position.y);\r\n                    newPositionData.push(vertex.position.z);\r\n\r\n                    if (normalData && normalData.length) {\r\n                        newNormalData.push(normalData[originalOffset * 3]);\r\n                        newNormalData.push(normalData[originalOffset * 3 + 1]);\r\n                        newNormalData.push(normalData[originalOffset * 3 + 2]);\r\n                    }\r\n                    if (uvs && uvs.length) {\r\n                        newUVsData.push(uvs[originalOffset * 2]);\r\n                        newUVsData.push(uvs[originalOffset * 2 + 1]);\r\n                    }\r\n                    if (colorsData && colorsData.length) {\r\n                        newColorsData.push(colorsData[originalOffset * 4]);\r\n                        newColorsData.push(colorsData[originalOffset * 4 + 1]);\r\n                        newColorsData.push(colorsData[originalOffset * 4 + 2]);\r\n                        newColorsData.push(colorsData[originalOffset * 4 + 3]);\r\n                    }\r\n                    ++vertexCount;\r\n                });\r\n            }\r\n        }\r\n\r\n        const startingIndex = this._reconstructedMesh.getTotalIndices();\r\n        const startingVertex = this._reconstructedMesh.getTotalVertices();\r\n\r\n        const submeshesArray = this._reconstructedMesh.subMeshes;\r\n        this._reconstructedMesh.subMeshes = [];\r\n\r\n        const newIndicesArray: number[] = <number[]>this._reconstructedMesh.getIndices(); //[];\r\n        const originalIndices = <IndicesArray>this._mesh.getIndices();\r\n        for (i = 0; i < newTriangles.length; ++i) {\r\n            t = newTriangles[i]; //now get the new referencing point for each vertex\r\n            [0, 1, 2].forEach((idx) => {\r\n                const id = originalIndices[t.originalOffset + idx];\r\n                let offset = t._vertices[idx].originalOffsets.indexOf(id);\r\n                if (offset < 0) {\r\n                    offset = 0;\r\n                }\r\n                newIndicesArray.push(t._vertices[idx].id + offset + startingVertex);\r\n            });\r\n        }\r\n\r\n        //overwriting the old vertex buffers and indices.\r\n\r\n        this._reconstructedMesh.setIndices(newIndicesArray);\r\n        this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\r\n        if (newNormalData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\r\n        }\r\n        if (newUVsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\r\n        }\r\n        if (newColorsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\r\n        }\r\n\r\n        //create submesh\r\n        const originalSubmesh = this._mesh.subMeshes[submeshIndex];\r\n        if (submeshIndex > 0) {\r\n            this._reconstructedMesh.subMeshes = [];\r\n            submeshesArray.forEach((submesh) => {\r\n                SubMesh.AddToMesh(\r\n                    submesh.materialIndex,\r\n                    submesh.verticesStart,\r\n                    submesh.verticesCount,\r\n                    /* 0, newPositionData.length/3, */ submesh.indexStart,\r\n                    submesh.indexCount,\r\n                    submesh.getMesh()\r\n                );\r\n            });\r\n            SubMesh.AddToMesh(\r\n                originalSubmesh.materialIndex,\r\n                startingVertex,\r\n                vertexCount,\r\n                /* 0, newPositionData.length / 3, */ startingIndex,\r\n                newTriangles.length * 3,\r\n                this._reconstructedMesh\r\n            );\r\n        }\r\n    }\r\n\r\n    private _initDecimatedMesh() {\r\n        this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\r\n        this._reconstructedMesh.material = this._mesh.material;\r\n        this._reconstructedMesh.parent = this._mesh.parent;\r\n        this._reconstructedMesh.isVisible = false;\r\n        this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\r\n    }\r\n\r\n    private _isFlipped(vertex1: DecimationVertex, vertex2: DecimationVertex, point: Vector3, deletedArray: Array<boolean>, delTr: Array<DecimationTriangle>): boolean {\r\n        for (let i = 0; i < vertex1.triangleCount; ++i) {\r\n            const t = this._triangles[this._references[vertex1.triangleStart + i].triangleId];\r\n            if (t.deleted) {\r\n                continue;\r\n            }\r\n\r\n            const s = this._references[vertex1.triangleStart + i].vertexId;\r\n\r\n            const v1 = t._vertices[(s + 1) % 3];\r\n            const v2 = t._vertices[(s + 2) % 3];\r\n\r\n            if (v1 === vertex2 || v2 === vertex2) {\r\n                deletedArray[i] = true;\r\n                delTr.push(t);\r\n                continue;\r\n            }\r\n\r\n            let d1 = v1.position.subtract(point);\r\n            d1 = d1.normalize();\r\n            let d2 = v2.position.subtract(point);\r\n            d2 = d2.normalize();\r\n            if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\r\n                return true;\r\n            }\r\n            const normal = Vector3.Cross(d1, d2).normalize();\r\n            deletedArray[i] = false;\r\n            if (Vector3.Dot(normal, t.normal) < 0.2) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _updateTriangles(origVertex: DecimationVertex, vertex: DecimationVertex, deletedArray: Array<boolean>, deletedTriangles: number): number {\r\n        let newDeleted = deletedTriangles;\r\n        for (let i = 0; i < vertex.triangleCount; ++i) {\r\n            const ref = this._references[vertex.triangleStart + i];\r\n            const t = this._triangles[ref.triangleId];\r\n            if (t.deleted) {\r\n                continue;\r\n            }\r\n            if (deletedArray[i] && t.deletePending) {\r\n                t.deleted = true;\r\n                newDeleted++;\r\n                continue;\r\n            }\r\n            t._vertices[ref.vertexId] = origVertex;\r\n            t.isDirty = true;\r\n            t.error[0] = this._calculateError(t._vertices[0], t._vertices[1]) + t.borderFactor / 2;\r\n            t.error[1] = this._calculateError(t._vertices[1], t._vertices[2]) + t.borderFactor / 2;\r\n            t.error[2] = this._calculateError(t._vertices[2], t._vertices[0]) + t.borderFactor / 2;\r\n            t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            this._references.push(ref);\r\n        }\r\n        return newDeleted;\r\n    }\r\n\r\n    private _identifyBorder() {\r\n        for (let i = 0; i < this._vertices.length; ++i) {\r\n            const vCount: Array<number> = [];\r\n            const vId: Array<number> = [];\r\n            const v = this._vertices[i];\r\n            let j: number;\r\n            for (j = 0; j < v.triangleCount; ++j) {\r\n                const triangle = this._triangles[this._references[v.triangleStart + j].triangleId];\r\n                for (let ii = 0; ii < 3; ii++) {\r\n                    let ofs = 0;\r\n                    const vv = triangle._vertices[ii];\r\n                    while (ofs < vCount.length) {\r\n                        if (vId[ofs] === vv.id) {\r\n                            break;\r\n                        }\r\n                        ++ofs;\r\n                    }\r\n                    if (ofs === vCount.length) {\r\n                        vCount.push(1);\r\n                        vId.push(vv.id);\r\n                    } else {\r\n                        vCount[ofs]++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (j = 0; j < vCount.length; ++j) {\r\n                if (vCount[j] === 1) {\r\n                    this._vertices[vId[j]].isBorder = true;\r\n                } else {\r\n                    this._vertices[vId[j]].isBorder = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateMesh(identifyBorders: boolean = false) {\r\n        let i: number;\r\n        if (!identifyBorders) {\r\n            const newTrianglesVector: Array<DecimationTriangle> = [];\r\n            for (i = 0; i < this._triangles.length; ++i) {\r\n                if (!this._triangles[i].deleted) {\r\n                    newTrianglesVector.push(this._triangles[i]);\r\n                }\r\n            }\r\n            this._triangles = newTrianglesVector;\r\n        }\r\n\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            this._vertices[i].triangleCount = 0;\r\n            this._vertices[i].triangleStart = 0;\r\n        }\r\n        let t: DecimationTriangle;\r\n        let j: number;\r\n        let v: DecimationVertex;\r\n        for (i = 0; i < this._triangles.length; ++i) {\r\n            t = this._triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t._vertices[j];\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n\r\n        let tStart = 0;\r\n\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            this._vertices[i].triangleStart = tStart;\r\n            tStart += this._vertices[i].triangleCount;\r\n            this._vertices[i].triangleCount = 0;\r\n        }\r\n\r\n        const newReferences: Array<Reference> = new Array(this._triangles.length * 3);\r\n        for (i = 0; i < this._triangles.length; ++i) {\r\n            t = this._triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t._vertices[j];\r\n                newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n        this._references = newReferences;\r\n\r\n        if (identifyBorders) {\r\n            this._identifyBorder();\r\n        }\r\n    }\r\n\r\n    private _vertexError(q: QuadraticMatrix, point: Vector3): number {\r\n        const x = point.x;\r\n        const y = point.y;\r\n        const z = point.z;\r\n        return (\r\n            q.data[0] * x * x +\r\n            2 * q.data[1] * x * y +\r\n            2 * q.data[2] * x * z +\r\n            2 * q.data[3] * x +\r\n            q.data[4] * y * y +\r\n            2 * q.data[5] * y * z +\r\n            2 * q.data[6] * y +\r\n            q.data[7] * z * z +\r\n            2 * q.data[8] * z +\r\n            q.data[9]\r\n        );\r\n    }\r\n\r\n    private _calculateError(vertex1: DecimationVertex, vertex2: DecimationVertex, pointResult?: Vector3): number {\r\n        const q = vertex1.q.add(vertex2.q);\r\n        const border = vertex1.isBorder && vertex2.isBorder;\r\n        let error: number = 0;\r\n        const qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\r\n\r\n        if (qDet !== 0 && !border) {\r\n            if (!pointResult) {\r\n                pointResult = Vector3.Zero();\r\n            }\r\n            pointResult.x = (-1 / qDet) * q.det(1, 2, 3, 4, 5, 6, 5, 7, 8);\r\n            pointResult.y = (1 / qDet) * q.det(0, 2, 3, 1, 5, 6, 2, 7, 8);\r\n            pointResult.z = (-1 / qDet) * q.det(0, 1, 3, 1, 4, 6, 2, 5, 8);\r\n            error = this._vertexError(q, pointResult);\r\n        } else {\r\n            const p3 = vertex1.position.add(vertex2.position).divide(new Vector3(2, 2, 2));\r\n            //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\r\n            const error1 = this._vertexError(q, vertex1.position);\r\n            const error2 = this._vertexError(q, vertex2.position);\r\n            const error3 = this._vertexError(q, p3);\r\n            error = Math.min(error1, error2, error3);\r\n            if (error === error1) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex1.position);\r\n                }\r\n            } else if (error === error2) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex2.position);\r\n                }\r\n            } else {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(p3);\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n}\r\n"]}