{"version":3,"file":"meshSimplificationSceneComponent.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/meshSimplificationSceneComponent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE/E,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAc5D,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,qBAAqB,EAAE;IAC1D,GAAG,EAAE;QACD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC5B,IAAI,CAAC,oBAAoB,GAAG,IAAI,mBAAmB,EAAE,CAAC;YACtD,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,wBAAwB,CAAoC,CAAC;YACxH,IAAI,CAAC,SAAS,EAAE;gBACZ,SAAS,GAAG,IAAI,+BAA+B,CAAC,IAAI,CAAC,CAAC;gBACtD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aACjC;SACJ;QACD,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IACD,GAAG,EAAE,UAAuB,KAA0B;QAClD,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;IACtC,CAAC;IACD,UAAU,EAAE,IAAI;IAChB,YAAY,EAAE,IAAI;CACrB,CAAC,CAAC;AAsBH,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,UACtB,QAAwC,EACxC,kBAAkC,EAClC,kBAAqE,EACrE,eAA8D;IAF9D,mCAAA,EAAA,yBAAkC;IAClC,mCAAA,EAAA,qBAAyC,kBAAkB,CAAC,SAAS;IAGrE,IAAI,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC;QACxC,QAAQ,EAAE,QAAQ;QAClB,kBAAkB,EAAE,kBAAkB;QACtC,IAAI,EAAE,IAAI;QACV,kBAAkB,EAAE,kBAAkB;QACtC,eAAe,EAAE,eAAe;KACnC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF;;;GAGG;AACH;IAWI;;;OAGG;IACH,yCAAY,KAAY;QAdxB;;WAEG;QACa,SAAI,GAAG,uBAAuB,CAAC,wBAAwB,CAAC;QAYpE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,kDAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,YAAY,CAAC,uBAAuB,CAAC,2CAA2C,EAAE,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC1J,CAAC;IAED;;;OAGG;IACI,iDAAO,GAAd;QACI,mCAAmC;IACvC,CAAC;IAED;;OAEG;IACI,iDAAO,GAAd;QACI,mCAAmC;IACvC,CAAC;IAEO,6DAAmB,GAA3B;QACI,IAAI,IAAI,CAAC,KAAK,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,OAAO,EAAE;YAC7E,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;SACjD;IACL,CAAC;IACL,sCAAC;AAAD,CAAC,AA9CD,IA8CC","sourcesContent":["import { Scene } from \"../scene\";\r\nimport { Mesh } from \"./mesh\";\r\nimport type { ISimplificationSettings } from \"./meshSimplification\";\r\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _simplificationQueue: SimplificationQueue;\r\n\r\n        /**\r\n         * Gets or sets the simplification queue attached to the scene\r\n         * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n         */\r\n        simplificationQueue: SimplificationQueue;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\r\n    get: function (this: Scene) {\r\n        if (!this._simplificationQueue) {\r\n            this._simplificationQueue = new SimplificationQueue();\r\n            let component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE) as SimplicationQueueSceneComponent;\r\n            if (!component) {\r\n                component = new SimplicationQueueSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n        return this._simplificationQueue;\r\n    },\r\n    set: function (this: Scene, value: SimplificationQueue) {\r\n        this._simplificationQueue = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\ndeclare module \"../Meshes/mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Simplify the mesh according to the given array of settings.\r\n         * Function will return immediately and will simplify async\r\n         * @param settings a collection of simplification settings\r\n         * @param parallelProcessing should all levels calculate parallel or one after the other\r\n         * @param simplificationType the type of simplification to run\r\n         * @param successCallback optional success callback to be called after the simplification finished processing all settings\r\n         * @returns the current mesh\r\n         */\r\n        simplify(\r\n            settings: Array<ISimplificationSettings>,\r\n            parallelProcessing?: boolean,\r\n            simplificationType?: SimplificationType,\r\n            successCallback?: (mesh?: Mesh, submeshIndex?: number) => void\r\n        ): Mesh;\r\n    }\r\n}\r\n\r\nMesh.prototype.simplify = function (\r\n    settings: Array<ISimplificationSettings>,\r\n    parallelProcessing: boolean = true,\r\n    simplificationType: SimplificationType = SimplificationType.QUADRATIC,\r\n    successCallback?: (mesh?: Mesh, submeshIndex?: number) => void\r\n): Mesh {\r\n    this.getScene().simplificationQueue.addTask({\r\n        settings: settings,\r\n        parallelProcessing: parallelProcessing,\r\n        mesh: this,\r\n        simplificationType: simplificationType,\r\n        successCallback: successCallback,\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\r\n * created in a scene\r\n */\r\nexport class SimplicationQueueSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    private _beforeCameraUpdate(): void {\r\n        if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\r\n            this.scene._simplificationQueue.executeNext();\r\n        }\r\n    }\r\n}\r\n"]}