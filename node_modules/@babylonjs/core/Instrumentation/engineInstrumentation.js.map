{"version":3,"file":"engineInstrumentation.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Instrumentation/engineInstrumentation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAIlD;;;GAGG;AACH;IAgFI;;;;;OAKG;IACH;IACI;;OAEG;IACI,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAzFjB,yBAAoB,GAAG,KAAK,CAAC;QAE7B,kCAA6B,GAAG,KAAK,CAAC;QACtC,2BAAsB,GAAG,IAAI,WAAW,EAAE,CAAC;QAEnD,YAAY;QACJ,0BAAqB,GAA+B,IAAI,CAAC;QACzD,wBAAmB,GAA+B,IAAI,CAAC;QACvD,uCAAkC,GAA+B,IAAI,CAAC;QACtE,sCAAiC,GAA+B,IAAI,CAAC;IAiF1E,CAAC;IA3EJ,sBAAW,sDAAmB;QAJ9B,aAAa;QACb;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;QAChD,CAAC;;;OAAA;IAKD,sBAAW,sDAAmB;QAH9B;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,oBAAoB,CAAC;QACrC,CAAC;QAED;;WAEG;aACH,UAA+B,KAAc;YACzC,IAAI,KAAK,KAAK,IAAI,CAAC,oBAAoB,EAAE;gBACrC,OAAO;aACV;YAED,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;;;OAZA;IAiBD,sBAAW,+DAA4B;QAHvC;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,sBAAsB,CAAC;QACvC,CAAC;;;OAAA;IAKD,sBAAW,+DAA4B;QAHvC;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,6BAA6B,CAAC;QAC9C,CAAC;QAED;;WAEG;aACH,UAAwC,KAAc;YAAtD,iBAsBC;YArBG,IAAI,KAAK,KAAK,IAAI,CAAC,6BAA6B,EAAE;gBAC9C,OAAO;aACV;YAED,IAAI,CAAC,6BAA6B,GAAG,KAAK,CAAC;YAE3C,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,GAAG,CAAC;oBAC1F,KAAI,CAAC,sBAAsB,CAAC,aAAa,EAAE,CAAC;oBAC5C,KAAI,CAAC,sBAAsB,CAAC,eAAe,EAAE,CAAC;gBAClD,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC,MAAM,CAAC,kCAAkC,CAAC,GAAG,CAAC;oBACxF,KAAI,CAAC,sBAAsB,CAAC,aAAa,EAAE,CAAC;gBAChD,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;gBAChG,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC;gBAC/C,IAAI,CAAC,MAAM,CAAC,kCAAkC,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gBAC9F,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC;aACjD;QACL,CAAC;;;OA3BA;IA0CD;;OAEG;IACI,uCAAO,GAAd;QACI,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACtE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAElC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAClE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAChG,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC;QAE/C,IAAI,CAAC,MAAM,CAAC,kCAAkC,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QAC9F,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC;QAExC,IAAI,CAAC,MAAO,GAAG,IAAI,CAAC;IAC9B,CAAC;IACL,4BAAC;AAAD,CAAC,AA/GD,IA+GC","sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n */\r\nexport class EngineInstrumentation implements IDisposable {\r\n    private _captureGPUFrameTime = false;\r\n\r\n    private _captureShaderCompilationTime = false;\r\n    private _shaderCompilationTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onEndFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onBeforeShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n    private _onAfterShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for GPU frame time\r\n     */\r\n    public get gpuFrameTimeCounter(): PerfCounter {\r\n        return this.engine.getGPUFrameTimeCounter();\r\n    }\r\n\r\n    /**\r\n     * Gets the GPU frame time capture status\r\n     */\r\n    public get captureGPUFrameTime(): boolean {\r\n        return this._captureGPUFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the GPU frame time capture\r\n     */\r\n    public set captureGPUFrameTime(value: boolean) {\r\n        if (value === this._captureGPUFrameTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureGPUFrameTime = value;\r\n        this.engine.captureGPUFrameTime(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for shader compilation time\r\n     */\r\n    public get shaderCompilationTimeCounter(): PerfCounter {\r\n        return this._shaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the shader compilation time capture status\r\n     */\r\n    public get captureShaderCompilationTime(): boolean {\r\n        return this._captureShaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the shader compilation time capture\r\n     */\r\n    public set captureShaderCompilationTime(value: boolean) {\r\n        if (value === this._captureShaderCompilationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureShaderCompilationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.fetchNewFrame();\r\n                this._shaderCompilationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n            this._onBeforeShaderCompilationObserver = null;\r\n            this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n            this._onAfterShaderCompilationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new engine instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n     * @param engine Defines the engine to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented engine.\r\n         */\r\n        public engine: Engine\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\r\n        this._onBeginFrameObserver = null;\r\n\r\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\r\n        this._onEndFrameObserver = null;\r\n\r\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n        this._onBeforeShaderCompilationObserver = null;\r\n\r\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n        this._onAfterShaderCompilationObserver = null;\r\n\r\n        (<any>this.engine) = null;\r\n    }\r\n}\r\n"]}