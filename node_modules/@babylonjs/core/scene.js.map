{"version":3,"file":"scene.js","sourceRoot":"","sources":["../../../../lts/core/generated/scene.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { Nullable } from \"./types\";\nimport { Tools } from \"./Misc/tools\";\nimport type { IAnimatable } from \"./Animations/animatable.interface\";\nimport { PrecisionDate } from \"./Misc/precisionDate\";\nimport type { Observer } from \"./Misc/observable\";\nimport { Observable } from \"./Misc/observable\";\nimport type { ISmartArrayLike } from \"./Misc/smartArray\";\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray\";\nimport { StringDictionary } from \"./Misc/stringDictionary\";\nimport { Tags } from \"./Misc/tags\";\nimport type { Vector2, Vector4 } from \"./Maths/math.vector\";\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector\";\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\nimport { AbstractScene } from \"./abstractScene\";\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration\";\nimport { UniformBuffer } from \"./Materials/uniformBuffer\";\nimport { PickingInfo } from \"./Collisions/pickingInfo\";\nimport type { ICollisionCoordinator } from \"./Collisions/collisionCoordinator\";\nimport type { PointerEventTypes, PointerInfoPre, PointerInfo } from \"./Events/pointerEvents\";\nimport type { KeyboardInfoPre, KeyboardInfo } from \"./Events/keyboardEvents\";\nimport { ActionEvent } from \"./Actions/actionEvent\";\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager\";\nimport type { IOfflineProvider } from \"./Offline/IOfflineProvider\";\nimport type { RenderingGroupInfo, IRenderingManagerAutoClearSetup } from \"./Rendering/renderingManager\";\nimport { RenderingManager } from \"./Rendering/renderingManager\";\nimport type { ISceneComponent, ISceneSerializableComponent, SimpleStageAction, RenderTargetsStageAction, RenderTargetStageAction, MeshStageAction, EvaluateSubMeshStageAction, PreActiveMeshStageAction, CameraStageAction, RenderingGroupStageAction, RenderingMeshStageAction, PointerMoveStageAction, PointerUpDownStageAction, CameraStageFrameBufferAction, } from \"./sceneComponent\";\nimport { Stage } from \"./sceneComponent\";\nimport type { Engine } from \"./Engines/engine\";\nimport { Constants } from \"./Engines/constants\";\nimport { IsWindowObjectExist } from \"./Misc/domManagement\";\nimport { EngineStore } from \"./Engines/engineStore\";\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\nimport { _WarnImport } from \"./Misc/devTools\";\nimport type { WebRequest } from \"./Misc/webRequest\";\nimport { InputManager } from \"./Inputs/scene.inputManager\";\nimport { PerfCounter } from \"./Misc/perfCounter\";\nimport type { IFileRequest } from \"./Misc/fileRequest\";\nimport { Color4, Color3 } from \"./Maths/math.color\";\nimport type { Plane } from \"./Maths/math.plane\";\nimport { Frustum } from \"./Maths/math.frustum\";\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator\";\nimport type { LoadFileError, RequestFileError, ReadFileError } from \"./Misc/fileTools\";\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools\";\nimport type { IClipPlanesHolder } from \"./Misc/interfaces/iClipPlanesHolder\";\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\nimport { LightConstants } from \"./Lights/lightConstants\";\nimport type { IComputePressureData } from \"./Misc/computePressure\";\nimport { ComputePressureObserverWrapper } from \"./Misc/computePressure\";\nimport { SliceTools } from \"./Misc/sliceTools\";\ndeclare type Ray = import(\"./Culling/ray\").Ray;\ndeclare type TrianglePickingPredicate = import(\"./Culling/ray\").TrianglePickingPredicate;\ndeclare type Animation = import(\"./Animations/animation\").Animation;\ndeclare type Animatable = import(\"./Animations/animatable\").Animatable;\ndeclare type AnimationGroup = import(\"./Animations/animationGroup\").AnimationGroup;\ndeclare type AnimationPropertiesOverride = import(\"./Animations/animationPropertiesOverride\").AnimationPropertiesOverride;\ndeclare type Collider = import(\"./Collisions/collider\").Collider;\ndeclare type PostProcess = import(\"./PostProcesses/postProcess\").PostProcess;\ndeclare type Material = import(\"./Materials/material\").Material;\ndeclare type AbstractMesh = import(\"./Meshes/abstractMesh\").AbstractMesh;\ndeclare type Light = import(\"./Lights/light\").Light;\ndeclare type Camera = import(\"./Cameras/camera\").Camera;\ndeclare type Texture = import(\"./Materials/Textures/texture\").Texture;\ndeclare type MultiMaterial = import(\"./Materials/multiMaterial\").MultiMaterial;\ndeclare type BaseTexture = import(\"./Materials/Textures/baseTexture\").BaseTexture;\ndeclare type TransformNode = import(\"./Meshes/transformNode\").TransformNode;\ndeclare type Skeleton = import(\"./Bones/skeleton\").Skeleton;\ndeclare type Bone = import(\"./Bones/bone\").Bone;\ndeclare type SubMesh = import(\"./Meshes/subMesh\").SubMesh;\ndeclare type Mesh = import(\"./Meshes/mesh\").Mesh;\ndeclare type Node = import(\"./node\").Node;\ndeclare type Geometry = import(\"./Meshes/geometry\").Geometry;\ndeclare type RenderTargetTexture = import(\"./Materials/Textures/renderTargetTexture\").RenderTargetTexture;\ndeclare type MorphTargetManager = import(\"./Morph/morphTargetManager\").MorphTargetManager;\ndeclare type Effect = import(\"./Materials/effect\").Effect;\ndeclare type MorphTarget = import(\"./Morph/morphTarget\").MorphTarget;\ndeclare type WebVRFreeCamera = import(\"./Cameras/VR/webVRCamera\").WebVRFreeCamera;\ndeclare type PerformanceViewerCollector = import(\"./Misc/PerformanceViewer/performanceViewerCollector\").PerformanceViewerCollector;\ndeclare type IAction = import(\"./Actions/action\").IAction;\n/**\n * Define an interface for all classes that will hold resources\n */\nexport interface IDisposable {\n    /**\n     * Releases all held resources\n     */\n    dispose(): void;\n}\n/** Interface defining initialization parameters for Scene class */\nexport interface SceneOptions {\n    /**\n     * Defines that scene should keep up-to-date a map of geometry to enable fast look-up by uniqueId\n     * It will improve performance when the number of geometries becomes important.\n     */\n    useGeometryUniqueIdsMap?: boolean;\n    /**\n     * Defines that each material of the scene should keep up-to-date a map of referencing meshes for fast disposing\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\n     */\n    useMaterialMeshMap?: boolean;\n    /**\n     * Defines that each mesh of the scene should keep up-to-date a map of referencing cloned meshes for fast disposing\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\n     */\n    useClonedMeshMap?: boolean;\n    /** Defines if the creation of the scene should impact the engine (Eg. UtilityLayer's scene) */\n    virtual?: boolean;\n}\n/**\n * Represents a scene to be rendered by the engine.\n * @see https://doc.babylonjs.com/features/scene\n */\nexport class Scene extends AbstractScene implements IAnimatable, IClipPlanesHolder {\n    /** The fog is deactivated */\n    public static readonly FOGMODE_NONE = 0;\n    /** The fog density is following an exponential function */\n    public static readonly FOGMODE_EXP = 1;\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\n    public static readonly FOGMODE_EXP2 = 2;\n    /** The fog density is following a linear function. */\n    public static readonly FOGMODE_LINEAR = 3;\n    /**\n     * Gets or sets the minimum deltatime when deterministic lock step is enabled\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     */\n    public static MinDeltaTime = 1.0;\n    /**\n     * Gets or sets the maximum deltatime when deterministic lock step is enabled\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     */\n    public static MaxDeltaTime = 1000.0;\n    /**\n     * Factory used to create the default material.\n     * @param scene The scene to create the material for\n     * @returns The default material\n     */\n    public static DefaultMaterialFactory(scene: Scene): Material {\n        throw _WarnImport(\"StandardMaterial\");\n    }\n    /**\n     * Factory used to create the a collision coordinator.\n     * @returns The collision coordinator\n     */\n    public static CollisionCoordinatorFactory(): ICollisionCoordinator {\n        throw _WarnImport(\"DefaultCollisionCoordinator\");\n    }\n    // Members\n    /** @hidden */\n    public _inputManager = new InputManager(this);\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\n    public cameraToUseForPointers: Nullable<Camera> = null;\n    /** @hidden */\n    public readonly _isScene = true;\n    /** @hidden */\n    public _blockEntityCollection = false;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\n     */\n    public autoClear = true;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\n     */\n    public autoClearDepthAndStencil = true;\n    /**\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\n     */\n    public clearColor: Color4 = new Color4(0.2, 0.2, 0.3, 1.0);\n    /**\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\n     */\n    public ambientColor = new Color3(0, 0, 0);\n    /**\n     * This is use to store the default BRDF lookup for PBR materials in your scene.\n     * It should only be one of the following (if not the default embedded one):\n     * * For uncorrelated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = false) : https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\n     * * For correlated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedBRDF.dds\n     * * For correlated multi scattering BRDF (pbr.brdf.useEnergyConservation = true and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\n     * The material properties need to be setup according to the type of texture in use.\n     */\n    public environmentBRDFTexture: BaseTexture;\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    public get environmentTexture(): Nullable<BaseTexture> {\n        return this._environmentTexture;\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to set here than in all the materials.\n     */\n    public set environmentTexture(value: Nullable<BaseTexture>) {\n        if (this._environmentTexture === value) {\n            return;\n        }\n        this._environmentTexture = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Intensity of the environment in all pbr material.\n     * This dims or reinforces the IBL lighting overall (reflection and diffuse).\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    public environmentIntensity: number = 1;\n    /** @hidden */\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\n    /**\n     * Default image processing configuration used either in the rendering\n     * Forward main pass or through the imageProcessingPostProcess if present.\n     * As in the majority of the scene they are the same (exception for multi camera),\n     * this is easier to reference from here than from all the materials and post process.\n     *\n     * No setter as we it is a shared configuration, you can set the values instead.\n     */\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\n        return this._imageProcessingConfiguration;\n    }\n    private _forceWireframe = false;\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in wireframe\n     */\n    public set forceWireframe(value: boolean) {\n        if (this._forceWireframe === value) {\n            return;\n        }\n        this._forceWireframe = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get forceWireframe(): boolean {\n        return this._forceWireframe;\n    }\n    private _skipFrustumClipping = false;\n    /**\n     * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\n     */\n    public set skipFrustumClipping(value: boolean) {\n        if (this._skipFrustumClipping === value) {\n            return;\n        }\n        this._skipFrustumClipping = value;\n    }\n    public get skipFrustumClipping(): boolean {\n        return this._skipFrustumClipping;\n    }\n    private _forcePointsCloud = false;\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in point cloud\n     */\n    public set forcePointsCloud(value: boolean) {\n        if (this._forcePointsCloud === value) {\n            return;\n        }\n        this._forcePointsCloud = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get forcePointsCloud(): boolean {\n        return this._forcePointsCloud;\n    }\n    /**\n     * Gets or sets the active clipplane 1\n     */\n    public clipPlane: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 2\n     */\n    public clipPlane2: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 3\n     */\n    public clipPlane3: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 4\n     */\n    public clipPlane4: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 5\n     */\n    public clipPlane5: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 6\n     */\n    public clipPlane6: Nullable<Plane>;\n    /**\n     * Gets or sets a boolean indicating if animations are enabled\n     */\n    public animationsEnabled = true;\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\n    /**\n     * Gets or sets the animation properties override\n     */\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\n        return this._animationPropertiesOverride;\n    }\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\n        this._animationPropertiesOverride = value;\n    }\n    /**\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\n     */\n    public useConstantAnimationDeltaTime = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\n     * Please note that it requires to run a ray cast through the scene on every frame\n     */\n    public constantlyUpdateMeshUnderPointer = false;\n    /**\n     * Defines the HTML cursor to use when hovering over interactive elements\n     */\n    public hoverCursor = \"pointer\";\n    /**\n     * Defines the HTML default cursor to use (empty by default)\n     */\n    public defaultCursor: string = \"\";\n    /**\n     * Defines whether cursors are handled by the scene.\n     */\n    public doNotHandleCursors = false;\n    /**\n     * This is used to call preventDefault() on pointer down\n     * in order to block unwanted artifacts like system double clicks\n     */\n    public preventDefaultOnPointerDown = true;\n    /**\n     * This is used to call preventDefault() on pointer up\n     * in order to block unwanted artifacts like system double clicks\n     */\n    public preventDefaultOnPointerUp = true;\n    // Metadata\n    /**\n     * Gets or sets user defined metadata\n     */\n    public metadata: any = null;\n    /**\n     * For internal use only. Please do not use.\n     */\n    public reservedDataStore: any = null;\n    /**\n     * Gets the name of the plugin used to load this scene (null by default)\n     */\n    public loadingPluginName: string;\n    /**\n     * Use this array to add regular expressions used to disable offline support for specific urls\n     */\n    public disableOfflineSupportExceptionRules = new Array<RegExp>();\n    /**\n     * An event triggered when the scene is disposed.\n     */\n    public onDisposeObservable = new Observable<Scene>();\n    private _onDisposeObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed when this scene is disposed. */\n    public set onDispose(callback: () => void) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * An event triggered before rendering the scene (right after animations and physics)\n     */\n    public onBeforeRenderObservable = new Observable<Scene>();\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed before rendering this scene */\n    public set beforeRender(callback: Nullable<() => void>) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        if (callback) {\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        }\n    }\n    /**\n     * An event triggered after rendering the scene\n     */\n    public onAfterRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\n     */\n    public onAfterRenderCameraObservable = new Observable<Camera>();\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed after rendering this scene */\n    public set afterRender(callback: Nullable<() => void>) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        if (callback) {\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        }\n    }\n    /**\n     * An event triggered before animating the scene\n     */\n    public onBeforeAnimationsObservable = new Observable<Scene>();\n    /**\n     * An event triggered after animations processing\n     */\n    public onAfterAnimationsObservable = new Observable<Scene>();\n    /**\n     * An event triggered before draw calls are ready to be sent\n     */\n    public onBeforeDrawPhaseObservable = new Observable<Scene>();\n    /**\n     * An event triggered after draw calls have been sent\n     */\n    public onAfterDrawPhaseObservable = new Observable<Scene>();\n    /**\n     * An event triggered when the scene is ready\n     */\n    public onReadyObservable = new Observable<Scene>();\n    /**\n     * An event triggered before rendering a camera\n     */\n    public onBeforeCameraRenderObservable = new Observable<Camera>();\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\n    /** Sets a function to be executed before rendering a camera*/\n    public set beforeCameraRender(callback: () => void) {\n        if (this._onBeforeCameraRenderObserver) {\n            this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        }\n        this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\n    }\n    /**\n     * An event triggered after rendering a camera\n     */\n    public onAfterCameraRenderObservable = new Observable<Camera>();\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\n    /** Sets a function to be executed after rendering a camera*/\n    public set afterCameraRender(callback: () => void) {\n        if (this._onAfterCameraRenderObserver) {\n            this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        }\n        this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\n    }\n    /**\n     * An event triggered when active meshes evaluation is about to start\n     */\n    public onBeforeActiveMeshesEvaluationObservable = new Observable<Scene>();\n    /**\n     * An event triggered when active meshes evaluation is done\n     */\n    public onAfterActiveMeshesEvaluationObservable = new Observable<Scene>();\n    /**\n     * An event triggered when particles rendering is about to start\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    public onBeforeParticlesRenderingObservable = new Observable<Scene>();\n    /**\n     * An event triggered when particles rendering is done\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    public onAfterParticlesRenderingObservable = new Observable<Scene>();\n    /**\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\n     */\n    public onDataLoadedObservable = new Observable<Scene>();\n    /**\n     * An event triggered when a camera is created\n     */\n    public onNewCameraAddedObservable = new Observable<Camera>();\n    /**\n     * An event triggered when a camera is removed\n     */\n    public onCameraRemovedObservable = new Observable<Camera>();\n    /**\n     * An event triggered when a light is created\n     */\n    public onNewLightAddedObservable = new Observable<Light>();\n    /**\n     * An event triggered when a light is removed\n     */\n    public onLightRemovedObservable = new Observable<Light>();\n    /**\n     * An event triggered when a geometry is created\n     */\n    public onNewGeometryAddedObservable = new Observable<Geometry>();\n    /**\n     * An event triggered when a geometry is removed\n     */\n    public onGeometryRemovedObservable = new Observable<Geometry>();\n    /**\n     * An event triggered when a transform node is created\n     */\n    public onNewTransformNodeAddedObservable = new Observable<TransformNode>();\n    /**\n     * An event triggered when a transform node is removed\n     */\n    public onTransformNodeRemovedObservable = new Observable<TransformNode>();\n    /**\n     * An event triggered when a mesh is created\n     */\n    public onNewMeshAddedObservable = new Observable<AbstractMesh>();\n    /**\n     * An event triggered when a mesh is removed\n     */\n    public onMeshRemovedObservable = new Observable<AbstractMesh>();\n    /**\n     * An event triggered when a skeleton is created\n     */\n    public onNewSkeletonAddedObservable = new Observable<Skeleton>();\n    /**\n     * An event triggered when a skeleton is removed\n     */\n    public onSkeletonRemovedObservable = new Observable<Skeleton>();\n    /**\n     * An event triggered when a material is created\n     */\n    public onNewMaterialAddedObservable = new Observable<Material>();\n    /**\n     * An event triggered when a multi material is created\n     */\n    public onNewMultiMaterialAddedObservable = new Observable<MultiMaterial>();\n    /**\n     * An event triggered when a material is removed\n     */\n    public onMaterialRemovedObservable = new Observable<Material>();\n    /**\n     * An event triggered when a multi material is removed\n     */\n    public onMultiMaterialRemovedObservable = new Observable<MultiMaterial>();\n    /**\n     * An event triggered when a texture is created\n     */\n    public onNewTextureAddedObservable = new Observable<BaseTexture>();\n    /**\n     * An event triggered when a texture is removed\n     */\n    public onTextureRemovedObservable = new Observable<BaseTexture>();\n    /**\n     * An event triggered when render targets are about to be rendered\n     * Can happen multiple times per frame.\n     */\n    public onBeforeRenderTargetsRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered when render targets were rendered.\n     * Can happen multiple times per frame.\n     */\n    public onAfterRenderTargetsRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered before calculating deterministic simulation step\n     */\n    public onBeforeStepObservable = new Observable<Scene>();\n    /**\n     * An event triggered after calculating deterministic simulation step\n     */\n    public onAfterStepObservable = new Observable<Scene>();\n    /**\n     * An event triggered when the activeCamera property is updated\n     */\n    public onActiveCameraChanged = new Observable<Scene>();\n    /**\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    public onBeforeRenderingGroupObservable = new Observable<RenderingGroupInfo>();\n    /**\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    public onAfterRenderingGroupObservable = new Observable<RenderingGroupInfo>();\n    /**\n     * This Observable will when a mesh has been imported into the scene.\n     */\n    public onMeshImportedObservable = new Observable<AbstractMesh>();\n    /**\n     * This Observable will when an animation file has been imported into the scene.\n     */\n    public onAnimationFileImportedObservable = new Observable<Scene>();\n    /**\n     * Gets or sets a user defined funtion to select LOD from a mesh and a camera.\n     * By default this function is undefined and Babylon.js will select LOD based on distance to camera\n     */\n    public customLODSelector: (mesh: AbstractMesh, camera: Camera) => Nullable<AbstractMesh>;\n    // Animations\n    /** @hidden */\n    public _registeredForLateAnimationBindings = new SmartArrayNoDuplicate<any>(256);\n    // Pointers\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\n     */\n    public pointerDownPredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\n     */\n    public pointerUpPredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\n     */\n    public pointerMovePredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n     */\n    public skipPointerMovePicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n     */\n    public skipPointerDownPicking = false;\n    /** Callback called when a pointer move is detected */\n    public onPointerMove: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\n    /** Callback called when a pointer down is detected  */\n    public onPointerDown: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\n    /** Callback called when a pointer up is detected  */\n    public onPointerUp: (evt: IPointerEvent, pickInfo: Nullable<PickingInfo>, type: PointerEventTypes) => void;\n    /** Callback called when a pointer pick is detected */\n    public onPointerPick: (evt: IPointerEvent, pickInfo: PickingInfo) => void;\n    /**\n     * Gets or sets a predicate used to select candidate faces for a pointer move event\n     */\n    public pointerMoveTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\n    /**\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\n     */\n    public onPrePointerObservable = new Observable<PointerInfoPre>();\n    /**\n     * Observable event triggered each time an input event is received from the rendering canvas\n     */\n    public onPointerObservable = new Observable<PointerInfo>();\n    /**\n     * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\n     */\n    public get unTranslatedPointer(): Vector2 {\n        return this._inputManager.unTranslatedPointer;\n    }\n    /**\n     * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\n     */\n    public static get DragMovementThreshold() {\n        return InputManager.DragMovementThreshold;\n    }\n    public static set DragMovementThreshold(value: number) {\n        InputManager.DragMovementThreshold = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\n     */\n    public static get LongPressDelay() {\n        return InputManager.LongPressDelay;\n    }\n    public static set LongPressDelay(value: number) {\n        InputManager.LongPressDelay = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\n     */\n    public static get DoubleClickDelay() {\n        return InputManager.DoubleClickDelay;\n    }\n    public static set DoubleClickDelay(value: number) {\n        InputManager.DoubleClickDelay = value;\n    }\n    /** If you need to check double click without raising a single click at first click, enable this flag */\n    public static get ExclusiveDoubleClickMode() {\n        return InputManager.ExclusiveDoubleClickMode;\n    }\n    public static set ExclusiveDoubleClickMode(value: boolean) {\n        InputManager.ExclusiveDoubleClickMode = value;\n    }\n    /**\n     * Bind the current view position to an effect.\n     * @param effect The effect to be bound\n     * @param variableName name of the shader variable that will hold the eye position\n     * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\n     * @return the computed eye position\n     */\n    public bindEyePosition(effect: Nullable<Effect>, variableName = \"vEyePosition\", isVector3 = false): Vector4 {\n        const eyePosition = this._forcedViewPosition\n            ? this._forcedViewPosition\n            : this._mirroredCameraPosition\n                ? this._mirroredCameraPosition\n                : this.activeCamera!.globalPosition ?? (this.activeCamera as WebVRFreeCamera).devicePosition;\n        const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\n        TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n        if (effect) {\n            if (isVector3) {\n                effect.setFloat3(variableName, TmpVectors.Vector4[0].x, TmpVectors.Vector4[0].y, TmpVectors.Vector4[0].z);\n            }\n            else {\n                effect.setVector4(variableName, TmpVectors.Vector4[0]);\n            }\n        }\n        return TmpVectors.Vector4[0];\n    }\n    /**\n     * Update the scene ubo before it can be used in rendering processing\n     * @returns the scene UniformBuffer\n     */\n    public finalizeSceneUbo(): UniformBuffer {\n        const ubo = this.getSceneUniformBuffer();\n        const eyePosition = this.bindEyePosition(null);\n        ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\n        ubo.update();\n        return ubo;\n    }\n    // Mirror\n    /** @hidden */\n    public _mirroredCameraPosition: Nullable<Vector3>;\n    // Keyboard\n    /**\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\n     */\n    public onPreKeyboardObservable = new Observable<KeyboardInfoPre>();\n    /**\n     * Observable event triggered each time an keyboard event is received from the hosting window\n     */\n    public onKeyboardObservable = new Observable<KeyboardInfo>();\n    // Coordinates system\n    private _useRightHandedSystem = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\n     */\n    public set useRightHandedSystem(value: boolean) {\n        if (this._useRightHandedSystem === value) {\n            return;\n        }\n        this._useRightHandedSystem = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get useRightHandedSystem(): boolean {\n        return this._useRightHandedSystem;\n    }\n    // Deterministic lockstep\n    private _timeAccumulator: number = 0;\n    private _currentStepId: number = 0;\n    private _currentInternalStep: number = 0;\n    /**\n     * Sets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     * @param newStepId defines the step Id\n     */\n    public setStepId(newStepId: number): void {\n        this._currentStepId = newStepId;\n    }\n    /**\n     * Gets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     * @returns the step Id\n     */\n    public getStepId(): number {\n        return this._currentStepId;\n    }\n    /**\n     * Gets the internal step used by deterministic lock step\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     * @returns the internal step\n     */\n    public getInternalStep(): number {\n        return this._currentInternalStep;\n    }\n    // Fog\n    private _fogEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if fog is enabled on this scene\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is true)\n     */\n    public set fogEnabled(value: boolean) {\n        if (this._fogEnabled === value) {\n            return;\n        }\n        this._fogEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get fogEnabled(): boolean {\n        return this._fogEnabled;\n    }\n    private _fogMode = Scene.FOGMODE_NONE;\n    /**\n     * Gets or sets the fog mode to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * | mode | value |\n     * | --- | --- |\n     * | FOGMODE_NONE | 0 |\n     * | FOGMODE_EXP | 1 |\n     * | FOGMODE_EXP2 | 2 |\n     * | FOGMODE_LINEAR | 3 |\n     */\n    public set fogMode(value: number) {\n        if (this._fogMode === value) {\n            return;\n        }\n        this._fogMode = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get fogMode(): number {\n        return this._fogMode;\n    }\n    /**\n     * Gets or sets the fog color to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is Color3(0.2, 0.2, 0.3))\n     */\n    public fogColor = new Color3(0.2, 0.2, 0.3);\n    /**\n     * Gets or sets the fog density to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is 0.1)\n     */\n    public fogDensity = 0.1;\n    /**\n     * Gets or sets the fog start distance to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is 0)\n     */\n    public fogStart = 0;\n    /**\n     * Gets or sets the fog end distance to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is 1000)\n     */\n    public fogEnd = 1000.0;\n    /**\n     * Flag indicating that the frame buffer binding is handled by another component\n     */\n    public get prePass(): boolean {\n        return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\n    }\n    /**\n     * Flag indicating if we need to store previous matrices when rendering\n     */\n    public needsPreviousWorldMatrices = false;\n    // Lights\n    private _shadowsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if shadows are enabled on this scene\n     */\n    public set shadowsEnabled(value: boolean) {\n        if (this._shadowsEnabled === value) {\n            return;\n        }\n        this._shadowsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\n    }\n    public get shadowsEnabled(): boolean {\n        return this._shadowsEnabled;\n    }\n    private _lightsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if lights are enabled on this scene\n     */\n    public set lightsEnabled(value: boolean) {\n        if (this._lightsEnabled === value) {\n            return;\n        }\n        this._lightsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\n    }\n    public get lightsEnabled(): boolean {\n        return this._lightsEnabled;\n    }\n    /** All of the active cameras added to this scene. */\n    public activeCameras: Nullable<Camera[]> = new Array<Camera>();\n    /** @hidden */\n    public _activeCamera: Nullable<Camera>;\n    /** Gets or sets the current active camera */\n    public get activeCamera(): Nullable<Camera> {\n        return this._activeCamera;\n    }\n    public set activeCamera(value: Nullable<Camera>) {\n        if (value === this._activeCamera) {\n            return;\n        }\n        this._activeCamera = value;\n        this.onActiveCameraChanged.notifyObservers(this);\n    }\n    private _defaultMaterial: Material;\n    /** The default material used on meshes when no material is affected */\n    public get defaultMaterial(): Material {\n        if (!this._defaultMaterial) {\n            this._defaultMaterial = Scene.DefaultMaterialFactory(this);\n        }\n        return this._defaultMaterial;\n    }\n    /** The default material used on meshes when no material is affected */\n    public set defaultMaterial(value: Material) {\n        this._defaultMaterial = value;\n    }\n    // Textures\n    private _texturesEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if textures are enabled on this scene\n     */\n    public set texturesEnabled(value: boolean) {\n        if (this._texturesEnabled === value) {\n            return;\n        }\n        this._texturesEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    public get texturesEnabled(): boolean {\n        return this._texturesEnabled;\n    }\n    // Physics\n    /**\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\n     */\n    public physicsEnabled = true;\n    // Particles\n    /**\n     * Gets or sets a boolean indicating if particles are enabled on this scene\n     */\n    public particlesEnabled = true;\n    // Sprites\n    /**\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\n     */\n    public spritesEnabled = true;\n    // Skeletons\n    private _skeletonsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if skeletons are enabled on this scene\n     */\n    public set skeletonsEnabled(value: boolean) {\n        if (this._skeletonsEnabled === value) {\n            return;\n        }\n        this._skeletonsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AttributesDirtyFlag);\n    }\n    public get skeletonsEnabled(): boolean {\n        return this._skeletonsEnabled;\n    }\n    // Lens flares\n    /**\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\n     */\n    public lensFlaresEnabled = true;\n    // Collisions\n    /**\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\n     */\n    public collisionsEnabled = true;\n    private _collisionCoordinator: ICollisionCoordinator;\n    /** @hidden */\n    public get collisionCoordinator(): ICollisionCoordinator {\n        if (!this._collisionCoordinator) {\n            this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\n            this._collisionCoordinator.init(this);\n        }\n        return this._collisionCoordinator;\n    }\n    /**\n     * Defines the gravity applied to this scene (used only for collisions)\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\n     */\n    public gravity = new Vector3(0, -9.807, 0);\n    // Postprocesses\n    /**\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\n     */\n    public postProcessesEnabled = true;\n    /**\n     * Gets the current postprocess manager\n     */\n    public postProcessManager: PostProcessManager;\n    // Customs render targets\n    /**\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\n     */\n    public renderTargetsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\n     */\n    public dumpNextRenderTargets = false;\n    /**\n     * The list of user defined render targets added to the scene\n     */\n    public customRenderTargets = new Array<RenderTargetTexture>();\n    /**\n     * Defines if texture loading must be delayed\n     * If true, textures will only be loaded when they need to be rendered\n     */\n    public useDelayedTextureLoading: boolean;\n    /**\n     * Gets the list of meshes imported to the scene through SceneLoader\n     */\n    public importedMeshesFiles = new Array<String>();\n    // Probes\n    /**\n     * Gets or sets a boolean indicating if probes are enabled on this scene\n     */\n    public probesEnabled = true;\n    // Offline support\n    /**\n     * Gets or sets the current offline provider to use to store scene data\n     * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\n     */\n    public offlineProvider: IOfflineProvider;\n    /**\n     * Gets or sets the action manager associated with the scene\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n     */\n    public actionManager: AbstractActionManager;\n    private _meshesForIntersections = new SmartArrayNoDuplicate<AbstractMesh>(256);\n    // Procedural textures\n    /**\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\n     */\n    public proceduralTexturesEnabled = true;\n    // Private\n    private _engine: Engine;\n    // Performance counters\n    private _totalVertices = new PerfCounter();\n    /** @hidden */\n    public _activeIndices = new PerfCounter();\n    /** @hidden */\n    public _activeParticles = new PerfCounter();\n    /** @hidden */\n    public _activeBones = new PerfCounter();\n    private _animationRatio: number;\n    /** @hidden */\n    public _animationTimeLast: number;\n    /** @hidden */\n    public _animationTime: number = 0;\n    /**\n     * Gets or sets a general scale for animation speed\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\n     */\n    public animationTimeScale: number = 1;\n    /** @hidden */\n    public _cachedMaterial: Nullable<Material>;\n    /** @hidden */\n    public _cachedEffect: Nullable<Effect>;\n    /** @hidden */\n    public _cachedVisibility: Nullable<number>;\n    private _renderId = 0;\n    private _frameId = 0;\n    private _executeWhenReadyTimeoutId: Nullable<ReturnType<typeof setTimeout>> = null;\n    private _intermediateRendering = false;\n    private _defaultFrameBufferCleared = false;\n    private _viewUpdateFlag = -1;\n    private _projectionUpdateFlag = -1;\n    /** @hidden */\n    public _toBeDisposed = new Array<Nullable<IDisposable>>(256);\n    private _activeRequests = new Array<IFileRequest>();\n    /** @hidden */\n    public _pendingData = new Array();\n    private _isDisposed = false;\n    /**\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\n     */\n    public dispatchAllSubMeshesOfActiveMeshes: boolean = false;\n    private _activeMeshes = new SmartArray<AbstractMesh>(256);\n    private _processedMaterials = new SmartArray<Material>(256);\n    private _renderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\n    private _materialsRenderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\n    /** @hidden */\n    public _activeParticleSystems = new SmartArray<IParticleSystem>(256);\n    private _activeSkeletons = new SmartArrayNoDuplicate<Skeleton>(32);\n    private _softwareSkinnedMeshes = new SmartArrayNoDuplicate<Mesh>(32);\n    private _renderingManager: RenderingManager;\n    /** @hidden */\n    public _activeAnimatables = new Array<Animatable>();\n    private _transformMatrix = Matrix.Zero();\n    private _sceneUbo: UniformBuffer;\n    /** @hidden */\n    public _viewMatrix: Matrix;\n    /** @hidden */\n    public _projectionMatrix: Matrix;\n    /** @hidden */\n    public _forcedViewPosition: Nullable<Vector3>;\n    /** @hidden */\n    public _frustumPlanes: Plane[];\n    /**\n     * Gets the list of frustum planes (built from the active camera)\n     */\n    public get frustumPlanes(): Plane[] {\n        return this._frustumPlanes;\n    }\n    /**\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\n     * This is useful if there are more lights that the maximum simulteanous authorized\n     */\n    public requireLightSorting = false;\n    /** @hidden */\n    public readonly useMaterialMeshMap: boolean;\n    /** @hidden */\n    public readonly useClonedMeshMap: boolean;\n    private _externalData: StringDictionary<Object>;\n    private _uid: Nullable<string>;\n    /**\n     * @hidden\n     * Backing store of defined scene components.\n     */\n    public _components: ISceneComponent[] = [];\n    /**\n     * @hidden\n     * Backing store of defined scene components.\n     */\n    public _serializableComponents: ISceneSerializableComponent[] = [];\n    /**\n     * List of components to register on the next registration step.\n     */\n    private _transientComponents: ISceneComponent[] = [];\n    /**\n     * Registers the transient components if needed.\n     */\n    private _registerTransientComponents(): void {\n        // Register components that have been associated lately to the scene.\n        if (this._transientComponents.length > 0) {\n            for (const component of this._transientComponents) {\n                component.register();\n            }\n            this._transientComponents = [];\n        }\n    }\n    /**\n     * @hidden\n     * Add a component to the scene.\n     * Note that the ccomponent could be registered on th next frame if this is called after\n     * the register component stage.\n     * @param component Defines the component to add to the scene\n     */\n    public _addComponent(component: ISceneComponent) {\n        this._components.push(component);\n        this._transientComponents.push(component);\n        const serializableComponent = component as any;\n        if (serializableComponent.addFromContainer && serializableComponent.serialize) {\n            this._serializableComponents.push(serializableComponent);\n        }\n    }\n    /**\n     * @hidden\n     * Gets a component from the scene.\n     * @param name defines the name of the component to retrieve\n     * @returns the component or null if not present\n     */\n    public _getComponent(name: string): Nullable<ISceneComponent> {\n        for (const component of this._components) {\n            if (component.name === name) {\n                return component;\n            }\n        }\n        return null;\n    }\n    /**\n     * @hidden\n     * Defines the actions happening before camera updates.\n     */\n    public _beforeCameraUpdateStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening before clear the canvas.\n     */\n    public _beforeClearStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening before clear the canvas.\n     */\n    public _beforeRenderTargetClearStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @hidden\n     * Defines the actions when collecting render targets for the frame.\n     */\n    public _gatherRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening for one camera in the frame.\n     */\n    public _gatherActiveCameraRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening during the per mesh ready checks.\n     */\n    public _isReadyForMeshStage = Stage.Create<MeshStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening before evaluate active mesh checks.\n     */\n    public _beforeEvaluateActiveMeshStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening during the evaluate sub mesh checks.\n     */\n    public _evaluateSubMeshStage = Stage.Create<EvaluateSubMeshStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening during the active mesh stage.\n     */\n    public _preActiveMeshStage = Stage.Create<PreActiveMeshStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening during the per camera render target step.\n     */\n    public _cameraDrawRenderTargetStage = Stage.Create<CameraStageFrameBufferAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just before the active camera is drawing.\n     */\n    public _beforeCameraDrawStage = Stage.Create<CameraStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just before a render target is drawing.\n     */\n    public _beforeRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just before a rendering group is drawing.\n     */\n    public _beforeRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just before a mesh is drawing.\n     */\n    public _beforeRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just after a mesh has been drawn.\n     */\n    public _afterRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just after a rendering group has been drawn.\n     */\n    public _afterRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just after the active camera has been drawn.\n     */\n    public _afterCameraDrawStage = Stage.Create<CameraStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just after a render target has been drawn.\n     */\n    public _afterRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening just after rendering all cameras and computing intersections.\n     */\n    public _afterRenderStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening when a pointer move event happens.\n     */\n    public _pointerMoveStage = Stage.Create<PointerMoveStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening when a pointer down event happens.\n     */\n    public _pointerDownStage = Stage.Create<PointerUpDownStageAction>();\n    /**\n     * @hidden\n     * Defines the actions happening when a pointer up event happens.\n     */\n    public _pointerUpStage = Stage.Create<PointerUpDownStageAction>();\n    /**\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\n     */\n    private _geometriesByUniqueId: Nullable<{\n        [uniqueId: string]: number | undefined;\n    }> = null;\n    /**\n     * Creates a new Scene\n     * @param engine defines the engine to use to render this scene\n     * @param options defines the scene options\n     */\n    constructor(engine: Engine, options?: SceneOptions) {\n        super();\n        const fullOptions = {\n            useGeometryUniqueIdsMap: true,\n            useMaterialMeshMap: true,\n            useClonedMeshMap: true,\n            virtual: false,\n            ...options\n        };\n        this._engine = engine || EngineStore.LastCreatedEngine;\n        if (!fullOptions.virtual) {\n            EngineStore._LastCreatedScene = this;\n            this._engine.scenes.push(this);\n        }\n        else {\n            this._engine._virtualScenes.push(this);\n        }\n        this._uid = null;\n        this._renderingManager = new RenderingManager(this);\n        if (PostProcessManager) {\n            this.postProcessManager = new PostProcessManager(this);\n        }\n        if (IsWindowObjectExist()) {\n            this.attachControl();\n        }\n        // Uniform Buffer\n        this._createUbo();\n        // Default Image processing definition\n        if (ImageProcessingConfiguration) {\n            this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n        }\n        this.setDefaultCandidateProviders();\n        if (fullOptions.useGeometryUniqueIdsMap) {\n            this._geometriesByUniqueId = {};\n        }\n        this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\n        this.useClonedMeshMap = fullOptions.useClonedMeshMap;\n        if (!options || !options.virtual) {\n            this._engine.onNewSceneAddedObservable.notifyObservers(this);\n        }\n        if (ComputePressureObserverWrapper.IsAvailable) {\n            this._computePressureObserver = new ComputePressureObserverWrapper((update) => {\n                this.onComputePressureChanged.notifyObservers(update);\n            }, {\n                // Thresholds divide the interval [0.0 .. 1.0] into ranges.\n                cpuUtilizationThresholds: [0.25, 0.5, 0.75, 0.9],\n                cpuSpeedThresholds: [0.5]\n            });\n            this._computePressureObserver.observe();\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"Scene\" string\n     */\n    public getClassName(): string {\n        return \"Scene\";\n    }\n    private _defaultMeshCandidates: ISmartArrayLike<AbstractMesh> = {\n        data: [],\n        length: 0\n    };\n    /**\n     * @hidden\n     */\n    public _getDefaultMeshCandidates(): ISmartArrayLike<AbstractMesh> {\n        this._defaultMeshCandidates.data = this.meshes;\n        this._defaultMeshCandidates.length = this.meshes.length;\n        return this._defaultMeshCandidates;\n    }\n    private _defaultSubMeshCandidates: ISmartArrayLike<SubMesh> = {\n        data: [],\n        length: 0\n    };\n    /**\n     * @param mesh\n     * @hidden\n     */\n    public _getDefaultSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> {\n        this._defaultSubMeshCandidates.data = mesh.subMeshes;\n        this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\n        return this._defaultSubMeshCandidates;\n    }\n    /**\n     * Sets the default candidate providers for the scene.\n     * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\n     * and getCollidingSubMeshCandidates to their default function\n     */\n    public setDefaultCandidateProviders(): void {\n        this.getActiveMeshCandidates = this._getDefaultMeshCandidates.bind(this);\n        this.getActiveSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getIntersectingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getCollidingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    }\n    /**\n     * Gets the mesh that is currently under the pointer\n     */\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\n        return this._inputManager.meshUnderPointer;\n    }\n    /**\n     * Gets or sets the current on-screen X position of the pointer\n     */\n    public get pointerX(): number {\n        return this._inputManager.pointerX;\n    }\n    public set pointerX(value: number) {\n        this._inputManager.pointerX = value;\n    }\n    /**\n     * Gets or sets the current on-screen Y position of the pointer\n     */\n    public get pointerY(): number {\n        return this._inputManager.pointerY;\n    }\n    public set pointerY(value: number) {\n        this._inputManager.pointerY = value;\n    }\n    /**\n     * Gets the cached material (ie. the latest rendered one)\n     * @returns the cached material\n     */\n    public getCachedMaterial(): Nullable<Material> {\n        return this._cachedMaterial;\n    }\n    /**\n     * Gets the cached effect (ie. the latest rendered one)\n     * @returns the cached effect\n     */\n    public getCachedEffect(): Nullable<Effect> {\n        return this._cachedEffect;\n    }\n    /**\n     * Gets the cached visibility state (ie. the latest rendered one)\n     * @returns the cached visibility state\n     */\n    public getCachedVisibility(): Nullable<number> {\n        return this._cachedVisibility;\n    }\n    /**\n     * Gets a boolean indicating if the current material / effect / visibility must be bind again\n     * @param material defines the current material\n     * @param effect defines the current effect\n     * @param visibility defines the current visibility state\n     * @returns true if one parameter is not cached\n     */\n    public isCachedMaterialInvalid(material: Material, effect: Effect, visibility: number = 1) {\n        return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\n    }\n    /**\n     * Gets the engine associated with the scene\n     * @returns an Engine\n     */\n    public getEngine(): Engine {\n        return this._engine;\n    }\n    /**\n     * Gets the total number of vertices rendered per frame\n     * @returns the total number of vertices rendered per frame\n     */\n    public getTotalVertices(): number {\n        return this._totalVertices.current;\n    }\n    /**\n     * Gets the performance counter for total vertices\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get totalVerticesPerfCounter(): PerfCounter {\n        return this._totalVertices;\n    }\n    /**\n     * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\n     * @returns the total number of active indices rendered per frame\n     */\n    public getActiveIndices(): number {\n        return this._activeIndices.current;\n    }\n    /**\n     * Gets the performance counter for active indices\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get totalActiveIndicesPerfCounter(): PerfCounter {\n        return this._activeIndices;\n    }\n    /**\n     * Gets the total number of active particles rendered per frame\n     * @returns the total number of active particles rendered per frame\n     */\n    public getActiveParticles(): number {\n        return this._activeParticles.current;\n    }\n    /**\n     * Gets the performance counter for active particles\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get activeParticlesPerfCounter(): PerfCounter {\n        return this._activeParticles;\n    }\n    /**\n     * Gets the total number of active bones rendered per frame\n     * @returns the total number of active bones rendered per frame\n     */\n    public getActiveBones(): number {\n        return this._activeBones.current;\n    }\n    /**\n     * Gets the performance counter for active bones\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get activeBonesPerfCounter(): PerfCounter {\n        return this._activeBones;\n    }\n    /**\n     * Gets the array of active meshes\n     * @returns an array of AbstractMesh\n     */\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\n        return this._activeMeshes;\n    }\n    /**\n     * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\n     * @returns a number\n     */\n    public getAnimationRatio(): number {\n        return this._animationRatio !== undefined ? this._animationRatio : 1;\n    }\n    /**\n     * Gets an unique Id for the current render phase\n     * @returns a number\n     */\n    public getRenderId(): number {\n        return this._renderId;\n    }\n    /**\n     * Gets an unique Id for the current frame\n     * @returns a number\n     */\n    public getFrameId(): number {\n        return this._frameId;\n    }\n    /** Call this function if you want to manually increment the render Id*/\n    public incrementRenderId(): void {\n        this._renderId++;\n    }\n    private _createUbo(): void {\n        this.setSceneUniformBuffer(this.createSceneUniformBuffer());\n    }\n    /**\n     * Use this method to simulate a pointer move on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\n        this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer down on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\n        this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer up on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\n     * @returns the current scene\n     */\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): Scene {\n        this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\n        return this;\n    }\n    /**\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n     * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\n     * @returns true if the pointer was captured\n     */\n    public isPointerCaptured(pointerId = 0): boolean {\n        return this._inputManager.isPointerCaptured(pointerId);\n    }\n    /**\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n     * @param attachUp defines if you want to attach events to pointerup\n     * @param attachDown defines if you want to attach events to pointerdown\n     * @param attachMove defines if you want to attach events to pointermove\n     */\n    public attachControl(attachUp = true, attachDown = true, attachMove = true): void {\n        this._inputManager.attachControl(attachUp, attachDown, attachMove);\n    }\n    /** Detaches all event handlers*/\n    public detachControl() {\n        this._inputManager.detachControl();\n    }\n    /**\n     * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\n     * Delay loaded resources are not taking in account\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\n     * @return true if all required resources are ready\n     */\n    public isReady(checkRenderTargets = true): boolean {\n        if (this._isDisposed) {\n            return false;\n        }\n        let index: number;\n        const engine = this.getEngine();\n        let isReady = true;\n        // Pending data\n        if (this._pendingData.length > 0) {\n            isReady = false;\n        }\n        // Meshes\n        if (checkRenderTargets) {\n            this._processedMaterials.reset();\n            this._materialsRenderTargets.reset();\n        }\n        for (index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (!mesh.isEnabled()) {\n                continue;\n            }\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n                continue;\n            }\n            if (!mesh.isReady(true)) {\n                isReady = false;\n                continue;\n            }\n            const hardwareInstancedRendering = mesh.hasThinInstances ||\n                mesh.getClassName() === \"InstancedMesh\" ||\n                mesh.getClassName() === \"InstancedLinesMesh\" ||\n                (engine.getCaps().instancedArrays && (<Mesh>mesh).instances.length > 0);\n            // Is Ready For Mesh\n            for (const step of this._isReadyForMeshStage) {\n                if (!step.action(mesh, hardwareInstancedRendering)) {\n                    isReady = false;\n                }\n            }\n            if (!checkRenderTargets) {\n                continue;\n            }\n            const mat = mesh.material || this.defaultMaterial;\n            if (mat) {\n                if (mat._storeEffectOnSubMeshes) {\n                    for (const subMesh of mesh.subMeshes) {\n                        const material = subMesh.getMaterial();\n                        if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                            if (this._processedMaterials.indexOf(material) === -1) {\n                                this._processedMaterials.push(material);\n                                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\n                        if (this._processedMaterials.indexOf(mat) === -1) {\n                            this._processedMaterials.push(mat);\n                            this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures!());\n                        }\n                    }\n                }\n            }\n        }\n        if (!isReady) {\n            return false;\n        }\n        // Effects\n        if (!engine.areAllEffectsReady()) {\n            return false;\n        }\n        // Render targets\n        if (checkRenderTargets) {\n            for (index = 0; index < this._materialsRenderTargets.length; ++index) {\n                const rtt = this._materialsRenderTargets.data[index];\n                if (!rtt.isReadyForRendering()) {\n                    return false;\n                }\n            }\n        }\n        // Geometries\n        for (index = 0; index < this.geometries.length; index++) {\n            const geometry = this.geometries[index];\n            if (geometry.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\n                return false;\n            }\n        }\n        // Post-processes\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (const camera of this.activeCameras) {\n                if (!camera.isReady(true)) {\n                    return false;\n                }\n            }\n        }\n        else if (this.activeCamera) {\n            if (!this.activeCamera.isReady(true)) {\n                return false;\n            }\n        }\n        // Particles\n        for (const particleSystem of this.particleSystems) {\n            if (!particleSystem.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** Resets all cached information relative to material (including effect and visibility) */\n    public resetCachedMaterial(): void {\n        this._cachedMaterial = null;\n        this._cachedEffect = null;\n        this._cachedVisibility = null;\n    }\n    /**\n     * Registers a function to be called before every frame render\n     * @param func defines the function to register\n     */\n    public registerBeforeRender(func: () => void): void {\n        this.onBeforeRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called before every frame render\n     * @param func defines the function to unregister\n     */\n    public unregisterBeforeRender(func: () => void): void {\n        this.onBeforeRenderObservable.removeCallback(func);\n    }\n    /**\n     * Registers a function to be called after every frame render\n     * @param func defines the function to register\n     */\n    public registerAfterRender(func: () => void): void {\n        this.onAfterRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called after every frame render\n     * @param func defines the function to unregister\n     */\n    public unregisterAfterRender(func: () => void): void {\n        this.onAfterRenderObservable.removeCallback(func);\n    }\n    private _executeOnceBeforeRender(func: () => void): void {\n        const execFunc = () => {\n            func();\n            setTimeout(() => {\n                this.unregisterBeforeRender(execFunc);\n            });\n        };\n        this.registerBeforeRender(execFunc);\n    }\n    /**\n     * The provided function will run before render once and will be disposed afterwards.\n     * A timeout delay can be provided so that the function will be executed in N ms.\n     * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\n     * @param func The function to be executed.\n     * @param timeout optional delay in ms\n     */\n    public executeOnceBeforeRender(func: () => void, timeout?: number): void {\n        if (timeout !== undefined) {\n            setTimeout(() => {\n                this._executeOnceBeforeRender(func);\n            }, timeout);\n        }\n        else {\n            this._executeOnceBeforeRender(func);\n        }\n    }\n    /**\n     * @param data\n     * @hidden\n     */\n    public _addPendingData(data: any): void {\n        this._pendingData.push(data);\n    }\n    /**\n     * @param data\n     * @hidden\n     */\n    public _removePendingData(data: any): void {\n        const wasLoading = this.isLoading;\n        const index = this._pendingData.indexOf(data);\n        if (index !== -1) {\n            this._pendingData.splice(index, 1);\n        }\n        if (wasLoading && !this.isLoading) {\n            this.onDataLoadedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Returns the number of items waiting to be loaded\n     * @returns the number of items waiting to be loaded\n     */\n    public getWaitingItemsCount(): number {\n        return this._pendingData.length;\n    }\n    /**\n     * Returns a boolean indicating if the scene is still loading data\n     */\n    public get isLoading(): boolean {\n        return this._pendingData.length > 0;\n    }\n    /**\n     * Registers a function to be executed when the scene is ready\n     * @param {Function} func - the function to be executed\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     */\n    public executeWhenReady(func: () => void, checkRenderTargets = false): void {\n        this.onReadyObservable.add(func);\n        if (this._executeWhenReadyTimeoutId !== null) {\n            return;\n        }\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\n            this._checkIsReady(checkRenderTargets);\n        }, 150);\n    }\n    /**\n     * Returns a promise that resolves when the scene is ready\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     * @returns A promise that resolves when the scene is ready\n     */\n    public whenReadyAsync(checkRenderTargets = false): Promise<void> {\n        return new Promise((resolve) => {\n            this.executeWhenReady(() => {\n                resolve();\n            }, checkRenderTargets);\n        });\n    }\n    /**\n     * @param checkRenderTargets\n     * @hidden\n     */\n    public _checkIsReady(checkRenderTargets = false) {\n        this._registerTransientComponents();\n        if (this.isReady(checkRenderTargets)) {\n            this.onReadyObservable.notifyObservers(this);\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        if (this._isDisposed) {\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\n            this._checkIsReady(checkRenderTargets);\n        }, 100);\n    }\n    /**\n     * Gets all animatable attached to the scene\n     */\n    public get animatables(): Animatable[] {\n        return this._activeAnimatables;\n    }\n    /**\n     * Resets the last animation time frame.\n     * Useful to override when animations start running when loading a scene for the first time.\n     */\n    public resetLastAnimationTimeFrame(): void {\n        this._animationTimeLast = PrecisionDate.Now;\n    }\n    // Matrix\n    /**\n     * Gets the current view matrix\n     * @returns a Matrix\n     */\n    public getViewMatrix(): Matrix {\n        return this._viewMatrix;\n    }\n    /**\n     * Gets the current projection matrix\n     * @returns a Matrix\n     */\n    public getProjectionMatrix(): Matrix {\n        return this._projectionMatrix;\n    }\n    /**\n     * Gets the current transform matrix\n     * @returns a Matrix made of View * Projection\n     */\n    public getTransformMatrix(): Matrix {\n        return this._transformMatrix;\n    }\n    /**\n     * Sets the current transform matrix\n     * @param viewL defines the View matrix to use\n     * @param projectionL defines the Projection matrix to use\n     * @param viewR defines the right View matrix to use (if provided)\n     * @param projectionR defines the right Projection matrix to use (if provided)\n     */\n    public setTransformMatrix(viewL: Matrix, projectionL: Matrix, viewR?: Matrix, projectionR?: Matrix): void {\n        // clear the multiviewSceneUbo if no viewR and projectionR are defined\n        if (!viewR && !projectionR && this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n            this._multiviewSceneUbo = null;\n        }\n        if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\n            return;\n        }\n        this._viewUpdateFlag = viewL.updateFlag;\n        this._projectionUpdateFlag = projectionL.updateFlag;\n        this._viewMatrix = viewL;\n        this._projectionMatrix = projectionL;\n        this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        // Update frustum\n        if (!this._frustumPlanes) {\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\n        }\n        else {\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n        }\n        if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\n            this._updateMultiviewUbo(viewR, projectionR);\n        }\n        else if (this._sceneUbo.useUbo) {\n            this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\n            this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\n            this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n        }\n    }\n    /**\n     * Gets the uniform buffer used to store scene data\n     * @returns a UniformBuffer\n     */\n    public getSceneUniformBuffer(): UniformBuffer {\n        return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\n    }\n    /**\n     * Creates a scene UBO\n     * @param name name of the uniform buffer (optional, for debugging purpose only)\n     * @returns a new ubo\n     */\n    public createSceneUniformBuffer(name?: string): UniformBuffer {\n        const sceneUbo = new UniformBuffer(this._engine, undefined, false, name ?? \"scene\");\n        sceneUbo.addUniform(\"viewProjection\", 16);\n        sceneUbo.addUniform(\"view\", 16);\n        sceneUbo.addUniform(\"projection\", 16);\n        sceneUbo.addUniform(\"vEyePosition\", 4);\n        return sceneUbo;\n    }\n    /**\n     * Sets the scene ubo\n     * @param ubo the ubo to set for the scene\n     */\n    public setSceneUniformBuffer(ubo: UniformBuffer): void {\n        this._sceneUbo = ubo;\n        this._viewUpdateFlag = -1;\n        this._projectionUpdateFlag = -1;\n    }\n    /**\n     * Gets an unique (relatively to the current scene) Id\n     * @returns an unique number for the scene\n     */\n    public getUniqueId() {\n        return UniqueIdGenerator.UniqueId;\n    }\n    /**\n     * Add a mesh to the list of scene's meshes\n     * @param newMesh defines the mesh to add\n     * @param recursive if all child meshes should also be added to the scene\n     */\n    public addMesh(newMesh: AbstractMesh, recursive = false) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.meshes.push(newMesh);\n        newMesh._resyncLightSources();\n        if (!newMesh.parent) {\n            newMesh._addToSceneRootNodes();\n        }\n        this.onNewMeshAddedObservable.notifyObservers(newMesh);\n        if (recursive) {\n            newMesh.getChildMeshes().forEach((m) => {\n                this.addMesh(m);\n            });\n        }\n    }\n    /**\n     * Remove a mesh for the list of scene's meshes\n     * @param toRemove defines the mesh to remove\n     * @param recursive if all child meshes should also be removed from the scene\n     * @returns the index where the mesh was in the mesh list\n     */\n    public removeMesh(toRemove: AbstractMesh, recursive = false): number {\n        const index = this.meshes.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.meshes[index] = this.meshes[this.meshes.length - 1];\n            this.meshes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this._inputManager._invalidateMesh(toRemove);\n        this.onMeshRemovedObservable.notifyObservers(toRemove);\n        if (recursive) {\n            toRemove.getChildMeshes().forEach((m) => {\n                this.removeMesh(m);\n            });\n        }\n        return index;\n    }\n    /**\n     * Add a transform node to the list of scene's transform nodes\n     * @param newTransformNode defines the transform node to add\n     */\n    public addTransformNode(newTransformNode: TransformNode) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\n            // Already there?\n            return;\n        }\n        newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\n        this.transformNodes.push(newTransformNode);\n        if (!newTransformNode.parent) {\n            newTransformNode._addToSceneRootNodes();\n        }\n        this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\n    }\n    /**\n     * Remove a transform node for the list of scene's transform nodes\n     * @param toRemove defines the transform node to remove\n     * @returns the index where the transform node was in the transform node list\n     */\n    public removeTransformNode(toRemove: TransformNode): number {\n        const index = toRemove._indexInSceneTransformNodesArray;\n        if (index !== -1) {\n            if (index !== this.transformNodes.length - 1) {\n                const lastNode = this.transformNodes[this.transformNodes.length - 1];\n                this.transformNodes[index] = lastNode;\n                lastNode._indexInSceneTransformNodesArray = index;\n            }\n            toRemove._indexInSceneTransformNodesArray = -1;\n            this.transformNodes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a skeleton for the list of scene's skeletons\n     * @param toRemove defines the skeleton to remove\n     * @returns the index where the skeleton was in the skeleton list\n     */\n    public removeSkeleton(toRemove: Skeleton): number {\n        const index = this.skeletons.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.skeletons.splice(index, 1);\n            this.onSkeletonRemovedObservable.notifyObservers(toRemove);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeSkeletons);\n        }\n        return index;\n    }\n    /**\n     * Remove a morph target for the list of scene's morph targets\n     * @param toRemove defines the morph target to remove\n     * @returns the index where the morph target was in the morph target list\n     */\n    public removeMorphTargetManager(toRemove: MorphTargetManager): number {\n        const index = this.morphTargetManagers.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.morphTargetManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Remove a light for the list of scene's lights\n     * @param toRemove defines the light to remove\n     * @returns the index where the light was in the light list\n     */\n    public removeLight(toRemove: Light): number {\n        const index = this.lights.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from meshes\n            for (const mesh of this.meshes) {\n                mesh._removeLightSource(toRemove, false);\n            }\n            // Remove from the scene if mesh found\n            this.lights.splice(index, 1);\n            this.sortLightsByPriority();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onLightRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a camera for the list of scene's cameras\n     * @param toRemove defines the camera to remove\n     * @returns the index where the camera was in the camera list\n     */\n    public removeCamera(toRemove: Camera): number {\n        const index = this.cameras.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.cameras.splice(index, 1);\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        // Remove from activeCameras\n        if (this.activeCameras) {\n            const index2 = this.activeCameras.indexOf(toRemove);\n            if (index2 !== -1) {\n                // Remove from the scene if mesh found\n                this.activeCameras.splice(index2, 1);\n            }\n        }\n        // Reset the activeCamera\n        if (this.activeCamera === toRemove) {\n            if (this.cameras.length > 0) {\n                this.activeCamera = this.cameras[0];\n            }\n            else {\n                this.activeCamera = null;\n            }\n        }\n        this.onCameraRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a particle system for the list of scene's particle systems\n     * @param toRemove defines the particle system to remove\n     * @returns the index where the particle system was in the particle system list\n     */\n    public removeParticleSystem(toRemove: IParticleSystem): number {\n        const index = this.particleSystems.indexOf(toRemove);\n        if (index !== -1) {\n            this.particleSystems.splice(index, 1);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeParticleSystems);\n        }\n        return index;\n    }\n    /**\n     * Remove a animation for the list of scene's animations\n     * @param toRemove defines the animation to remove\n     * @returns the index where the animation was in the animation list\n     */\n    public removeAnimation(toRemove: Animation): number {\n        const index = this.animations.indexOf(toRemove);\n        if (index !== -1) {\n            this.animations.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Will stop the animation of the given target\n     * @param target - the target\n     * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\n     * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\n     */\n    public stopAnimation(target: any, animationName?: string, targetMask?: (target: any) => boolean): void {\n        // Do nothing as code will be provided by animation component\n    }\n    /**\n     * Removes the given animation group from this scene.\n     * @param toRemove The animation group to remove\n     * @returns The index of the removed animation group\n     */\n    public removeAnimationGroup(toRemove: AnimationGroup): number {\n        const index = this.animationGroups.indexOf(toRemove);\n        if (index !== -1) {\n            this.animationGroups.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given multi-material from this scene.\n     * @param toRemove The multi-material to remove\n     * @returns The index of the removed multi-material\n     */\n    public removeMultiMaterial(toRemove: MultiMaterial): number {\n        const index = this.multiMaterials.indexOf(toRemove);\n        if (index !== -1) {\n            this.multiMaterials.splice(index, 1);\n        }\n        this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given material from this scene.\n     * @param toRemove The material to remove\n     * @returns The index of the removed material\n     */\n    public removeMaterial(toRemove: Material): number {\n        const index = toRemove._indexInSceneMaterialArray;\n        if (index !== -1 && index < this.materials.length) {\n            if (index !== this.materials.length - 1) {\n                const lastMaterial = this.materials[this.materials.length - 1];\n                this.materials[index] = lastMaterial;\n                lastMaterial._indexInSceneMaterialArray = index;\n            }\n            toRemove._indexInSceneMaterialArray = -1;\n            this.materials.pop();\n        }\n        this.onMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given action manager from this scene.\n     * @param toRemove The action manager to remove\n     * @returns The index of the removed action manager\n     */\n    public removeActionManager(toRemove: AbstractActionManager): number {\n        const index = this.actionManagers.indexOf(toRemove);\n        if (index !== -1) {\n            this.actionManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given texture from this scene.\n     * @param toRemove The texture to remove\n     * @returns The index of the removed texture\n     */\n    public removeTexture(toRemove: BaseTexture): number {\n        const index = this.textures.indexOf(toRemove);\n        if (index !== -1) {\n            this.textures.splice(index, 1);\n        }\n        this.onTextureRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Adds the given light to this scene\n     * @param newLight The light to add\n     */\n    public addLight(newLight: Light): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.lights.push(newLight);\n        this.sortLightsByPriority();\n        if (!newLight.parent) {\n            newLight._addToSceneRootNodes();\n        }\n        // Add light to all meshes (To support if the light is removed and then re-added)\n        for (const mesh of this.meshes) {\n            if (mesh.lightSources.indexOf(newLight) === -1) {\n                mesh.lightSources.push(newLight);\n                mesh._resyncLightSources();\n            }\n        }\n        this.onNewLightAddedObservable.notifyObservers(newLight);\n    }\n    /**\n     * Sorts the list list based on light priorities\n     */\n    public sortLightsByPriority(): void {\n        if (this.requireLightSorting) {\n            this.lights.sort(LightConstants.CompareLightsPriority);\n        }\n    }\n    /**\n     * Adds the given camera to this scene\n     * @param newCamera The camera to add\n     */\n    public addCamera(newCamera: Camera): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.cameras.push(newCamera);\n        this.onNewCameraAddedObservable.notifyObservers(newCamera);\n        if (!newCamera.parent) {\n            newCamera._addToSceneRootNodes();\n        }\n    }\n    /**\n     * Adds the given skeleton to this scene\n     * @param newSkeleton The skeleton to add\n     */\n    public addSkeleton(newSkeleton: Skeleton): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.skeletons.push(newSkeleton);\n        this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\n    }\n    /**\n     * Adds the given particle system to this scene\n     * @param newParticleSystem The particle system to add\n     */\n    public addParticleSystem(newParticleSystem: IParticleSystem): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.particleSystems.push(newParticleSystem);\n    }\n    /**\n     * Adds the given animation to this scene\n     * @param newAnimation The animation to add\n     */\n    public addAnimation(newAnimation: Animation): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animations.push(newAnimation);\n    }\n    /**\n     * Adds the given animation group to this scene.\n     * @param newAnimationGroup The animation group to add\n     */\n    public addAnimationGroup(newAnimationGroup: AnimationGroup): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animationGroups.push(newAnimationGroup);\n    }\n    /**\n     * Adds the given multi-material to this scene\n     * @param newMultiMaterial The multi-material to add\n     */\n    public addMultiMaterial(newMultiMaterial: MultiMaterial): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.multiMaterials.push(newMultiMaterial);\n        this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\n    }\n    /**\n     * Adds the given material to this scene\n     * @param newMaterial The material to add\n     */\n    public addMaterial(newMaterial: Material): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\n            // Already there??\n            return;\n        }\n        newMaterial._indexInSceneMaterialArray = this.materials.length;\n        this.materials.push(newMaterial);\n        this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\n    }\n    /**\n     * Adds the given morph target to this scene\n     * @param newMorphTargetManager The morph target to add\n     */\n    public addMorphTargetManager(newMorphTargetManager: MorphTargetManager): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.morphTargetManagers.push(newMorphTargetManager);\n    }\n    /**\n     * Adds the given geometry to this scene\n     * @param newGeometry The geometry to add\n     */\n    public addGeometry(newGeometry: Geometry): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\n        }\n        this.geometries.push(newGeometry);\n    }\n    /**\n     * Adds the given action manager to this scene\n     * @param newActionManager The action manager to add\n     */\n    public addActionManager(newActionManager: AbstractActionManager): void {\n        this.actionManagers.push(newActionManager);\n    }\n    /**\n     * Adds the given texture to this scene.\n     * @param newTexture The texture to add\n     */\n    public addTexture(newTexture: BaseTexture): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.textures.push(newTexture);\n        this.onNewTextureAddedObservable.notifyObservers(newTexture);\n    }\n    /**\n     * Switch active camera\n     * @param newCamera defines the new active camera\n     * @param attachControl defines if attachControl must be called for the new active camera (default: true)\n     */\n    public switchActiveCamera(newCamera: Camera, attachControl = true): void {\n        const canvas = this._engine.getInputElement();\n        if (!canvas) {\n            return;\n        }\n        if (this.activeCamera) {\n            this.activeCamera.detachControl();\n        }\n        this.activeCamera = newCamera;\n        if (attachControl) {\n            newCamera.attachControl();\n        }\n    }\n    /**\n     * sets the active camera of the scene using its Id\n     * @param id defines the camera's Id\n     * @return the new active camera or null if none found.\n     */\n    public setActiveCameraById(id: string): Nullable<Camera> {\n        const camera = this.getCameraById(id);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * sets the active camera of the scene using its name\n     * @param name defines the camera's name\n     * @returns the new active camera or null if none found.\n     */\n    public setActiveCameraByName(name: string): Nullable<Camera> {\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * get an animation group using its name\n     * @param name defines the material's name\n     * @return the animation group or null if none found.\n     */\n    public getAnimationGroupByName(name: string): Nullable<AnimationGroup> {\n        for (let index = 0; index < this.animationGroups.length; index++) {\n            if (this.animationGroups[index].name === name) {\n                return this.animationGroups[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a material using its unique id\n     * @param uniqueId defines the material's unique id\n     * @return the material or null if none found.\n     */\n    public getMaterialByUniqueID(uniqueId: number): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            if (this.materials[index].uniqueId === uniqueId) {\n                return this.materials[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * get a material using its id\n     * @param id defines the material's Id\n     * @return the material or null if none found.\n     */\n    public getMaterialById(id: string): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            if (this.materials[index].id === id) {\n                return this.materials[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added material using a given id\n     * @param id defines the material's Id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @return the last material with the given id or null if none found.\n     */\n    public getLastMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\n        for (let index = this.materials.length - 1; index >= 0; index--) {\n            if (this.materials[index].id === id) {\n                return this.materials[index];\n            }\n        }\n        if (allowMultiMaterials) {\n            for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\n                if (this.multiMaterials[index].id === id) {\n                    return this.multiMaterials[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a material using its name\n     * @param name defines the material's name\n     * @return the material or null if none found.\n     */\n    public getMaterialByName(name: string): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            if (this.materials[index].name === name) {\n                return this.materials[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a texture using its unique id\n     * @param uniqueId defines the texture's unique id\n     * @return the texture or null if none found.\n     */\n    public getTextureByUniqueId(uniqueId: number): Nullable<BaseTexture> {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].uniqueId === uniqueId) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a texture using its name\n     * @param name defines the texture's name\n     * @return the texture or null if none found.\n     */\n    public getTextureByName(name: string): Nullable<BaseTexture> {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].name === name) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its Id\n     * @param id defines the Id to look for\n     * @returns the camera or null if not found\n     */\n    public getCameraById(id: string): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its unique Id\n     * @param uniqueId defines the unique Id to look for\n     * @returns the camera or null if not found\n     */\n    public getCameraByUniqueId(uniqueId: number): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].uniqueId === uniqueId) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its name\n     * @param name defines the camera's name\n     * @return the camera or null if none found.\n     */\n    public getCameraByName(name: string): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].name === name) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its Id\n     * @param id defines the bone's Id\n     * @return the bone or null if not found\n     */\n    public getBoneById(id: string): Nullable<Bone> {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].id === id) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its id\n     * @param name defines the bone's name\n     * @return the bone or null if not found\n     */\n    public getBoneByName(name: string): Nullable<Bone> {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].name === name) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its name\n     * @param name defines the the light's name\n     * @return the light or null if none found.\n     */\n    public getLightByName(name: string): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].name === name) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its Id\n     * @param id defines the light's Id\n     * @return the light or null if none found.\n     */\n    public getLightById(id: string): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its scene-generated unique Id\n     * @param uniqueId defines the light's unique Id\n     * @return the light or null if none found.\n     */\n    public getLightByUniqueId(uniqueId: number): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].uniqueId === uniqueId) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a particle system by Id\n     * @param id defines the particle system Id\n     * @return the corresponding system or null if none found\n     */\n    public getParticleSystemById(id: string): Nullable<IParticleSystem> {\n        for (let index = 0; index < this.particleSystems.length; index++) {\n            if (this.particleSystems[index].id === id) {\n                return this.particleSystems[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a geometry using its Id\n     * @param id defines the geometry's Id\n     * @return the geometry or null if none found.\n     */\n    public getGeometryById(id: string): Nullable<Geometry> {\n        for (let index = 0; index < this.geometries.length; index++) {\n            if (this.geometries[index].id === id) {\n                return this.geometries[index];\n            }\n        }\n        return null;\n    }\n    private _getGeometryByUniqueId(uniqueId: number): Nullable<Geometry> {\n        if (this._geometriesByUniqueId) {\n            const index = this._geometriesByUniqueId[uniqueId];\n            if (index !== undefined) {\n                return this.geometries[index];\n            }\n        }\n        else {\n            for (let index = 0; index < this.geometries.length; index++) {\n                if (this.geometries[index].uniqueId === uniqueId) {\n                    return this.geometries[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Add a new geometry to this scene\n     * @param geometry defines the geometry to be added to the scene.\n     * @param force defines if the geometry must be pushed even if a geometry with this id already exists\n     * @return a boolean defining if the geometry was added or not\n     */\n    public pushGeometry(geometry: Geometry, force?: boolean): boolean {\n        if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\n            return false;\n        }\n        this.addGeometry(geometry);\n        this.onNewGeometryAddedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Removes an existing geometry\n     * @param geometry defines the geometry to be removed from the scene\n     * @return a boolean defining if the geometry was removed or not\n     */\n    public removeGeometry(geometry: Geometry): boolean {\n        let index;\n        if (this._geometriesByUniqueId) {\n            index = this._geometriesByUniqueId[geometry.uniqueId];\n            if (index === undefined) {\n                return false;\n            }\n        }\n        else {\n            index = this.geometries.indexOf(geometry);\n            if (index < 0) {\n                return false;\n            }\n        }\n        if (index !== this.geometries.length - 1) {\n            const lastGeometry = this.geometries[this.geometries.length - 1];\n            if (lastGeometry) {\n                this.geometries[index] = lastGeometry;\n                if (this._geometriesByUniqueId) {\n                    this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\n                    this._geometriesByUniqueId[geometry.uniqueId] = undefined;\n                }\n            }\n        }\n        this.geometries.pop();\n        this.onGeometryRemovedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Gets the list of geometries attached to the scene\n     * @returns an array of Geometry\n     */\n    public getGeometries(): Geometry[] {\n        return this.geometries;\n    }\n    /**\n     * Gets the first added mesh found of a given Id\n     * @param id defines the Id to search for\n     * @return the mesh found or null if not found at all\n     */\n    public getMeshById(id: string): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of meshes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of meshes\n     */\n    public getMeshesById(id: string): Array<AbstractMesh> {\n        return this.meshes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets the first added transform node found of a given Id\n     * @param id defines the Id to search for\n     * @return the found transform node or null if not found at all.\n     */\n    public getTransformNodeById(id: string): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @return the found transform node or null if not found at all.\n     */\n    public getTransformNodeByUniqueId(uniqueId: number): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].uniqueId === uniqueId) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of transform nodes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of transform nodes\n     */\n    public getTransformNodesById(id: string): Array<TransformNode> {\n        return this.transformNodes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets a mesh with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @return the found mesh or null if not found at all.\n     */\n    public getMeshByUniqueId(uniqueId: number): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].uniqueId === uniqueId) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added mesh using a given Id\n     * @param id defines the Id to search for\n     * @return the found mesh or null if not found at all.\n     */\n    public getLastMeshById(id: string): Nullable<AbstractMesh> {\n        for (let index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @return the found node or null if not found at all\n     */\n    public getLastEntryById(id: string): Nullable<Node> {\n        let index: number;\n        for (index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        for (index = this.transformNodes.length - 1; index >= 0; index--) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        for (index = this.cameras.length - 1; index >= 0; index--) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        for (index = this.lights.length - 1; index >= 0; index--) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @return the found node or null if not found at all\n     */\n    public getNodeById(id: string): Nullable<Node> {\n        const mesh = this.getMeshById(id);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeById(id);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightById(id);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraById(id);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneById(id);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given name\n     * @param name defines the name to search for\n     * @return the found node or null if not found at all.\n     */\n    public getNodeByName(name: string): Nullable<Node> {\n        const mesh = this.getMeshByName(name);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeByName(name);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightByName(name);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneByName(name);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a mesh using a given name\n     * @param name defines the name to search for\n     * @return the found mesh or null if not found at all.\n     */\n    public getMeshByName(name: string): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].name === name) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node using a given name\n     * @param name defines the name to search for\n     * @return the found transform node or null if not found at all.\n     */\n    public getTransformNodeByName(name: string): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].name === name) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n     * @param id defines the Id to search for\n     * @return the found skeleton or null if not found at all.\n     */\n    public getLastSkeletonById(id: string): Nullable<Skeleton> {\n        for (let index = this.skeletons.length - 1; index >= 0; index--) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given auto generated unique id\n     * @param  uniqueId defines the unique id to search for\n     * @return the found skeleton or null if not found at all.\n     */\n    public getSkeletonByUniqueId(uniqueId: number): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].uniqueId === uniqueId) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @return the found skeleton or null if not found at all.\n     */\n    public getSkeletonById(id: string): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given name\n     * @param name defines the name to search for\n     * @return the found skeleton or null if not found at all.\n     */\n    public getSkeletonByName(name: string): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].name === name) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\n     * @param id defines the id to search for\n     * @return the found morph target manager or null if not found at all.\n     */\n    public getMorphTargetManagerById(id: number): Nullable<MorphTargetManager> {\n        for (let index = 0; index < this.morphTargetManagers.length; index++) {\n            if (this.morphTargetManagers[index].uniqueId === id) {\n                return this.morphTargetManagers[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @return the found morph target or null if not found at all.\n     */\n    public getMorphTargetById(id: string): Nullable<MorphTarget> {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.id === id) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @return the found morph target or null if not found at all.\n     */\n    public getMorphTargetByName(name: string): Nullable<MorphTarget> {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.name === name) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a post process using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @return the found post process or null if not found at all.\n     */\n    public getPostProcessByName(name: string): Nullable<PostProcess> {\n        for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\n            const postProcess = this.postProcesses[postProcessIndex];\n            if (postProcess.name === name) {\n                return postProcess;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a boolean indicating if the given mesh is active\n     * @param mesh defines the mesh to look for\n     * @returns true if the mesh is in the active list\n     */\n    public isActiveMesh(mesh: AbstractMesh): boolean {\n        return this._activeMeshes.indexOf(mesh) !== -1;\n    }\n    /**\n     * Return a unique id as a string which can serve as an identifier for the scene\n     */\n    public get uid(): string {\n        if (!this._uid) {\n            this._uid = Tools.RandomId();\n        }\n        return this._uid;\n    }\n    /**\n     * Add an externally attached data from its key.\n     * This method call will fail and return false, if such key already exists.\n     * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n     * @param key the unique key that identifies the data\n     * @param data the data object to associate to the key for this Engine instance\n     * @return true if no such key were already present and the data was added successfully, false otherwise\n     */\n    public addExternalData<T>(key: string, data: T): boolean {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary<Object>();\n        }\n        return this._externalData.add(key, data);\n    }\n    /**\n     * Get an externally attached data from its key\n     * @param key the unique key that identifies the data\n     * @return the associated data, if present (can be null), or undefined if not present\n     */\n    public getExternalData<T>(key: string): Nullable<T> {\n        if (!this._externalData) {\n            return null;\n        }\n        return <T>this._externalData.get(key);\n    }\n    /**\n     * Get an externally attached data from its key, create it using a factory if it's not already present\n     * @param key the unique key that identifies the data\n     * @param factory the factory that will be called to create the instance if and only if it doesn't exists\n     * @return the associated data, can be null if the factory returned null.\n     */\n    public getOrAddExternalDataWithFactory<T>(key: string, factory: (k: string) => T): T {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary<Object>();\n        }\n        return <T>this._externalData.getOrAddWithFactory(key, factory);\n    }\n    /**\n     * Remove an externally attached data from the Engine instance\n     * @param key the unique key that identifies the data\n     * @return true if the data was successfully removed, false if it doesn't exist\n     */\n    public removeExternalData(key: string): boolean {\n        return this._externalData.remove(key);\n    }\n    private _evaluateSubMesh(subMesh: SubMesh, mesh: AbstractMesh, initialMesh: AbstractMesh): void {\n        if (initialMesh.hasInstances ||\n            initialMesh.isAnInstance ||\n            this.dispatchAllSubMeshesOfActiveMeshes ||\n            this._skipFrustumClipping ||\n            mesh.alwaysSelectAsActiveMesh ||\n            mesh.subMeshes.length === 1 ||\n            subMesh.isInFrustum(this._frustumPlanes)) {\n            for (const step of this._evaluateSubMeshStage) {\n                step.action(mesh, subMesh);\n            }\n            const material = subMesh.getMaterial();\n            if (material !== null && material !== undefined) {\n                // Render targets\n                if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                    if (this._processedMaterials.indexOf(material) === -1) {\n                        this._processedMaterials.push(material);\n                        this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\n                    }\n                }\n                // Dispatch\n                this._renderingManager.dispatch(subMesh, mesh, material);\n            }\n        }\n    }\n    /**\n     * Clear the processed materials smart array preventing retention point in material dispose.\n     */\n    public freeProcessedMaterials(): void {\n        this._processedMaterials.dispose();\n    }\n    private _preventFreeActiveMeshesAndRenderingGroups = false;\n    /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\n     * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\n     * when disposing several meshes in a row or a hierarchy of meshes.\n     * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\n     */\n    public get blockfreeActiveMeshesAndRenderingGroups(): boolean {\n        return this._preventFreeActiveMeshesAndRenderingGroups;\n    }\n    public set blockfreeActiveMeshesAndRenderingGroups(value: boolean) {\n        if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\n            return;\n        }\n        if (value) {\n            this.freeActiveMeshes();\n            this.freeRenderingGroups();\n        }\n        this._preventFreeActiveMeshesAndRenderingGroups = value;\n    }\n    /**\n     * Clear the active meshes smart array preventing retention point in mesh dispose.\n     */\n    public freeActiveMeshes(): void {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        this._activeMeshes.dispose();\n        if (this.activeCamera && this.activeCamera._activeMeshes) {\n            this.activeCamera._activeMeshes.dispose();\n        }\n        if (this.activeCameras) {\n            for (let i = 0; i < this.activeCameras.length; i++) {\n                const activeCamera = this.activeCameras[i];\n                if (activeCamera && activeCamera._activeMeshes) {\n                    activeCamera._activeMeshes.dispose();\n                }\n            }\n        }\n    }\n    /**\n     * Clear the info related to rendering groups preventing retention points during dispose.\n     */\n    public freeRenderingGroups(): void {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        if (this._renderingManager) {\n            this._renderingManager.freeRenderingGroups();\n        }\n        if (this.textures) {\n            for (let i = 0; i < this.textures.length; i++) {\n                const texture = this.textures[i];\n                if (texture && (<RenderTargetTexture>texture).renderList) {\n                    (<RenderTargetTexture>texture).freeRenderingGroups();\n                }\n            }\n        }\n    }\n    /** @hidden */\n    public _isInIntermediateRendering(): boolean {\n        return this._intermediateRendering;\n    }\n    /**\n     * Lambda returning the list of potentially active meshes.\n     */\n    public getActiveMeshCandidates: () => ISmartArrayLike<AbstractMesh>;\n    /**\n     * Lambda returning the list of potentially active sub meshes.\n     */\n    public getActiveSubMeshCandidates: (mesh: AbstractMesh) => ISmartArrayLike<SubMesh>;\n    /**\n     * Lambda returning the list of potentially intersecting sub meshes.\n     */\n    public getIntersectingSubMeshCandidates: (mesh: AbstractMesh, localRay: Ray) => ISmartArrayLike<SubMesh>;\n    /**\n     * Lambda returning the list of potentially colliding sub meshes.\n     */\n    public getCollidingSubMeshCandidates: (mesh: AbstractMesh, collider: Collider) => ISmartArrayLike<SubMesh>;\n    /** @hidden */\n    public _activeMeshesFrozen = false;\n    public _activeMeshesFrozenButKeepClipping = false;\n    private _skipEvaluateActiveMeshesCompletely = false;\n    /**\n     * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\n     * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\n     * @param onSuccess optional success callback\n     * @param onError optional error callback\n     * @param freezeMeshes defines if meshes should be frozen (true by default)\n     * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\n     * @returns the current scene\n     */\n    public freezeActiveMeshes(skipEvaluateActiveMeshes = false, onSuccess?: () => void, onError?: (message: string) => void, freezeMeshes = true, keepFrustumCulling = false): Scene {\n        this.executeWhenReady(() => {\n            if (!this.activeCamera) {\n                onError && onError(\"No active camera found\");\n                return;\n            }\n            if (!this._frustumPlanes) {\n                this.updateTransformMatrix();\n            }\n            this._evaluateActiveMeshes();\n            this._activeMeshesFrozen = true;\n            this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\n            this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\n            if (freezeMeshes) {\n                for (let index = 0; index < this._activeMeshes.length; index++) {\n                    this._activeMeshes.data[index]._freeze();\n                }\n            }\n            onSuccess && onSuccess();\n        });\n        return this;\n    }\n    /**\n     * Use this function to restart evaluating active meshes on every frame\n     * @returns the current scene\n     */\n    public unfreezeActiveMeshes(): Scene {\n        for (let index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (mesh._internalAbstractMeshDataInfo) {\n                mesh._internalAbstractMeshDataInfo._isActive = false;\n            }\n        }\n        for (let index = 0; index < this._activeMeshes.length; index++) {\n            this._activeMeshes.data[index]._unFreeze();\n        }\n        this._activeMeshesFrozen = false;\n        return this;\n    }\n    private _executeActiveContainerCleanup(container: SmartArray<any>) {\n        const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\n        if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\n            return; // Do not execute in frozen mode\n        }\n        // We need to ensure we are not in the rendering loop\n        this.onBeforeRenderObservable.addOnce(() => container.dispose());\n    }\n    private _evaluateActiveMeshes(): void {\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\n            if (this._activeMeshes.length > 0) {\n                this.activeCamera?._activeMeshes.reset();\n                this._activeMeshes.reset();\n                this._renderingManager.reset();\n                this._processedMaterials.reset();\n                this._activeParticleSystems.reset();\n                this._activeSkeletons.reset();\n                this._softwareSkinnedMeshes.reset();\n            }\n            return;\n        }\n        if (this._activeMeshesFrozen && this._activeMeshes.length) {\n            if (!this._skipEvaluateActiveMeshesCompletely) {\n                const len = this._activeMeshes.length;\n                for (let i = 0; i < len; i++) {\n                    const mesh = this._activeMeshes.data[i];\n                    mesh.computeWorldMatrix();\n                }\n            }\n            if (this._activeParticleSystems) {\n                const psLength = this._activeParticleSystems.length;\n                for (let i = 0; i < psLength; i++) {\n                    this._activeParticleSystems.data[i].animate();\n                }\n            }\n            return;\n        }\n        if (!this.activeCamera) {\n            return;\n        }\n        this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\n        this.activeCamera._activeMeshes.reset();\n        this._activeMeshes.reset();\n        this._renderingManager.reset();\n        this._processedMaterials.reset();\n        this._activeParticleSystems.reset();\n        this._activeSkeletons.reset();\n        this._softwareSkinnedMeshes.reset();\n        this._materialsRenderTargets.reset();\n        for (const step of this._beforeEvaluateActiveMeshStage) {\n            step.action();\n        }\n        // Determine mesh candidates\n        const meshes = this.getActiveMeshCandidates();\n        // Check each mesh\n        const len = meshes.length;\n        for (let i = 0; i < len; i++) {\n            const mesh = meshes.data[i];\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = false;\n            if (mesh.isBlocked) {\n                continue;\n            }\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\n                continue;\n            }\n            mesh.computeWorldMatrix();\n            // Intersections\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\n                this._meshesForIntersections.pushNoDuplicate(mesh);\n            }\n            // Switch to current LOD\n            let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\n            mesh._internalAbstractMeshDataInfo._currentLOD = meshToRender;\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n            if (meshToRender === undefined || meshToRender === null) {\n                continue;\n            }\n            // Compute world matrix if LOD is billboard\n            if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\n                meshToRender.computeWorldMatrix();\n            }\n            mesh._preActivate();\n            if (mesh.isVisible &&\n                mesh.visibility > 0 &&\n                (mesh.layerMask & this.activeCamera.layerMask) !== 0 &&\n                (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))) {\n                this._activeMeshes.push(mesh);\n                this.activeCamera._activeMeshes.push(mesh);\n                if (meshToRender !== mesh) {\n                    meshToRender._activate(this._renderId, false);\n                }\n                for (const step of this._preActiveMeshStage) {\n                    step.action(mesh);\n                }\n                if (mesh._activate(this._renderId, false)) {\n                    if (!mesh.isAnInstance) {\n                        meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\n                    }\n                    else {\n                        if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n                            meshToRender = mesh;\n                        }\n                    }\n                    meshToRender._internalAbstractMeshDataInfo._isActive = true;\n                    this._activeMesh(mesh, meshToRender);\n                }\n                mesh._postActivate();\n            }\n        }\n        this.onAfterActiveMeshesEvaluationObservable.notifyObservers(this);\n        // Particle systems\n        if (this.particlesEnabled) {\n            this.onBeforeParticlesRenderingObservable.notifyObservers(this);\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\n                const particleSystem = this.particleSystems[particleIndex];\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\n                    continue;\n                }\n                const emitter = <any>particleSystem.emitter;\n                if (!emitter.position || emitter.isEnabled()) {\n                    this._activeParticleSystems.push(particleSystem);\n                    particleSystem.animate();\n                    this._renderingManager.dispatchParticles(particleSystem);\n                }\n            }\n            this.onAfterParticlesRenderingObservable.notifyObservers(this);\n        }\n    }\n    private _activeMesh(sourceMesh: AbstractMesh, mesh: AbstractMesh): void {\n        if (this._skeletonsEnabled && mesh.skeleton !== null && mesh.skeleton !== undefined) {\n            if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\n                mesh.skeleton.prepare();\n                this._activeBones.addCount(mesh.skeleton.bones.length, false);\n            }\n            if (!mesh.computeBonesUsingShaders) {\n                this._softwareSkinnedMeshes.pushNoDuplicate(<Mesh>mesh);\n            }\n        }\n        if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\n            const subMeshes = this.getActiveSubMeshCandidates(mesh);\n            const len = subMeshes.length;\n            for (let i = 0; i < len; i++) {\n                const subMesh = subMeshes.data[i];\n                this._evaluateSubMesh(subMesh, mesh, sourceMesh);\n            }\n        }\n    }\n    /**\n     * Update the transform matrix to update from the current active camera\n     * @param force defines a boolean used to force the update even if cache is up to date\n     */\n    public updateTransformMatrix(force?: boolean): void {\n        if (!this.activeCamera) {\n            return;\n        }\n        if (this.activeCamera._renderingMultiview) {\n            const leftCamera = this.activeCamera._rigCameras[0];\n            const rightCamera = this.activeCamera._rigCameras[1];\n            this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\n        }\n        else {\n            this.setTransformMatrix(this.activeCamera.getViewMatrix(), this.activeCamera.getProjectionMatrix(force));\n        }\n    }\n    private _bindFrameBuffer(camera: Nullable<Camera>, clear = true) {\n        if (camera && camera._multiviewTexture) {\n            camera._multiviewTexture._bindFrameBuffer();\n        }\n        else if (camera && camera.outputRenderTarget) {\n            camera.outputRenderTarget._bindFrameBuffer();\n        }\n        else {\n            if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\n                this._engine.restoreDefaultFramebuffer();\n            }\n        }\n        if (clear) {\n            this._clearFrameBuffer(camera);\n        }\n    }\n    private _clearFrameBuffer(camera: Nullable<Camera>) {\n        // we assume the framebuffer currently bound is the right one\n        if (camera && camera._multiviewTexture) {\n            // no clearing?\n        }\n        else if (camera && camera.outputRenderTarget) {\n            const rtt = camera.outputRenderTarget;\n            if (rtt.onClearObservable.hasObservers()) {\n                rtt.onClearObservable.notifyObservers(this._engine);\n            }\n            else if (!rtt.skipInitialClear) {\n                this._engine.clear(rtt.clearColor || this.clearColor, !rtt._cleared, true, true);\n                rtt._cleared = true;\n            }\n        }\n        else {\n            if (!this._defaultFrameBufferCleared) {\n                this._defaultFrameBufferCleared = true;\n                this._clear();\n            }\n            else {\n                this._engine.clear(null, false, true, true);\n            }\n        }\n    }\n    /** @hidden */\n    public _allowPostProcessClearColor = true;\n    /**\n     * @param camera\n     * @param rigParent\n     * @param bindFrameBuffer\n     * @hidden\n     */\n    public _renderForCamera(camera: Camera, rigParent?: Camera, bindFrameBuffer = true): void {\n        if (camera && camera._skipRendering) {\n            return;\n        }\n        const engine = this._engine;\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n        }\n        // Viewport\n        engine.setViewport(this.activeCamera.viewport);\n        // Camera\n        this.resetCachedMaterial();\n        this._renderId++;\n        if (!this.prePass && bindFrameBuffer) {\n            let skipInitialClear = true;\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                skipInitialClear = camera.outputRenderTarget.skipInitialClear;\n                if (this.autoClear) {\n                    camera.outputRenderTarget.skipInitialClear = false;\n                }\n            }\n            this._bindFrameBuffer(this._activeCamera);\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                camera.outputRenderTarget.skipInitialClear = skipInitialClear;\n            }\n        }\n        this.updateTransformMatrix();\n        this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\n        // Meshes\n        this._evaluateActiveMeshes();\n        // Software skinning\n        for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\n            const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\n            mesh.applySkeleton(<Skeleton>mesh.skeleton);\n        }\n        // Render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\n        if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\n        }\n        if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\n        }\n        if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\n            this._renderTargets.pushNoDuplicate(this.environmentTexture as RenderTargetTexture);\n        }\n        // Collects render targets from external components.\n        for (const step of this._gatherActiveCameraRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        let needRebind = false;\n        if (this.renderTargetsEnabled) {\n            this._intermediateRendering = true;\n            if (this._renderTargets.length > 0) {\n                Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\n                    const renderTarget = this._renderTargets.data[renderIndex];\n                    if (renderTarget._shouldRender()) {\n                        this._renderId++;\n                        const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\n                        renderTarget.render(<boolean>hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\n                        needRebind = true;\n                    }\n                }\n                Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                this._renderId++;\n            }\n            for (const step of this._cameraDrawRenderTargetStage) {\n                needRebind = step.action(this.activeCamera) || needRebind;\n            }\n            this._intermediateRendering = false;\n        }\n        this._engine.currentRenderPassId = camera.outputRenderTarget?.renderPassId ?? camera.renderPassId ?? Constants.RENDERPASS_MAIN;\n        // Restore framebuffer after rendering to targets\n        if (needRebind && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        // Prepare Frame\n        if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\n            this.postProcessManager._prepareFrame();\n        }\n        // Before Camera Draw\n        for (const step of this._beforeCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Render\n        this.onBeforeDrawPhaseObservable.notifyObservers(this);\n        if (engine.snapshotRendering && engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\n            this.finalizeSceneUbo();\n        }\n        this._renderingManager.render(null, null, true, true);\n        this.onAfterDrawPhaseObservable.notifyObservers(this);\n        // After Camera Draw\n        for (const step of this._afterCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Finalize frame\n        if (this.postProcessManager && !camera._multiviewTexture) {\n            // if the camera has an output render target, render the post process to the render target\n            const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget! : undefined;\n            this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\n        }\n        // Reset some special arrays\n        this._renderTargets.reset();\n        this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\n    }\n    private _processSubCameras(camera: Camera, bindFrameBuffer = true): void {\n        if (camera.cameraRigMode === Constants.RIG_MODE_NONE || camera._renderingMultiview) {\n            if (camera._renderingMultiview && !this._multiviewSceneUbo) {\n                this._createMultiviewUbo();\n            }\n            this._renderForCamera(camera, undefined, bindFrameBuffer);\n            this.onAfterRenderCameraObservable.notifyObservers(camera);\n            return;\n        }\n        if (camera._useMultiviewToSingleView) {\n            this._renderMultiviewToSingleView(camera);\n        }\n        else {\n            // rig cameras\n            this.onBeforeCameraRenderObservable.notifyObservers(camera);\n            for (let index = 0; index < camera._rigCameras.length; index++) {\n                this._renderForCamera(camera._rigCameras[index], camera);\n            }\n        }\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        this.updateTransformMatrix();\n        this.onAfterRenderCameraObservable.notifyObservers(camera);\n    }\n    private _checkIntersections(): void {\n        for (let index = 0; index < this._meshesForIntersections.length; index++) {\n            const sourceMesh = this._meshesForIntersections.data[index];\n            if (!sourceMesh.actionManager) {\n                continue;\n            }\n            for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\n                const action: IAction = sourceMesh.actionManager.actions[actionIndex];\n                if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger || action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                    const parameters = action.getTriggerParameter();\n                    const otherMesh = parameters.mesh ? parameters.mesh : parameters;\n                    const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\n                    const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\n                    if (areIntersecting && currentIntersectionInProgress === -1) {\n                        if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                        else if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                    }\n                    else if (!areIntersecting && currentIntersectionInProgress > -1) {\n                        //They intersected, and now they don't.\n                        //is this trigger an exit trigger? execute an event.\n                        if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                        }\n                        //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\n                        if (!sourceMesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnIntersectionExitTrigger, (parameter) => {\n                            const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\n                            return otherMesh === parameterMesh;\n                        }) ||\n                            action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @param step\n     * @hidden\n     */\n    public _advancePhysicsEngineStep(step: number) {\n        // Do nothing. Code will be replaced if physics engine component is referenced\n    }\n    /**\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\n     */\n    public getDeterministicFrameTime: () => number = () => {\n        return this._engine.getTimeStep();\n    };\n    /** @hidden */\n    public _animate(): void {\n        // Nothing to do as long as Animatable have not been imported.\n    }\n    /** Execute all animations (for a frame) */\n    public animate() {\n        if (this._engine.isDeterministicLockStep()) {\n            let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\n            const defaultFrameTime = this._engine.getTimeStep();\n            const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\n            let stepsTaken = 0;\n            const maxSubSteps = this._engine.getLockstepMaxSteps();\n            let internalSteps = Math.floor(deltaTime / defaultFrameTime);\n            internalSteps = Math.min(internalSteps, maxSubSteps);\n            while (deltaTime > 0 && stepsTaken < internalSteps) {\n                this.onBeforeStepObservable.notifyObservers(this);\n                // Animations\n                this._animationRatio = defaultFrameTime * defaultFPS;\n                this._animate();\n                this.onAfterAnimationsObservable.notifyObservers(this);\n                // Physics\n                if (this.physicsEnabled) {\n                    this._advancePhysicsEngineStep(defaultFrameTime);\n                }\n                this.onAfterStepObservable.notifyObservers(this);\n                this._currentStepId++;\n                stepsTaken++;\n                deltaTime -= defaultFrameTime;\n            }\n            this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\n        }\n        else {\n            // Animations\n            const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\n            this._animationRatio = deltaTime * (60.0 / 1000.0);\n            this._animate();\n            this.onAfterAnimationsObservable.notifyObservers(this);\n            // Physics\n            if (this.physicsEnabled) {\n                this._advancePhysicsEngineStep(deltaTime);\n            }\n        }\n    }\n    private _clear(): void {\n        if (this.autoClearDepthAndStencil || this.autoClear) {\n            this._engine.clear(this.clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\n        }\n    }\n    private _checkCameraRenderTarget(camera: Nullable<Camera>) {\n        if (camera?.outputRenderTarget && !camera?.isRigCamera) {\n            camera.outputRenderTarget._cleared = false;\n        }\n        if (camera?.rigCameras?.length) {\n            for (let i = 0; i < camera.rigCameras.length; ++i) {\n                const rtt = camera.rigCameras[i].outputRenderTarget;\n                if (rtt) {\n                    rtt._cleared = false;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the draw wrappers cache of all meshes\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n     */\n    public resetDrawCache(passId?: number): void {\n        if (!this.meshes) {\n            return;\n        }\n        for (const mesh of this.meshes) {\n            mesh.resetDrawCache(passId);\n        }\n    }\n    /**\n     * Render the scene\n     * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\n     * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\n     */\n    public render(updateCameras = true, ignoreAnimations = false): void {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\n            this._checkIsReady();\n        }\n        this._frameId++;\n        this._defaultFrameBufferCleared = false;\n        this._checkCameraRenderTarget(this.activeCamera);\n        if (this.activeCameras?.length) {\n            this.activeCameras.forEach(this._checkCameraRenderTarget);\n        }\n        // Register components that have been associated lately to the scene.\n        this._registerTransientComponents();\n        this._activeParticles.fetchNewFrame();\n        this._totalVertices.fetchNewFrame();\n        this._activeIndices.fetchNewFrame();\n        this._activeBones.fetchNewFrame();\n        this._meshesForIntersections.reset();\n        this.resetCachedMaterial();\n        this.onBeforeAnimationsObservable.notifyObservers(this);\n        // Actions\n        if (this.actionManager) {\n            this.actionManager.processTrigger(Constants.ACTION_OnEveryFrameTrigger);\n        }\n        // Animations\n        if (!ignoreAnimations) {\n            this.animate();\n        }\n        // Before camera update steps\n        for (const step of this._beforeCameraUpdateStage) {\n            step.action();\n        }\n        // Update Cameras\n        if (updateCameras) {\n            if (this.activeCameras && this.activeCameras.length > 0) {\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                    const camera = this.activeCameras[cameraIndex];\n                    camera.update();\n                    if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\n                        // rig cameras\n                        for (let index = 0; index < camera._rigCameras.length; index++) {\n                            camera._rigCameras[index].update();\n                        }\n                    }\n                }\n            }\n            else if (this.activeCamera) {\n                this.activeCamera.update();\n                if (this.activeCamera.cameraRigMode !== Constants.RIG_MODE_NONE) {\n                    // rig cameras\n                    for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\n                        this.activeCamera._rigCameras[index].update();\n                    }\n                }\n            }\n        }\n        // Before render\n        this.onBeforeRenderObservable.notifyObservers(this);\n        const engine = this.getEngine();\n        // Customs render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        const currentActiveCamera = this.activeCameras?.length ? this.activeCameras[0] : this.activeCamera;\n        if (this.renderTargetsEnabled) {\n            Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = true;\n            for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\n                const renderTarget = this.customRenderTargets[customIndex];\n                if (renderTarget._shouldRender()) {\n                    this._renderId++;\n                    this.activeCamera = renderTarget.activeCamera || this.activeCamera;\n                    if (!this.activeCamera) {\n                        throw new Error(\"Active camera not set\");\n                    }\n                    // Viewport\n                    engine.setViewport(this.activeCamera.viewport);\n                    // Camera\n                    this.updateTransformMatrix();\n                    renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\n                }\n            }\n            Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = false;\n            this._renderId++;\n        }\n        this._engine.currentRenderPassId = currentActiveCamera?.renderPassId ?? Constants.RENDERPASS_MAIN;\n        // Restore back buffer\n        this.activeCamera = currentActiveCamera;\n        if (this._activeCamera && this._activeCamera.cameraRigMode !== Constants.RIG_MODE_CUSTOM && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        for (const step of this._beforeClearStage) {\n            step.action();\n        }\n        // Clear\n        this._clearFrameBuffer(this.activeCamera);\n        // Collects render targets from external components.\n        for (const step of this._gatherRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        // Multi-cameras?\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\n            }\n        }\n        else {\n            if (!this.activeCamera) {\n                throw new Error(\"No camera defined\");\n            }\n            this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\n        }\n        // Intersection checks\n        this._checkIntersections();\n        // Executes the after render stage actions.\n        for (const step of this._afterRenderStage) {\n            step.action();\n        }\n        // After render\n        if (this.afterRender) {\n            this.afterRender();\n        }\n        this.onAfterRenderObservable.notifyObservers(this);\n        // Cleaning\n        if (this._toBeDisposed.length) {\n            for (let index = 0; index < this._toBeDisposed.length; index++) {\n                const data = this._toBeDisposed[index];\n                if (data) {\n                    data.dispose();\n                }\n            }\n            this._toBeDisposed = [];\n        }\n        if (this.dumpNextRenderTargets) {\n            this.dumpNextRenderTargets = false;\n        }\n        this._activeBones.addCount(0, true);\n        this._activeIndices.addCount(0, true);\n        this._activeParticles.addCount(0, true);\n        this._engine.restoreDefaultFramebuffer();\n    }\n    /**\n     * Freeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     */\n    public freezeMaterials(): void {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].freeze();\n        }\n    }\n    /**\n     * Unfreeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     */\n    public unfreezeMaterials(): void {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].unfreeze();\n        }\n    }\n    /**\n     * Releases all held resources\n     */\n    public dispose(): void {\n        if (this.isDisposed) {\n            return;\n        }\n        this.beforeRender = null;\n        this.afterRender = null;\n        this.metadata = null;\n        this.skeletons = [];\n        this.morphTargetManagers = [];\n        this._transientComponents = [];\n        this._isReadyForMeshStage.clear();\n        this._beforeEvaluateActiveMeshStage.clear();\n        this._evaluateSubMeshStage.clear();\n        this._preActiveMeshStage.clear();\n        this._cameraDrawRenderTargetStage.clear();\n        this._beforeCameraDrawStage.clear();\n        this._beforeRenderTargetDrawStage.clear();\n        this._beforeRenderingGroupDrawStage.clear();\n        this._beforeRenderingMeshStage.clear();\n        this._afterRenderingMeshStage.clear();\n        this._afterRenderingGroupDrawStage.clear();\n        this._afterCameraDrawStage.clear();\n        this._afterRenderTargetDrawStage.clear();\n        this._afterRenderStage.clear();\n        this._beforeCameraUpdateStage.clear();\n        this._beforeClearStage.clear();\n        this._gatherRenderTargetsStage.clear();\n        this._gatherActiveCameraRenderTargetsStage.clear();\n        this._pointerMoveStage.clear();\n        this._pointerDownStage.clear();\n        this._pointerUpStage.clear();\n        this.importedMeshesFiles = new Array<string>();\n        if (this.stopAllAnimations) {\n            this.stopAllAnimations();\n        }\n        this.resetCachedMaterial();\n        // Smart arrays\n        if (this.activeCamera) {\n            this.activeCamera._activeMeshes.dispose();\n            this.activeCamera = null;\n        }\n        this._activeMeshes.dispose();\n        this._renderingManager.dispose();\n        this._processedMaterials.dispose();\n        this._activeParticleSystems.dispose();\n        this._activeSkeletons.dispose();\n        this._softwareSkinnedMeshes.dispose();\n        this._renderTargets.dispose();\n        this._materialsRenderTargets.dispose();\n        this._registeredForLateAnimationBindings.dispose();\n        this._meshesForIntersections.dispose();\n        this._toBeDisposed = [];\n        // Abort active requests\n        const activeRequests = this._activeRequests.slice();\n        for (const request of activeRequests) {\n            request.abort();\n        }\n        this._activeRequests = [];\n        // Events\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onBeforeRenderTargetsRenderObservable.clear();\n        this.onAfterRenderTargetsRenderObservable.clear();\n        this.onAfterStepObservable.clear();\n        this.onBeforeStepObservable.clear();\n        this.onBeforeActiveMeshesEvaluationObservable.clear();\n        this.onAfterActiveMeshesEvaluationObservable.clear();\n        this.onBeforeParticlesRenderingObservable.clear();\n        this.onAfterParticlesRenderingObservable.clear();\n        this.onBeforeDrawPhaseObservable.clear();\n        this.onAfterDrawPhaseObservable.clear();\n        this.onBeforeAnimationsObservable.clear();\n        this.onAfterAnimationsObservable.clear();\n        this.onDataLoadedObservable.clear();\n        this.onBeforeRenderingGroupObservable.clear();\n        this.onAfterRenderingGroupObservable.clear();\n        this.onMeshImportedObservable.clear();\n        this.onBeforeCameraRenderObservable.clear();\n        this.onAfterCameraRenderObservable.clear();\n        this.onReadyObservable.clear();\n        this.onNewCameraAddedObservable.clear();\n        this.onCameraRemovedObservable.clear();\n        this.onNewLightAddedObservable.clear();\n        this.onLightRemovedObservable.clear();\n        this.onNewGeometryAddedObservable.clear();\n        this.onGeometryRemovedObservable.clear();\n        this.onNewTransformNodeAddedObservable.clear();\n        this.onTransformNodeRemovedObservable.clear();\n        this.onNewMeshAddedObservable.clear();\n        this.onMeshRemovedObservable.clear();\n        this.onNewSkeletonAddedObservable.clear();\n        this.onSkeletonRemovedObservable.clear();\n        this.onNewMaterialAddedObservable.clear();\n        this.onNewMultiMaterialAddedObservable.clear();\n        this.onMaterialRemovedObservable.clear();\n        this.onMultiMaterialRemovedObservable.clear();\n        this.onNewTextureAddedObservable.clear();\n        this.onTextureRemovedObservable.clear();\n        this.onPrePointerObservable.clear();\n        this.onPointerObservable.clear();\n        this.onPreKeyboardObservable.clear();\n        this.onKeyboardObservable.clear();\n        this.onActiveCameraChanged.clear();\n        this.onComputePressureChanged.clear();\n        this._computePressureObserver?.unobserve();\n        this._computePressureObserver = undefined;\n        this.detachControl();\n        // Detach cameras\n        const canvas = this._engine.getInputElement();\n        if (canvas) {\n            for (let index = 0; index < this.cameras.length; index++) {\n                this.cameras[index].detachControl();\n            }\n        }\n        // Release animation groups\n        this._disposeList(this.animationGroups);\n        // Release lights\n        this._disposeList(this.lights);\n        // Release meshes\n        this._disposeList(this.meshes, (item) => item.dispose(true));\n        this._disposeList(this.transformNodes, (item) => item.dispose(true));\n        // Release cameras\n        this._disposeList(this.cameras);\n        // Release materials\n        if (this._defaultMaterial) {\n            this._defaultMaterial.dispose();\n        }\n        this._disposeList(this.multiMaterials);\n        this._disposeList(this.materials);\n        // Release particles\n        this._disposeList(this.particleSystems);\n        // Release postProcesses\n        this._disposeList(this.postProcesses);\n        // Release textures\n        this._disposeList(this.textures);\n        // Release morph targets\n        this._disposeList(this.morphTargetManagers);\n        // Release UBO\n        this._sceneUbo.dispose();\n        if (this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n        }\n        // Post-processes\n        this.postProcessManager.dispose();\n        // Components\n        this._disposeList(this._components);\n        // Remove from engine\n        let index = this._engine.scenes.indexOf(this);\n        if (index > -1) {\n            this._engine.scenes.splice(index, 1);\n        }\n        if (EngineStore._LastCreatedScene === this) {\n            if (this._engine.scenes.length > 0) {\n                EngineStore._LastCreatedScene = this._engine.scenes[this._engine.scenes.length - 1];\n            }\n            else {\n                EngineStore._LastCreatedScene = null;\n            }\n        }\n        index = this._engine._virtualScenes.indexOf(this);\n        if (index > -1) {\n            this._engine._virtualScenes.splice(index, 1);\n        }\n        this._engine.wipeCaches(true);\n        this._isDisposed = true;\n    }\n    private _disposeList<T extends IDisposable>(items: T[], callback?: (item: T) => void): void {\n        const itemsCopy = SliceTools.Slice(items, 0);\n        callback = callback ?? ((item) => item.dispose());\n        for (const item of itemsCopy) {\n            callback(item);\n        }\n        items.length = 0;\n    }\n    /**\n     * Gets if the scene is already disposed\n     */\n    public get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n    /**\n     * Call this function to reduce memory footprint of the scene.\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n     */\n    public clearCachedVertexData(): void {\n        for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n            const mesh = this.meshes[meshIndex];\n            const geometry = (<Mesh>mesh).geometry;\n            if (geometry) {\n                geometry.clearCachedData();\n            }\n        }\n    }\n    /**\n     * This function will remove the local cached buffer data from texture.\n     * It will save memory but will prevent the texture from being rebuilt\n     */\n    public cleanCachedTextureBuffer(): void {\n        for (const baseTexture of this.textures) {\n            const buffer = (<Texture>baseTexture)._buffer;\n            if (buffer) {\n                (<Texture>baseTexture)._buffer = null;\n            }\n        }\n    }\n    /**\n     * Get the world extend vectors with an optional filter\n     *\n     * @param filterPredicate the predicate - which meshes should be included when calculating the world size\n     * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\n     */\n    public getWorldExtends(filterPredicate?: (mesh: AbstractMesh) => boolean): {\n        min: Vector3;\n        max: Vector3;\n    } {\n        const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        filterPredicate = filterPredicate || (() => true);\n        this.meshes.filter(filterPredicate).forEach((mesh) => {\n            mesh.computeWorldMatrix(true);\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\n                return;\n            }\n            const boundingInfo = mesh.getBoundingInfo();\n            const minBox = boundingInfo.boundingBox.minimumWorld;\n            const maxBox = boundingInfo.boundingBox.maximumWorld;\n            Vector3.CheckExtends(minBox, min, max);\n            Vector3.CheckExtends(maxBox, min, max);\n        });\n        return {\n            min: min,\n            max: max\n        };\n    }\n    // Picking\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @returns a Ray\n     */\n    public createPickingRay(x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n     * @returns the current scene\n     */\n    public createPickingRayToRef(x: number, y: number, world: Nullable<Matrix>, result: Ray, camera: Nullable<Camera>, cameraViewSpace = false, enableDistantPicking = false): Scene {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param camera defines the camera to use for the picking\n     * @returns a Ray\n     */\n    public createPickingRayInCameraSpace(x: number, y: number, camera?: Camera): Ray {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @returns the current scene\n     */\n    public createPickingRayInCameraSpaceToRef(x: number, y: number, result: Ray, camera?: Camera): Scene {\n        throw _WarnImport(\"Ray\");\n    }\n    /** Launch a ray to try to pick a mesh in the scene\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    public pick(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?: Nullable<Camera>, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\n        // Dummy info if picking as not been imported\n        const pi = new PickingInfo();\n        pi._pickingUnavailable = true;\n        return pi;\n    }\n    /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\n     */\n    public pickWithBoundingInfo(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\n        // Dummy info if picking as not been imported\n        const pi = new PickingInfo();\n        pi._pickingUnavailable = true;\n        return pi;\n    }\n    /** Use the given ray to pick a mesh in the scene\n     * @param ray The ray to use to pick meshes\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    public pickWithRay(ray: Ray, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param x X position on screen\n     * @param y Y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    public multiPick(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param ray Ray to use\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    public multiPickWithRay(ray: Ray, predicate: (mesh: AbstractMesh) => boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Force the value of meshUnderPointer\n     * @param mesh defines the mesh to use\n     * @param pointerId optional pointer id when using more than one pointer\n     * @param pickResult optional pickingInfo data used to find mesh\n     */\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId?: number, pickResult?: Nullable<PickingInfo>): void {\n        this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\n    }\n    /**\n     * Gets the mesh under the pointer\n     * @returns a Mesh or null if no mesh is under the pointer\n     */\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\n        return this._inputManager.getPointerOverMesh();\n    }\n    // Misc.\n    /** @hidden */\n    public _rebuildGeometries(): void {\n        for (const geometry of this.geometries) {\n            geometry._rebuild();\n        }\n        for (const mesh of this.meshes) {\n            mesh._rebuild();\n        }\n        if (this.postProcessManager) {\n            this.postProcessManager._rebuild();\n        }\n        for (const component of this._components) {\n            component.rebuild();\n        }\n        for (const system of this.particleSystems) {\n            system.rebuild();\n        }\n        if (this.spriteManagers) {\n            for (const spriteMgr of this.spriteManagers) {\n                spriteMgr.rebuild();\n            }\n        }\n    }\n    /** @hidden */\n    public _rebuildTextures(): void {\n        for (const texture of this.textures) {\n            texture._rebuild();\n        }\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    // Tags\n    private _getByTags(list: any[], tagsQuery: string, forEach?: (item: any) => void): any[] {\n        if (tagsQuery === undefined) {\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n            return list;\n        }\n        const listByTags = [];\n        forEach =\n            forEach ||\n                ((item: any) => {\n                    return;\n                });\n        for (const i in list) {\n            const item = list[i];\n            if (Tags && Tags.MatchesQuery(item, tagsQuery)) {\n                listByTags.push(item);\n                forEach(item);\n            }\n        }\n        return listByTags;\n    }\n    /**\n     * Get a list of meshes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Mesh\n     */\n    public getMeshesByTags(tagsQuery: string, forEach?: (mesh: AbstractMesh) => void): Mesh[] {\n        return this._getByTags(this.meshes, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of cameras by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Camera\n     */\n    public getCamerasByTags(tagsQuery: string, forEach?: (camera: Camera) => void): Camera[] {\n        return this._getByTags(this.cameras, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of lights by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Light\n     */\n    public getLightsByTags(tagsQuery: string, forEach?: (light: Light) => void): Light[] {\n        return this._getByTags(this.lights, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of materials by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Material\n     */\n    public getMaterialByTags(tagsQuery: string, forEach?: (material: Material) => void): Material[] {\n        return this._getByTags(this.materials, tagsQuery, forEach).concat(this._getByTags(this.multiMaterials, tagsQuery, forEach));\n    }\n    /**\n     * Get a list of transform nodes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of TransformNode\n     */\n    public getTransformNodesByTags(tagsQuery: string, forEach?: (transform: TransformNode) => void): TransformNode[] {\n        return this._getByTags(this.transformNodes, tagsQuery, forEach);\n    }\n    /**\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\n     * This allowed control for front to back rendering or reversly depending of the special needs.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n     */\n    public setRenderingOrder(renderingGroupId: number, opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null, alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null, transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null): void {\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n    }\n    /**\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n     */\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\n    }\n    /**\n     * Gets the current auto clear configuration for one rendering group of the rendering\n     * manager.\n     * @param index the rendering group index to get the information for\n     * @returns The auto clear setup for the requested rendering group\n     */\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\n    }\n    private _blockMaterialDirtyMechanism = false;\n    /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\n    public get blockMaterialDirtyMechanism(): boolean {\n        return this._blockMaterialDirtyMechanism;\n    }\n    public set blockMaterialDirtyMechanism(value: boolean) {\n        if (this._blockMaterialDirtyMechanism === value) {\n            return;\n        }\n        this._blockMaterialDirtyMechanism = value;\n        if (!value) {\n            // Do a complete update\n            this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\n        }\n    }\n    /**\n     * Will flag all materials as dirty to trigger new shader compilation\n     * @param flag defines the flag used to specify which material part must be marked as dirty\n     * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\n     */\n    public markAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\n        if (this._blockMaterialDirtyMechanism) {\n            return;\n        }\n        for (const material of this.materials) {\n            if (predicate && !predicate(material)) {\n                continue;\n            }\n            material.markAsDirty(flag);\n        }\n    }\n    /**\n     * @param fileOrUrl\n     * @param onSuccess\n     * @param onProgress\n     * @param useOfflineSupport\n     * @param useArrayBuffer\n     * @param onError\n     * @param onOpened\n     * @hidden\n     */\n    public _loadFile(fileOrUrl: File | string, onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onError?: (request?: WebRequest, exception?: LoadFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\n        const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @param fileOrUrl\n     * @param onProgress\n     * @param useOfflineSupport\n     * @param useArrayBuffer\n     * @param onOpened\n     * @hidden\n     */\n    public _loadFileAsync(fileOrUrl: File | string, onProgress?: (data: any) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onOpened?: (request: WebRequest) => void): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._loadFile(fileOrUrl, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (request, exception) => {\n                reject(exception);\n            }, onOpened);\n        });\n    }\n    /**\n     * @param url\n     * @param onSuccess\n     * @param onProgress\n     * @param useOfflineSupport\n     * @param useArrayBuffer\n     * @param onError\n     * @param onOpened\n     * @hidden\n     */\n    public _requestFile(url: string, onSuccess: (data: string | ArrayBuffer, request?: WebRequest) => void, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onError?: (error: RequestFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\n        const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @param url\n     * @param onProgress\n     * @param useOfflineSupport\n     * @param useArrayBuffer\n     * @param onOpened\n     * @hidden\n     */\n    public _requestFileAsync(url: string, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onOpened?: (request: WebRequest) => void): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._requestFile(url, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (error) => {\n                reject(error);\n            }, onOpened);\n        });\n    }\n    /**\n     * @param file\n     * @param onSuccess\n     * @param onProgress\n     * @param useArrayBuffer\n     * @param onError\n     * @hidden\n     */\n    public _readFile(file: File, onSuccess: (data: string | ArrayBuffer) => void, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean, onError?: (error: ReadFileError) => void): IFileRequest {\n        const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @param file\n     * @param onProgress\n     * @param useArrayBuffer\n     * @hidden\n     */\n    public _readFileAsync(file: File, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._readFile(file, (data) => {\n                resolve(data);\n            }, onProgress, useArrayBuffer, (error) => {\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Internal perfCollector instance used for sharing between inspector and playground.\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\n     */\n    protected _perfCollector: Nullable<PerformanceViewerCollector> = null;\n    /**\n     * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\n     * @returns the perf collector belonging to the scene.\n     */\n    public getPerfCollector(): PerformanceViewerCollector {\n        throw _WarnImport(\"performanceViewerSceneExtension\");\n    }\n    private _computePressureObserver: ComputePressureObserverWrapper | undefined;\n    /**\n     * An event triggered when the cpu usage/speed meets certain thresholds.\n     * Note: Compute pressure is an experimental API.\n     */\n    public onComputePressureChanged = new Observable<IComputePressureData>();\n}\n\n    declare module \"./scene\" {\n    interface Scene {\n        /**\n         * Sets the active camera of the scene using its Id\n         * @param id defines the camera's Id\n         * @return the new active camera or null if none found.\n         * @deprecated Please use setActiveCameraById instead\n         */\n        setActiveCameraByID(id: string): Nullable<Camera>;\n        /**\n         * Get a material using its id\n         * @param id defines the material's Id\n         * @return the material or null if none found.\n         * @deprecated Please use getMaterialById instead\n         */\n        getMaterialByID(id: string): Nullable<Material>;\n        /**\n         * Gets a the last added material using a given id\n         * @param id defines the material's Id\n         * @return the last material with the given id or null if none found.\n         * @deprecated Please use getLastMaterialById instead\n         */\n        getLastMaterialByID(id: string): Nullable<Material>;\n        /**\n         * Get a texture using its unique id\n         * @param uniqueId defines the texture's unique id\n         * @return the texture or null if none found.\n         * @deprecated Please use getTextureByUniqueId instead\n         */\n        getTextureByUniqueID(uniqueId: number): Nullable<BaseTexture>;\n        /**\n         * Gets a camera using its Id\n         * @param id defines the Id to look for\n         * @returns the camera or null if not found\n         * @deprecated Please use getCameraById instead\n         */\n        getCameraByID(id: string): Nullable<Camera>;\n        /**\n         * Gets a camera using its unique Id\n         * @param uniqueId defines the unique Id to look for\n         * @returns the camera or null if not found\n         * @deprecated Please use getCameraByUniqueId instead\n         */\n        getCameraByUniqueID(uniqueId: number): Nullable<Camera>;\n        /**\n         * Gets a bone using its Id\n         * @param id defines the bone's Id\n         * @return the bone or null if not found\n         * @deprecated Please use getBoneById instead\n         */\n        getBoneByID(id: string): Nullable<Bone>;\n        /**\n         * Gets a light node using its Id\n         * @param id defines the light's Id\n         * @return the light or null if none found.\n         * @deprecated Please use getLightById instead\n         */\n        getLightByID(id: string): Nullable<Light>;\n        /**\n         * Gets a light node using its scene-generated unique Id\n         * @param uniqueId defines the light's unique Id\n         * @return the light or null if none found.\n         * @deprecated Please use getLightByUniqueId instead\n         */\n        getLightByUniqueID(uniqueId: number): Nullable<Light>;\n        /**\n         * Gets a particle system by Id\n         * @param id defines the particle system Id\n         * @return the corresponding system or null if none found\n         * @deprecated Please use getParticleSystemById instead\n         */\n        getParticleSystemByID(id: string): Nullable<IParticleSystem>;\n        /**\n         * Gets a geometry using its Id\n         * @param id defines the geometry's Id\n         * @return the geometry or null if none found.\n         * @deprecated Please use getGeometryById instead\n         */\n        getGeometryByID(id: string): Nullable<Geometry>;\n        /**\n         * Gets the first added mesh found of a given Id\n         * @param id defines the Id to search for\n         * @return the mesh found or null if not found at all\n         * @deprecated Please use getMeshById instead\n         */\n        getMeshByID(id: string): Nullable<AbstractMesh>;\n        /**\n         * Gets a mesh with its auto-generated unique Id\n         * @param uniqueId defines the unique Id to search for\n         * @return the found mesh or null if not found at all.\n         * @deprecated Please use getMeshByUniqueId instead\n         */\n        getMeshByUniqueID(uniqueId: number): Nullable<AbstractMesh>;\n        /**\n         * Gets a the last added mesh using a given Id\n         * @param id defines the Id to search for\n         * @return the found mesh or null if not found at all.\n         * @deprecated Please use getLastMeshById instead\n         */\n        getLastMeshByID(id: string): Nullable<AbstractMesh>;\n        /**\n         * Gets a list of meshes using their Id\n         * @param id defines the Id to search for\n         * @returns a list of meshes\n         * @deprecated Please use getMeshesById instead\n         */\n        getMeshesByID(id: string): Array<AbstractMesh>;\n        /**\n         * Gets the first added transform node found of a given Id\n         * @param id defines the Id to search for\n         * @return the found transform node or null if not found at all.\n         * @deprecated Please use getTransformNodeById instead\n         */\n        getTransformNodeByID(id: string): Nullable<TransformNode>;\n        /**\n         * Gets a transform node with its auto-generated unique Id\n         * @param uniqueId defines the unique Id to search for\n         * @return the found transform node or null if not found at all.\n         * @deprecated Please use getTransformNodeByUniqueId instead\n         */\n        getTransformNodeByUniqueID(uniqueId: number): Nullable<TransformNode>;\n        /**\n         * Gets a list of transform nodes using their Id\n         * @param id defines the Id to search for\n         * @returns a list of transform nodes\n         * @deprecated Please use getTransformNodesById instead\n         */\n        getTransformNodesByID(id: string): Array<TransformNode>;\n        /**\n         * Gets a node (Mesh, Camera, Light) using a given Id\n         * @param id defines the Id to search for\n         * @return the found node or null if not found at all\n         * @deprecated Please use getNodeById instead\n         */\n        getNodeByID(id: string): Nullable<Node>;\n        /**\n         * Gets a the last added node (Mesh, Camera, Light) using a given Id\n         * @param id defines the Id to search for\n         * @return the found node or null if not found at all\n         * @deprecated Please use getLastEntryById instead\n         */\n        getLastEntryByID(id: string): Nullable<Node>;\n        /**\n         * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n         * @param id defines the Id to search for\n         * @return the found skeleton or null if not found at all.\n         * @deprecated Please use getLastSkeletonById instead\n         */\n        getLastSkeletonByID(id: string): Nullable<Skeleton>;\n    }\n}\n/**\n * @param id\n * @hidden\n */\nScene.prototype.setActiveCameraByID = function (id: string): Nullable<Camera> {\n    return this.setActiveCameraById(id);\n};\nScene.prototype.getLastMaterialByID = function (id: string): Nullable<Material> {\n    return this.getLastMaterialById(id);\n};\nScene.prototype.getMaterialByID = function (id: string): Nullable<Material> {\n    return this.getMaterialById(id);\n};\nScene.prototype.getTextureByUniqueID = function (uniqueId: number): Nullable<BaseTexture> {\n    return this.getTextureByUniqueId(uniqueId);\n};\nScene.prototype.getCameraByID = function (id: string): Nullable<Camera> {\n    return this.getCameraById(id);\n};\nScene.prototype.getCameraByUniqueID = function (uniqueId: number): Nullable<Camera> {\n    return this.getCameraByUniqueId(uniqueId);\n};\nScene.prototype.getBoneByID = function (id: string): Nullable<Bone> {\n    return this.getBoneById(id);\n};\nScene.prototype.getLightByID = function (id: string): Nullable<Light> {\n    return this.getLightById(id);\n};\nScene.prototype.getLightByUniqueID = function (uniqueId: number): Nullable<Light> {\n    return this.getLightByUniqueId(uniqueId);\n};\nScene.prototype.getParticleSystemByID = function (id: string): Nullable<IParticleSystem> {\n    return this.getParticleSystemById(id);\n};\nScene.prototype.getGeometryByID = function (id: string): Nullable<Geometry> {\n    return this.getGeometryById(id);\n};\nScene.prototype.getMeshByID = function (id: string): Nullable<AbstractMesh> {\n    return this.getMeshById(id);\n};\nScene.prototype.getMeshesByID = function (id: string): Array<AbstractMesh> {\n    return this.getMeshesById(id);\n};\nScene.prototype.getTransformNodeByID = function (id: string): Nullable<TransformNode> {\n    return this.getTransformNodeById(id);\n};\nScene.prototype.getTransformNodeByUniqueID = function (uniqueId: number): Nullable<TransformNode> {\n    return this.getTransformNodeByUniqueId(uniqueId);\n};\nScene.prototype.getTransformNodesByID = function (id: string): Array<TransformNode> {\n    return this.getTransformNodesById(id);\n};\nScene.prototype.getMeshByUniqueID = function (uniqueId: number): Nullable<AbstractMesh> {\n    return this.getMeshByUniqueId(uniqueId);\n};\nScene.prototype.getLastMeshByID = function (id: string): Nullable<AbstractMesh> {\n    return this.getLastMeshById(id);\n};\nScene.prototype.getLastEntryByID = function (id: string): Nullable<Node> {\n    return this.getLastEntryById(id);\n};\nScene.prototype.getNodeByID = function (id: string): Nullable<Node> {\n    return this.getNodeById(id);\n};\nScene.prototype.getLastSkeletonByID = function (id: string): Nullable<Skeleton> {\n    return this.getLastSkeletonById(id);\n};\n"]}