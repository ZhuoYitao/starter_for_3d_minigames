{"version":3,"file":"instancesBlock.js","sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Vertex/instancesBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { SubMesh } from \"../../../../Meshes/subMesh\";\r\n\r\n/**\r\n * Block used to add support for instances\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_instances\r\n */\r\nexport class InstancesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new InstancesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InstancesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first world row input component\r\n     */\r\n    public get world0(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second world row input component\r\n     */\r\n    public get world1(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the third world row input component\r\n     */\r\n    public get world2(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the forth world row input component\r\n     */\r\n    public get world3(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the instanceID component\r\n     */\r\n    public get instanceID(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.world0.connectedPoint) {\r\n            let world0Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world0\");\r\n\r\n            if (!world0Input) {\r\n                world0Input = new InputBlock(\"world0\");\r\n                world0Input.setAsAttribute(\"world0\");\r\n            }\r\n            world0Input.output.connectTo(this.world0);\r\n        }\r\n        if (!this.world1.connectedPoint) {\r\n            let world1Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world1\");\r\n\r\n            if (!world1Input) {\r\n                world1Input = new InputBlock(\"world1\");\r\n                world1Input.setAsAttribute(\"world1\");\r\n            }\r\n            world1Input.output.connectTo(this.world1);\r\n        }\r\n        if (!this.world2.connectedPoint) {\r\n            let world2Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world2\");\r\n\r\n            if (!world2Input) {\r\n                world2Input = new InputBlock(\"world2\");\r\n                world2Input.setAsAttribute(\"world2\");\r\n            }\r\n            world2Input.output.connectTo(this.world2);\r\n        }\r\n        if (!this.world3.connectedPoint) {\r\n            let world3Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world3\");\r\n\r\n            if (!world3Input) {\r\n                world3Input = new InputBlock(\"world3\");\r\n                world3Input.setAsAttribute(\"world3\");\r\n            }\r\n            world3Input.output.connectTo(this.world3);\r\n        }\r\n        if (!this.world.connectedPoint) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world\");\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n\r\n        this.world.define = \"!INSTANCES || THIN_INSTANCES\";\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false, subMesh?: SubMesh) {\r\n        let changed = false;\r\n        if (defines[\"INSTANCES\"] !== useInstances) {\r\n            defines.setValue(\"INSTANCES\", useInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (subMesh && defines[\"THIN_INSTANCES\"] !== !!subMesh?.getRenderingMesh().hasThinInstances) {\r\n            defines.setValue(\"THIN_INSTANCES\", !!subMesh?.getRenderingMesh().hasThinInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const engine = state.sharedData.scene.getEngine();\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Emit code\r\n        const output = this._outputs[0];\r\n        const instanceID = this._outputs[1];\r\n        const world0 = this.world0;\r\n        const world1 = this.world1;\r\n        const world2 = this.world2;\r\n        const world3 = this.world3;\r\n\r\n        state.compilationString += `#ifdef INSTANCES\\r\\n`;\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = mat4(${world0.associatedVariableName}, ${world1.associatedVariableName}, ${world2.associatedVariableName}, ${world3.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#ifdef THIN_INSTANCES\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = ${this.world.associatedVariableName} * ${output.associatedVariableName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        if (engine._caps.canUseGLInstanceID) {\r\n            state.compilationString += this._declareOutput(instanceID, state) + ` = float(gl_InstanceID);\\r\\n`;\r\n        } else {\r\n            state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\r\n        }\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.world.associatedVariableName};\\r\\n`;\r\n        state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InstancesBlock\", InstancesBlock);\r\n"]}