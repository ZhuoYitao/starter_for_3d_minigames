{"version":3,"file":"effectFallbacks.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/effectFallbacks.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\ndeclare type Effect = import(\"./effect\").Effect;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n"]}