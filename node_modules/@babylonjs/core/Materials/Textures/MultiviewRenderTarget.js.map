{"version":3,"file":"MultiviewRenderTarget.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/MultiviewRenderTarget.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AAEtE,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAEpD;;;GAGG;AACH;IAA2C,yCAAmB;IAM1D;;;;OAIG;IACH,+BAAY,KAAa,EAAE,IAA0E;QAA1E,qBAAA,EAAA,UAA0E;QAArG,YACI,kBAAM,eAAe,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,wBAAwB,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAO9I;QANG,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,QAAQ,EAAG,CAAC,SAAS,EAAE,CAAC,kCAAkC,CAAC,KAAI,CAAC,cAAc,EAAE,EAAE,KAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QACpI,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,OAAQ,CAAC;QAC5C,KAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;QACjC,KAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC,kBAAkB,CAAC;QACpD,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,UAAU,EAAG,CAAC,OAAO,EAAE,CAAC,UAAU,IAAI,KAAI,CAAC,OAAO,CAAC;QACvE,KAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAI,CAAC,QAAQ,CAAC;;IAC1C,CAAC;IAlBD,sBAAW,0CAAO;aAAlB,UAAmB,KAAa;YAC5B,wGAAwG;YACxG,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC1B,CAAC;;;OAAA;IAiBD;;OAEG;IACI,gDAAgB,GAAvB;QACI,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACrB,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,EAAG,CAAC,SAAS,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9E,CAAC;IAED;;;OAGG;IACI,4CAAY,GAAnB;QACI,OAAO,CAAC,CAAC;IACb,CAAC;IACL,4BAAC;AAAD,CAAC,AAtCD,CAA2C,mBAAmB,GAsC7D","sourcesContent":["import { RenderTargetTexture } from \"../Textures/renderTargetTexture\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\n/**\r\n * Renders to multiple views with a single draw call\r\n * @see https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/\r\n */\r\nexport class MultiviewRenderTarget extends RenderTargetTexture {\r\n    public set samples(value: number) {\r\n        // We override this setter because multisampling is handled by framebufferTextureMultisampleMultiviewOVR\r\n        this._samples = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a multiview render target\r\n     * @param scene scene used with the render target\r\n     * @param size the size of the render target (used for each view)\r\n     */\r\n    constructor(scene?: Scene, size: number | { width: number; height: number } | { ratio: number } = 512) {\r\n        super(\"multiview rtt\", size, scene, false, true, Constants.TEXTURETYPE_UNSIGNED_INT, false, undefined, false, false, true, undefined, true);\r\n        this._renderTarget = this.getScene()!.getEngine().createMultiviewRenderTargetTexture(this.getRenderWidth(), this.getRenderHeight());\r\n        this._texture = this._renderTarget.texture!;\r\n        this._texture.isMultiview = true;\r\n        this._texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n        this.samples = this._getEngine()!.getCaps().maxSamples || this.samples;\r\n        this._texture.samples = this._samples;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _bindFrameBuffer() {\r\n        if (!this._renderTarget) {\r\n            return;\r\n        }\r\n        this.getScene()!.getEngine().bindMultiviewFramebuffer(this._renderTarget);\r\n    }\r\n\r\n    /**\r\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n     * @returns the view count\r\n     */\r\n    public getViewCount() {\r\n        return 2;\r\n    }\r\n}\r\n"]}