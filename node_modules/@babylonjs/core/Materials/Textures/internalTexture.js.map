{"version":3,"file":"internalTexture.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/internalTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable, int } from \"../../types\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"../../Engines/ICanvas\";\r\nimport type { HardwareTextureWrapper } from \"./hardwareTextureWrapper\";\r\nimport { TextureSampler } from \"./textureSampler\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type BaseTexture = import(\"../../Materials/Textures/baseTexture\").BaseTexture;\r\ndeclare type SphericalPolynomial = import(\"../../Maths/sphericalPolynomial\").SphericalPolynomial;\r\n\r\n/**\r\n * Defines the source of the internal texture\r\n */\r\nexport enum InternalTextureSource {\r\n    /**\r\n     * The source of the texture data is unknown\r\n     */\r\n    Unknown,\r\n    /**\r\n     * Texture data comes from an URL\r\n     */\r\n    Url,\r\n    /**\r\n     * Texture data is only used for temporary storage\r\n     */\r\n    Temp,\r\n    /**\r\n     * Texture data comes from raw data (ArrayBuffer)\r\n     */\r\n    Raw,\r\n    /**\r\n     * Texture content is dynamic (video or dynamic texture)\r\n     */\r\n    Dynamic,\r\n    /**\r\n     * Texture content is generated by rendering to it\r\n     */\r\n    RenderTarget,\r\n    /**\r\n     * Texture content is part of a multi render target process\r\n     */\r\n    MultiRenderTarget,\r\n    /**\r\n     * Texture data comes from a cube data file\r\n     */\r\n    Cube,\r\n    /**\r\n     * Texture data comes from a raw cube data\r\n     */\r\n    CubeRaw,\r\n    /**\r\n     * Texture data come from a prefiltered cube data file\r\n     */\r\n    CubePrefiltered,\r\n    /**\r\n     * Texture content is raw 3D data\r\n     */\r\n    Raw3D,\r\n    /**\r\n     * Texture content is raw 2D array data\r\n     */\r\n    Raw2DArray,\r\n    /**\r\n     * Texture content is a depth/stencil texture\r\n     */\r\n    DepthStencil,\r\n    /**\r\n     * Texture data comes from a raw cube data encoded with RGBD\r\n     */\r\n    CubeRawRGBD,\r\n    /**\r\n     * Texture content is a depth texture\r\n     */\r\n    Depth,\r\n}\r\n\r\n/**\r\n * Class used to store data associated with WebGL texture data for the engine\r\n * This class should not be used directly\r\n */\r\nexport class InternalTexture extends TextureSampler {\r\n    /**\r\n     * Defines if the texture is ready\r\n     */\r\n    public isReady: boolean = false;\r\n    /**\r\n     * Defines if the texture is a cube texture\r\n     */\r\n    public isCube: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 3D data\r\n     */\r\n    public is3D: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 2D array data\r\n     */\r\n    public is2DArray: boolean = false;\r\n    /**\r\n     * Defines if the texture contains multiview data\r\n     */\r\n    public isMultiview: boolean = false;\r\n    /**\r\n     * Gets the URL used to load this texture\r\n     */\r\n    public url: string = \"\";\r\n    /** @hidden */\r\n    public _originalUrl: string; // not empty only if different from url\r\n    /**\r\n     * Gets a boolean indicating if the texture needs mipmaps generation\r\n     */\r\n    public generateMipMaps: boolean = false;\r\n    /**\r\n     * Gets a boolean indicating if the texture uses mipmaps\r\n     * TODO implements useMipMaps as a separate setting from generateMipMaps\r\n     */\r\n    public get useMipMaps() {\r\n        return this.generateMipMaps;\r\n    }\r\n    public set useMipMaps(value: boolean) {\r\n        this.generateMipMaps = value;\r\n    }\r\n    /**\r\n     * Gets the number of samples used by the texture (WebGL2+ only)\r\n     */\r\n    public samples: number = 0;\r\n    /**\r\n     * Gets the type of the texture (int, float...)\r\n     */\r\n    public type: number = -1;\r\n    /**\r\n     * Gets the format of the texture (RGB, RGBA...)\r\n     */\r\n    public format: number = -1;\r\n    /**\r\n     * Observable called when the texture is loaded\r\n     */\r\n    public onLoadedObservable = new Observable<InternalTexture>();\r\n    /**\r\n     * Observable called when the texture load is raising an error\r\n     */\r\n    public onErrorObservable = new Observable<Partial<{ message: string; exception: any }>>();\r\n    /**\r\n     * If this callback is defined it will be called instead of the default _rebuild function\r\n     */\r\n    public onRebuildCallback: Nullable<\r\n        (internalTexture: InternalTexture) => {\r\n            proxy: Nullable<InternalTexture | Promise<InternalTexture>>;\r\n            isReady: boolean;\r\n            isAsync: boolean;\r\n        }\r\n    > = null;\r\n    /**\r\n     * Gets the width of the texture\r\n     */\r\n    public width: number = 0;\r\n    /**\r\n     * Gets the height of the texture\r\n     */\r\n    public height: number = 0;\r\n    /**\r\n     * Gets the depth of the texture\r\n     */\r\n    public depth: number = 0;\r\n    /**\r\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseWidth: number = 0;\r\n    /**\r\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseHeight: number = 0;\r\n    /**\r\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseDepth: number = 0;\r\n    /**\r\n     * Gets a boolean indicating if the texture is inverted on Y axis\r\n     */\r\n    public invertY: boolean = false;\r\n\r\n    // Private\r\n    /** @hidden */\r\n    public _invertVScale = false;\r\n    /** @hidden */\r\n    public _associatedChannel = -1;\r\n    /** @hidden */\r\n    public _source = InternalTextureSource.Unknown;\r\n    /** @hidden */\r\n    public _buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null;\r\n    /** @hidden */\r\n    public _bufferView: Nullable<ArrayBufferView> = null;\r\n    /** @hidden */\r\n    public _bufferViewArray: Nullable<ArrayBufferView[]> = null;\r\n    /** @hidden */\r\n    public _bufferViewArrayArray: Nullable<ArrayBufferView[][]> = null;\r\n    /** @hidden */\r\n    public _size: number = 0;\r\n    /** @hidden */\r\n    public _extension: string = \"\";\r\n    /** @hidden */\r\n    public _files: Nullable<string[]> = null;\r\n    /** @hidden */\r\n    public _workingCanvas: Nullable<ICanvas> = null;\r\n    /** @hidden */\r\n    public _workingContext: Nullable<ICanvasRenderingContext> = null;\r\n    /** @hidden */\r\n    public _cachedCoordinatesMode: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _isDisabled: boolean = false;\r\n    /** @hidden */\r\n    public _compression: Nullable<string> = null;\r\n    /** @hidden */\r\n    public _sphericalPolynomial: Nullable<SphericalPolynomial> = null;\r\n    /** @hidden */\r\n    public _sphericalPolynomialPromise: Nullable<Promise<SphericalPolynomial>> = null;\r\n    /** @hidden */\r\n    public _sphericalPolynomialComputed = false;\r\n    /** @hidden */\r\n    public _lodGenerationScale: number = 0;\r\n    /** @hidden */\r\n    public _lodGenerationOffset: number = 0;\r\n    /** @hidden */\r\n    public _useSRGBBuffer: boolean = false;\r\n\r\n    // The following three fields helps sharing generated fixed LODs for texture filtering\r\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\r\n    // They are at the level of the gl texture to benefit from the cache.\r\n    /** @hidden */\r\n    public _lodTextureHigh: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _lodTextureMid: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _lodTextureLow: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _isRGBD: boolean = false;\r\n\r\n    /** @hidden */\r\n    public _linearSpecularLOD: boolean = false;\r\n    /** @hidden */\r\n    public _irradianceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @hidden */\r\n    public _hardwareTexture: Nullable<HardwareTextureWrapper> = null;\r\n\r\n    /** @hidden */\r\n    public _maxLodLevel: Nullable<number> = null;\r\n\r\n    /** @hidden */\r\n    public _references: number = 1;\r\n\r\n    /** @hidden */\r\n    public _gammaSpace: Nullable<boolean> = null;\r\n\r\n    private _engine: ThinEngine;\r\n    private _uniqueId: number;\r\n\r\n    /** @hidden */\r\n    public static _Counter = 0;\r\n\r\n    /** Gets the unique id of the internal texture */\r\n    public get uniqueId() {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets the Engine the texture belongs to.\r\n     * @returns The babylon engine\r\n     */\r\n    public getEngine(): ThinEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Gets the data source type of the texture\r\n     */\r\n    public get source(): InternalTextureSource {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InternalTexture\r\n     * @param engine defines the engine to use\r\n     * @param source defines the type of data that will be used\r\n     * @param delayAllocation if the texture allocation should be delayed (default: false)\r\n     */\r\n    constructor(engine: ThinEngine, source: InternalTextureSource, delayAllocation = false) {\r\n        super();\r\n\r\n        this._engine = engine;\r\n        this._source = source;\r\n        this._uniqueId = InternalTexture._Counter++;\r\n\r\n        if (!delayAllocation) {\r\n            this._hardwareTexture = engine._createHardwareTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increments the number of references (ie. the number of Texture that point to it)\r\n     */\r\n    public incrementReferences(): void {\r\n        this._references++;\r\n    }\r\n\r\n    /**\r\n     * Change the size of the texture (not the size of the content)\r\n     * @param width defines the new width\r\n     * @param height defines the new height\r\n     * @param depth defines the new depth (1 by default)\r\n     */\r\n    public updateSize(width: int, height: int, depth: int = 1): void {\r\n        this._engine.updateTextureDimensions(this, width, height, depth);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n\r\n        this.baseWidth = width;\r\n        this.baseHeight = height;\r\n        this.baseDepth = depth;\r\n\r\n        this._size = width * height * depth;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        this.isReady = false;\r\n        this._cachedCoordinatesMode = null;\r\n        this._cachedWrapU = null;\r\n        this._cachedWrapV = null;\r\n        this._cachedWrapR = null;\r\n        this._cachedAnisotropicFilteringLevel = null;\r\n        if (this.onRebuildCallback) {\r\n            const data = this.onRebuildCallback(this);\r\n            const swapAndSetIsReady = (proxyInternalTexture: InternalTexture) => {\r\n                proxyInternalTexture._swapAndDie(this, false);\r\n                this.isReady = data.isReady;\r\n            };\r\n            if (data.isAsync) {\r\n                (data.proxy as Promise<InternalTexture>).then(swapAndSetIsReady);\r\n            } else {\r\n                swapAndSetIsReady(data.proxy as InternalTexture);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let proxy: InternalTexture;\r\n        switch (this.source) {\r\n            case InternalTextureSource.Temp:\r\n                break;\r\n\r\n            case InternalTextureSource.Url:\r\n                proxy = this._engine.createTexture(\r\n                    this._originalUrl ?? this.url,\r\n                    !this.generateMipMaps,\r\n                    this.invertY,\r\n                    null,\r\n                    this.samplingMode,\r\n                    () => {\r\n                        proxy._swapAndDie(this, false);\r\n                        this.isReady = true;\r\n                    },\r\n                    null,\r\n                    this._buffer,\r\n                    undefined,\r\n                    this.format,\r\n                    this._extension,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    this._useSRGBBuffer\r\n                );\r\n                return;\r\n\r\n            case InternalTextureSource.Raw:\r\n                proxy = this._engine.createRawTexture(\r\n                    this._bufferView,\r\n                    this.baseWidth,\r\n                    this.baseHeight,\r\n                    this.format,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression,\r\n                    this.type\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Raw3D:\r\n                proxy = this._engine.createRawTexture3D(\r\n                    this._bufferView,\r\n                    this.baseWidth,\r\n                    this.baseHeight,\r\n                    this.baseDepth,\r\n                    this.format,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression,\r\n                    this.type\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Raw2DArray:\r\n                proxy = this._engine.createRawTexture2DArray(\r\n                    this._bufferView,\r\n                    this.baseWidth,\r\n                    this.baseHeight,\r\n                    this.baseDepth,\r\n                    this.format,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression,\r\n                    this.type\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Dynamic:\r\n                proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\r\n                proxy._swapAndDie(this, false);\r\n                this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas()!, this.invertY, undefined, undefined, true);\r\n\r\n                // The engine will make sure to update content so no need to flag it as isReady = true\r\n                break;\r\n\r\n            case InternalTextureSource.Cube:\r\n                proxy = this._engine.createCubeTexture(\r\n                    this.url,\r\n                    null,\r\n                    this._files,\r\n                    !this.generateMipMaps,\r\n                    () => {\r\n                        proxy._swapAndDie(this, false);\r\n                        this.isReady = true;\r\n                    },\r\n                    null,\r\n                    this.format,\r\n                    this._extension,\r\n                    false,\r\n                    0,\r\n                    0,\r\n                    null,\r\n                    undefined,\r\n                    this._useSRGBBuffer\r\n                );\r\n                return;\r\n\r\n            case InternalTextureSource.CubeRaw:\r\n                proxy = this._engine.createRawCubeTexture(\r\n                    this._bufferViewArray!,\r\n                    this.width,\r\n                    this.format,\r\n                    this.type,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.CubeRawRGBD:\r\n                // This case is being handeled by the environment texture tools and is not a part of the rebuild process.\r\n                // To use CubeRawRGBD use updateRGBDAsync on the cube texture.\r\n                return;\r\n\r\n            case InternalTextureSource.CubePrefiltered:\r\n                proxy = this._engine.createPrefilteredCubeTexture(\r\n                    this.url,\r\n                    null,\r\n                    this._lodGenerationScale,\r\n                    this._lodGenerationOffset,\r\n                    (proxy) => {\r\n                        if (proxy) {\r\n                            proxy._swapAndDie(this, false);\r\n                        }\r\n                        this.isReady = true;\r\n                    },\r\n                    null,\r\n                    this.format,\r\n                    this._extension\r\n                );\r\n                proxy._sphericalPolynomial = this._sphericalPolynomial;\r\n                return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param target\r\n     * @param swapAll\r\n     * @hidden\r\n     */\r\n    public _swapAndDie(target: InternalTexture, swapAll = true): void {\r\n        // TODO what about refcount on target?\r\n\r\n        this._hardwareTexture?.setUsage(target._source, this.generateMipMaps, this.isCube, this.width, this.height);\r\n\r\n        target._hardwareTexture = this._hardwareTexture;\r\n        if (swapAll) {\r\n            target._isRGBD = this._isRGBD;\r\n        }\r\n\r\n        if (this._lodTextureHigh) {\r\n            if (target._lodTextureHigh) {\r\n                target._lodTextureHigh.dispose();\r\n            }\r\n            target._lodTextureHigh = this._lodTextureHigh;\r\n        }\r\n\r\n        if (this._lodTextureMid) {\r\n            if (target._lodTextureMid) {\r\n                target._lodTextureMid.dispose();\r\n            }\r\n            target._lodTextureMid = this._lodTextureMid;\r\n        }\r\n\r\n        if (this._lodTextureLow) {\r\n            if (target._lodTextureLow) {\r\n                target._lodTextureLow.dispose();\r\n            }\r\n            target._lodTextureLow = this._lodTextureLow;\r\n        }\r\n\r\n        if (this._irradianceTexture) {\r\n            if (target._irradianceTexture) {\r\n                target._irradianceTexture.dispose();\r\n            }\r\n            target._irradianceTexture = this._irradianceTexture;\r\n        }\r\n\r\n        const cache = this._engine.getLoadedTexturesCache();\r\n        let index = cache.indexOf(this);\r\n        if (index !== -1) {\r\n            cache.splice(index, 1);\r\n        }\r\n\r\n        index = cache.indexOf(target);\r\n        if (index === -1) {\r\n            cache.push(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the current allocated resources\r\n     */\r\n    public dispose(): void {\r\n        this._references--;\r\n        this.onLoadedObservable.clear();\r\n        this.onErrorObservable.clear();\r\n        if (this._references === 0) {\r\n            this._engine._releaseTexture(this);\r\n            this._hardwareTexture = null;\r\n        }\r\n    }\r\n}\r\n"]}