{"version":3,"file":"IOfflineProvider.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Offline/IOfflineProvider.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Class used to enable access to offline support\r\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\r\n */\r\nexport interface IOfflineProvider {\r\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\r\n    enableSceneOffline: boolean;\r\n\r\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\r\n    enableTexturesOffline: boolean;\r\n\r\n    /**\r\n     * Open the offline support and make it available\r\n     * @param successCallback defines the callback to call on success\r\n     * @param errorCallback defines the callback to call on error\r\n     */\r\n    open(successCallback: () => void, errorCallback: () => void): void;\r\n\r\n    /**\r\n     * Loads an image from the offline support\r\n     * @param url defines the url to load from\r\n     * @param image defines the target DOM image\r\n     */\r\n    loadImage(url: string, image: HTMLImageElement): void;\r\n\r\n    /**\r\n     * Loads a file from offline support\r\n     * @param url defines the URL to load from\r\n     * @param sceneLoaded defines a callback to call on success\r\n     * @param progressCallBack defines a callback to call when progress changed\r\n     * @param errorCallback defines a callback to call on error\r\n     * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n     */\r\n    loadFile(url: string, sceneLoaded: (data: any) => void, progressCallBack?: (data: any) => void, errorCallback?: () => void, useArrayBuffer?: boolean): void;\r\n}\r\n"]}