{"version":3,"file":"dynamicFloat32Array.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Misc/PerformanceViewer/dynamicFloat32Array.ts"],"names":[],"mappings":"AAAA,IAAM,YAAY,GAAG,GAAG,CAAC;AAEzB;;GAEG;AACH;IAII;;;OAGG;IACH,6BAAY,YAAoB;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IACzB,CAAC;IAKD,sBAAW,2CAAU;QAHrB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED;;;;OAIG;IACI,gCAAE,GAAT,UAAU,KAAa;QACnB,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE;YACxC,OAAO,GAAG,CAAC;SACd;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACI,sCAAQ,GAAf,UAAgB,KAAa,EAAE,GAAW;QACtC,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,GAAG,CAAC,EAAE;YAC3B,OAAO,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;SAC9B;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE;YACxB,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACI,kCAAI,GAAX,UAAY,IAAY;QACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACvC,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;IACL,CAAC;IAED;;OAEG;IACK,wCAAU,GAAlB;QACI,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;QACjE,IAAM,IAAI,GAAG,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IACL,0BAAC;AAAD,CAAC,AAxED,IAwEC","sourcesContent":["const growthFactor = 1.5;\r\n\r\n/**\r\n * A class acting as a dynamic float32array used in the performance viewer\r\n */\r\nexport class DynamicFloat32Array {\r\n    private _view: Float32Array;\r\n    private _itemLength: number;\r\n\r\n    /**\r\n     * Creates a new DynamicFloat32Array with the desired item capacity.\r\n     * @param itemCapacity The initial item capacity you would like to set for the array.\r\n     */\r\n    constructor(itemCapacity: number) {\r\n        this._view = new Float32Array(itemCapacity);\r\n        this._itemLength = 0;\r\n    }\r\n\r\n    /**\r\n     * The number of items currently in the array.\r\n     */\r\n    public get itemLength(): number {\r\n        return this._itemLength;\r\n    }\r\n\r\n    /**\r\n     * Gets value at index, NaN if no such index exists.\r\n     * @param index the index to get the value at.\r\n     * @returns the value at the index provided.\r\n     */\r\n    public at(index: number): number {\r\n        if (index < 0 || index >= this._itemLength) {\r\n            return NaN;\r\n        }\r\n\r\n        return this._view[index];\r\n    }\r\n\r\n    /**\r\n     * Gets a view of the original array from start to end (exclusive of end).\r\n     * @param start starting index.\r\n     * @param end ending index.\r\n     * @returns a subarray of the original array.\r\n     */\r\n    public subarray(start: number, end: number): Float32Array {\r\n        if (start >= end || start < 0) {\r\n            return new Float32Array(0);\r\n        }\r\n\r\n        if (end > this._itemLength) {\r\n            end = this._itemLength;\r\n        }\r\n\r\n        return this._view.subarray(start, end);\r\n    }\r\n\r\n    /**\r\n     * Pushes items to the end of the array.\r\n     * @param item The item to push into the array.\r\n     */\r\n    public push(item: number) {\r\n        this._view[this._itemLength] = item;\r\n        this._itemLength++;\r\n        if (this._itemLength >= this._view.length) {\r\n            this._growArray();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Grows the array by the growth factor when necessary.\r\n     */\r\n    private _growArray() {\r\n        const newCapacity = Math.floor(this._view.length * growthFactor);\r\n        const view = new Float32Array(newCapacity);\r\n        view.set(this._view);\r\n        this._view = view;\r\n    }\r\n}\r\n"]}