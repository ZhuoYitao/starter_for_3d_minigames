{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Logger used throughout the application to allow configuration of\r\n * the log level required for the messages.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * No log\r\n     */\r\n    public static readonly NoneLogLevel = 0;\r\n    /**\r\n     * Only message logs\r\n     */\r\n    public static readonly MessageLogLevel = 1;\r\n    /**\r\n     * Only warning logs\r\n     */\r\n    public static readonly WarningLogLevel = 2;\r\n    /**\r\n     * Only error logs\r\n     */\r\n    public static readonly ErrorLogLevel = 4;\r\n    /**\r\n     * All logs\r\n     */\r\n    public static readonly AllLogLevel = 7;\r\n\r\n    /**\r\n     * Message to display when a message has been logged too many times\r\n     */\r\n    public static MessageLimitReached = \"Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.\";\r\n\r\n    private static _LogCache = \"\";\r\n    private static _LogLimitOutputs: { [message: string]: { limit: number; current: number } } = {};\r\n\r\n    /**\r\n     * Gets a value indicating the number of loading errors\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static errorsCount = 0;\r\n\r\n    /**\r\n     * Callback called when a new log is added\r\n     */\r\n    public static OnNewCacheEntry: (entry: string) => void;\r\n\r\n    private static _CheckLimit(message: string, limit: number): boolean {\r\n        let entry = Logger._LogLimitOutputs[message];\r\n        if (!entry) {\r\n            entry = { limit, current: 1 };\r\n            Logger._LogLimitOutputs[message] = entry;\r\n        } else {\r\n            entry.current++;\r\n        }\r\n        return entry.current <= entry.limit;\r\n    }\r\n\r\n    private static _GenerateLimitMessage(message: string, messageType: number): void {\r\n        const entry = Logger._LogLimitOutputs[message];\r\n        if (!entry || !Logger.MessageLimitReached) {\r\n            return;\r\n        }\r\n        if (entry.current === entry.limit) {\r\n            switch (messageType) {\r\n                case 0:\r\n                    Logger.Log(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"log\"));\r\n                    break;\r\n                case 1:\r\n                    Logger.Warn(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"warning\"));\r\n                    break;\r\n                case 2:\r\n                    Logger.Error(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"error\"));\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _AddLogEntry(entry: string) {\r\n        Logger._LogCache = entry + Logger._LogCache;\r\n\r\n        if (Logger.OnNewCacheEntry) {\r\n            Logger.OnNewCacheEntry(entry);\r\n        }\r\n    }\r\n\r\n    private static _FormatMessage(message: string): string {\r\n        const padStr = (i: number) => (i < 10 ? \"0\" + i : \"\" + i);\r\n\r\n        const date = new Date();\r\n        return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _LogDisabled(message: string, limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _LogEnabled(message: string, limit?: number): void {\r\n        if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(message);\r\n        console.log(\"BJS - \" + formattedMessage);\r\n\r\n        const entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n\r\n        Logger._GenerateLimitMessage(message, 0);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _WarnDisabled(message: string, limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _WarnEnabled(message: string, limit?: number): void {\r\n        if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(message);\r\n        console.warn(\"BJS - \" + formattedMessage);\r\n\r\n        const entry = \"<div style='color:orange'>\" + message + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n\r\n        Logger._GenerateLimitMessage(message, 1);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _ErrorDisabled(message: string, limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _ErrorEnabled(message: string, limit?: number): void {\r\n        if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(message);\r\n        Logger.errorsCount++;\r\n        console.error(\"BJS - \" + formattedMessage);\r\n\r\n        const entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n\r\n        Logger._GenerateLimitMessage(message, 2);\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     */\r\n    public static Log: (message: string, limit?: number) => void = Logger._LogEnabled;\r\n\r\n    /**\r\n     * Write a warning message to the console\r\n     */\r\n    public static Warn: (message: string, limit?: number) => void = Logger._WarnEnabled;\r\n\r\n    /**\r\n     * Write an error message to the console\r\n     */\r\n    public static Error: (message: string, limit?: number) => void = Logger._ErrorEnabled;\r\n\r\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\r\n    public static get LogCache(): string {\r\n        return Logger._LogCache;\r\n    }\r\n\r\n    /**\r\n     * Clears the log cache\r\n     */\r\n    public static ClearLogCache(): void {\r\n        Logger._LogCache = \"\";\r\n        Logger._LogLimitOutputs = {};\r\n        Logger.errorsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\r\n    public static set LogLevels(level: number) {\r\n        if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\r\n            Logger.Log = Logger._LogEnabled;\r\n        } else {\r\n            Logger.Log = Logger._LogDisabled;\r\n        }\r\n\r\n        if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\r\n            Logger.Warn = Logger._WarnEnabled;\r\n        } else {\r\n            Logger.Warn = Logger._WarnDisabled;\r\n        }\r\n\r\n        if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\r\n            Logger.Error = Logger._ErrorEnabled;\r\n        } else {\r\n            Logger.Error = Logger._ErrorDisabled;\r\n        }\r\n    }\r\n}\r\n"]}