{"version":3,"file":"gradients.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/gradients.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Color3 } from \"../Maths/math.color\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\n\r\n/** Interface used by value gradients (color, factor, ...) */\r\nexport interface IValueGradient {\r\n    /**\r\n     * Gets or sets the gradient value (between 0 and 1)\r\n     */\r\n    gradient: number;\r\n}\r\n\r\n/** Class used to store color4 gradient */\r\nexport class ColorGradient implements IValueGradient {\r\n    /**\r\n     * Creates a new color4 gradient\r\n     * @param gradient gets or sets the gradient value (between 0 and 1)\r\n     * @param color1 gets or sets first associated color\r\n     * @param color2 gets or sets first second color\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Gets or sets the gradient value (between 0 and 1)\r\n         */\r\n        public gradient: number,\r\n        /**\r\n         * Gets or sets first associated color\r\n         */\r\n        public color1: Color4,\r\n        /**\r\n         * Gets or sets second associated color\r\n         */\r\n        public color2?: Color4\r\n    ) {}\r\n\r\n    /**\r\n     * Will get a color picked randomly between color1 and color2.\r\n     * If color2 is undefined then color1 will be used\r\n     * @param result defines the target Color4 to store the result in\r\n     */\r\n    public getColorToRef(result: Color4) {\r\n        if (!this.color2) {\r\n            result.copyFrom(this.color1);\r\n            return;\r\n        }\r\n\r\n        Color4.LerpToRef(this.color1, this.color2, Math.random(), result);\r\n    }\r\n}\r\n\r\n/** Class used to store color 3 gradient */\r\nexport class Color3Gradient implements IValueGradient {\r\n    /**\r\n     * Creates a new color3 gradient\r\n     * @param gradient gets or sets the gradient value (between 0 and 1)\r\n     * @param color gets or sets associated color\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Gets or sets the gradient value (between 0 and 1)\r\n         */\r\n        public gradient: number,\r\n        /**\r\n         * Gets or sets the associated color\r\n         */\r\n        public color: Color3\r\n    ) {}\r\n}\r\n\r\n/** Class used to store factor gradient */\r\nexport class FactorGradient implements IValueGradient {\r\n    /**\r\n     * Creates a new factor gradient\r\n     * @param gradient gets or sets the gradient value (between 0 and 1)\r\n     * @param factor1 gets or sets first associated factor\r\n     * @param factor2 gets or sets second associated factor\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Gets or sets the gradient value (between 0 and 1)\r\n         */\r\n        public gradient: number,\r\n        /**\r\n         * Gets or sets first associated factor\r\n         */\r\n        public factor1: number,\r\n        /**\r\n         * Gets or sets second associated factor\r\n         */\r\n        public factor2?: number\r\n    ) {}\r\n\r\n    /**\r\n     * Will get a number picked randomly between factor1 and factor2.\r\n     * If factor2 is undefined then factor1 will be used\r\n     * @returns the picked number\r\n     */\r\n    public getFactor(): number {\r\n        if (this.factor2 === undefined || this.factor2 === this.factor1) {\r\n            return this.factor1;\r\n        }\r\n\r\n        return this.factor1 + (this.factor2 - this.factor1) * Math.random();\r\n    }\r\n}\r\n\r\n/**\r\n * Helper used to simplify some generic gradient tasks\r\n */\r\nexport class GradientHelper {\r\n    /**\r\n     * Gets the current gradient from an array of IValueGradient\r\n     * @param ratio defines the current ratio to get\r\n     * @param gradients defines the array of IValueGradient\r\n     * @param updateFunc defines the callback function used to get the final value from the selected gradients\r\n     */\r\n    public static GetCurrentGradient(ratio: number, gradients: IValueGradient[], updateFunc: (current: IValueGradient, next: IValueGradient, scale: number) => void) {\r\n        // Use last index if over\r\n        if (gradients[0].gradient > ratio) {\r\n            updateFunc(gradients[0], gradients[0], 1.0);\r\n            return;\r\n        }\r\n\r\n        for (let gradientIndex = 0; gradientIndex < gradients.length - 1; gradientIndex++) {\r\n            const currentGradient = gradients[gradientIndex];\r\n            const nextGradient = gradients[gradientIndex + 1];\r\n\r\n            if (ratio >= currentGradient.gradient && ratio <= nextGradient.gradient) {\r\n                const scale = (ratio - currentGradient.gradient) / (nextGradient.gradient - currentGradient.gradient);\r\n                updateFunc(currentGradient, nextGradient, scale);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Use last index if over\r\n        const lastIndex = gradients.length - 1;\r\n        updateFunc(gradients[lastIndex], gradients[lastIndex], 1.0);\r\n    }\r\n}\r\n"]}