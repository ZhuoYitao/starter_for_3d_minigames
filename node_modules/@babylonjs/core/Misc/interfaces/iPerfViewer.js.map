{"version":3,"file":"iPerfViewer.js","sourceRoot":"","sources":["../../../../../../lts/core/generated/Misc/interfaces/iPerfViewer.ts"],"names":[],"mappings":"","sourcesContent":["import type { DynamicFloat32Array } from \"../PerformanceViewer/dynamicFloat32Array\";\r\n\r\n/**\r\n * Defines the shape of a collection of datasets that our graphing service uses for drawing purposes.\r\n */\r\nexport interface IPerfDatasets {\r\n    /**\r\n     * The ids of our dataset.\r\n     */\r\n    ids: string[];\r\n\r\n    /**\r\n     * The data to be processed by the performance graph. Each slice will be of the form of [timestamp, numberOfPoints, value1, value2...]\r\n     */\r\n    data: DynamicFloat32Array;\r\n\r\n    /**\r\n     * A list of starting indices for each slice of data collected. Used for fast access of an arbitrary slice inside the data array.\r\n     */\r\n    startingIndices: DynamicFloat32Array;\r\n}\r\n\r\n/**\r\n * Defines the shape of a the metadata the graphing service uses for drawing purposes.\r\n */\r\nexport interface IPerfMetadata {\r\n    /**\r\n     * The color of the line to be drawn.\r\n     */\r\n    color?: string;\r\n\r\n    /**\r\n     * Specifies if data should be hidden, falsey by default.\r\n     */\r\n    hidden?: boolean;\r\n\r\n    /**\r\n     * Specifies the category of the data\r\n     */\r\n    category?: string;\r\n}\r\n\r\n/**\r\n * Defines the shape of a custom user registered event.\r\n */\r\nexport interface IPerfCustomEvent {\r\n    /**\r\n     * The name of the event.\r\n     */\r\n    name: string;\r\n    /**\r\n     * The value for the event, if set we will use it as the value, otherwise we will count the number of occurrences.\r\n     */\r\n    value?: number;\r\n}\r\n"]}