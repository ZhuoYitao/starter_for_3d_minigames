{"version":3,"file":"fileTools.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/fileTools.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { WebRequest } from \"./webRequest\";\nimport { IsWindowObjectExist } from \"./domManagement\";\nimport type { Nullable } from \"../types\";\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\nimport type { IFileRequest } from \"./fileRequest\";\nimport { Observable } from \"./observable\";\nimport { FilesInputStore } from \"./filesInputStore\";\nimport { RetryStrategy } from \"./retryStrategy\";\nimport { BaseError, ErrorCodes, RuntimeError } from \"./error\";\nimport { DecodeBase64ToBinary, DecodeBase64ToString, EncodeArrayBufferToBase64 } from \"./stringTools\";\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor\";\nimport { ThinEngine } from \"../Engines/thinEngine\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Logger } from \"./logger\";\nimport { TimingTools } from \"./timingTools\";\nconst Base64DataUrlRegEx = new RegExp(/^data:([^,]+\\/[^,]+)?;base64,/i);\n/** @ignore */\nexport class LoadFileError extends RuntimeError {\n    public request?: WebRequest;\n    public file?: File;\n    /**\n     * Creates a new LoadFileError\n     * @param message defines the message of the error\n     * @param object defines the optional web request\n     */\n    constructor(message: string, object?: WebRequest | File) {\n        super(message, ErrorCodes.LoadFileError);\n        this.name = \"LoadFileError\";\n        BaseError._setPrototypeOf(this, LoadFileError.prototype);\n        if (object instanceof WebRequest) {\n            this.request = object;\n        }\n        else {\n            this.file = object;\n        }\n    }\n}\n/** @ignore */\nexport class RequestFileError extends RuntimeError {\n    /**\n     * Creates a new LoadFileError\n     * @param message defines the message of the error\n     * @param request defines the optional web request\n     */\n    constructor(message: string, public request: WebRequest) {\n        super(message, ErrorCodes.RequestFileError);\n        this.name = \"RequestFileError\";\n        BaseError._setPrototypeOf(this, RequestFileError.prototype);\n    }\n}\n/** @ignore */\nexport class ReadFileError extends RuntimeError {\n    /**\n     * Creates a new ReadFileError\n     * @param message defines the message of the error\n     * @param file defines the optional file\n     */\n    constructor(message: string, public file: File) {\n        super(message, ErrorCodes.ReadFileError);\n        this.name = \"ReadFileError\";\n        BaseError._setPrototypeOf(this, ReadFileError.prototype);\n    }\n}\n/**\n * @hidden\n */\nexport const FileToolsOptions: {\n    DefaultRetryStrategy: (url: string, request: WebRequest, retryIndex: number) => number;\n    BaseUrl: string;\n    CorsBehavior: string | ((url: string | string[]) => string);\n    PreprocessUrl: (url: string) => string;\n} = {\n    /**\n     * Gets or sets the retry strategy to apply when an error happens while loading an asset.\n     * When defining this function, return the wait time before trying again or return -1 to\n     * stop retrying and error out.\n     */\n    DefaultRetryStrategy: RetryStrategy.ExponentialBackoff(),\n    /**\n     * Gets or sets the base URL to use to load assets\n     */\n    BaseUrl: \"\",\n    /**\n     * Default behaviour for cors in the application.\n     * It can be a string if the expected behavior is identical in the entire app.\n     * Or a callback to be able to set it per url or on a group of them (in case of Video source for instance)\n     */\n    CorsBehavior: \"anonymous\",\n    /**\n     * Gets or sets a function used to pre-process url before using them to load assets\n     * @param url\n     */\n    PreprocessUrl: (url: string) => {\n        return url;\n    }\n};\n/**\n * Removes unwanted characters from an url\n * @param url defines the url to clean\n * @returns the cleaned url\n */\nconst _CleanUrl = (url: string): string => {\n    url = url.replace(/#/gm, \"%23\");\n    return url;\n};\n/**\n * Sets the cors behavior on a dom element. This will add the required Tools.CorsBehavior to the element.\n * @param url define the url we are trying\n * @param element define the dom element where to configure the cors policy\n * @param element.crossOrigin\n * @hidden\n */\nexport const SetCorsBehavior = (url: string | string[], element: {\n    crossOrigin: string | null;\n}): void => {\n    if (url && url.indexOf(\"data:\") === 0) {\n        return;\n    }\n    if (FileToolsOptions.CorsBehavior) {\n        if (typeof FileToolsOptions.CorsBehavior === \"string\" || FileToolsOptions.CorsBehavior instanceof String) {\n            element.crossOrigin = <string>FileToolsOptions.CorsBehavior;\n        }\n        else {\n            const result = FileToolsOptions.CorsBehavior(url);\n            if (result) {\n                element.crossOrigin = result;\n            }\n        }\n    }\n};\n/**\n * Loads an image as an HTMLImageElement.\n * @param input url string, ArrayBuffer, or Blob to load\n * @param onLoad callback called when the image successfully loads\n * @param onError callback called when the image fails to load\n * @param offlineProvider offline provider for caching\n * @param mimeType optional mime type\n * @param imageBitmapOptions\n * @returns the HTMLImageElement of the loaded image\n * @hidden\n */\nexport const LoadImage = (input: string | ArrayBuffer | ArrayBufferView | Blob, onLoad: (img: HTMLImageElement | ImageBitmap) => void, onError: (message?: string, exception?: any) => void, offlineProvider: Nullable<IOfflineProvider>, mimeType: string = \"\", imageBitmapOptions?: ImageBitmapOptions): Nullable<HTMLImageElement> => {\n    let url: string;\n    let usingObjectURL = false;\n    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\n        if (typeof Blob !== \"undefined\") {\n            url = URL.createObjectURL(new Blob([input], { type: mimeType }));\n            usingObjectURL = true;\n        }\n        else {\n            url = `data:${mimeType};base64,` + EncodeArrayBufferToBase64(input);\n        }\n    }\n    else if (input instanceof Blob) {\n        url = URL.createObjectURL(input);\n        usingObjectURL = true;\n    }\n    else {\n        url = _CleanUrl(input);\n        url = FileToolsOptions.PreprocessUrl(input);\n    }\n    const engine = EngineStore.LastCreatedEngine;\n    const onErrorHandler = (exception: any) => {\n        if (onError) {\n            const inputText = url || input.toString();\n            onError(`Error while trying to load image: ${inputText.indexOf(\"http\") === 0 || inputText.length <= 128 ? inputText : inputText.slice(0, 128) + \"...\"}`, exception);\n        }\n    };\n    if (typeof Image === \"undefined\" || (engine?._features.forceBitmapOverHTMLImageElement ?? false)) {\n        LoadFile(url, (data) => {\n            engine!\n                .createImageBitmap(new Blob([data], { type: mimeType }), { premultiplyAlpha: \"none\", ...imageBitmapOptions })\n                .then((imgBmp) => {\n                onLoad(imgBmp);\n                if (usingObjectURL) {\n                    URL.revokeObjectURL(url);\n                }\n            })\n                .catch((reason) => {\n                if (onError) {\n                    onError(\"Error while trying to load image: \" + input, reason);\n                }\n            });\n        }, undefined, offlineProvider || undefined, true, (request, exception) => {\n            onErrorHandler(exception);\n        });\n        return null;\n    }\n    const img = new Image();\n    SetCorsBehavior(url, img);\n    const loadHandler = () => {\n        img.removeEventListener(\"load\", loadHandler);\n        img.removeEventListener(\"error\", errorHandler);\n        onLoad(img);\n        // Must revoke the URL after calling onLoad to avoid security exceptions in\n        // certain scenarios (e.g. when hosted in vscode).\n        if (usingObjectURL && img.src) {\n            URL.revokeObjectURL(img.src);\n        }\n    };\n    const errorHandler = (err: any) => {\n        img.removeEventListener(\"load\", loadHandler);\n        img.removeEventListener(\"error\", errorHandler);\n        onErrorHandler(err);\n        if (usingObjectURL && img.src) {\n            URL.revokeObjectURL(img.src);\n        }\n    };\n    img.addEventListener(\"load\", loadHandler);\n    img.addEventListener(\"error\", errorHandler);\n    const noOfflineSupport = () => {\n        img.src = url;\n    };\n    const loadFromOfflineSupport = () => {\n        if (offlineProvider) {\n            offlineProvider.loadImage(url, img);\n        }\n    };\n    if (url.substr(0, 5) !== \"blob:\" && url.substr(0, 5) !== \"data:\" && offlineProvider && offlineProvider.enableTexturesOffline) {\n        offlineProvider.open(loadFromOfflineSupport, noOfflineSupport);\n    }\n    else {\n        if (url.indexOf(\"file:\") !== -1) {\n            const textureName = decodeURIComponent(url.substring(5).toLowerCase());\n            if (FilesInputStore.FilesToLoad[textureName]) {\n                try {\n                    let blobURL;\n                    try {\n                        blobURL = URL.createObjectURL(FilesInputStore.FilesToLoad[textureName]);\n                    }\n                    catch (ex) {\n                        // Chrome doesn't support oneTimeOnly parameter\n                        blobURL = URL.createObjectURL(FilesInputStore.FilesToLoad[textureName]);\n                    }\n                    img.src = blobURL;\n                    usingObjectURL = true;\n                }\n                catch (e) {\n                    img.src = \"\";\n                }\n                return img;\n            }\n        }\n        noOfflineSupport();\n    }\n    return img;\n};\n/**\n * Reads a file from a File object\n * @param file defines the file to load\n * @param onSuccess defines the callback to call when data is loaded\n * @param onProgress defines the callback to call during loading process\n * @param useArrayBuffer defines a boolean indicating that data must be returned as an ArrayBuffer\n * @param onError defines the callback to call when an error occurs\n * @returns a file request object\n * @hidden\n */\nexport const ReadFile = (file: File, onSuccess: (data: any) => void, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean, onError?: (error: ReadFileError) => void): IFileRequest => {\n    const reader = new FileReader();\n    const fileRequest: IFileRequest = {\n        onCompleteObservable: new Observable<IFileRequest>(),\n        abort: () => reader.abort()\n    };\n    reader.onloadend = () => fileRequest.onCompleteObservable.notifyObservers(fileRequest);\n    if (onError) {\n        reader.onerror = () => {\n            onError(new ReadFileError(`Unable to read ${file.name}`, file));\n        };\n    }\n    reader.onload = (e) => {\n        //target doesn't have result from ts 1.3\n        onSuccess((<any>e.target)[\"result\"]);\n    };\n    if (onProgress) {\n        reader.onprogress = onProgress;\n    }\n    if (!useArrayBuffer) {\n        // Asynchronous read\n        reader.readAsText(file);\n    }\n    else {\n        reader.readAsArrayBuffer(file);\n    }\n    return fileRequest;\n};\n/**\n * Loads a file from a url, a data url, or a file url\n * @param fileOrUrl file, url, data url, or file url to load\n * @param onSuccess callback called when the file successfully loads\n * @param onProgress callback called while file is loading (if the server supports this mode)\n * @param offlineProvider defines the offline provider for caching\n * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\n * @param onError callback called when the file fails to load\n * @param onOpened\n * @returns a file request object\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const LoadFile = (fileOrUrl: File | string, onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void, onProgress?: (ev: ProgressEvent) => void, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean, onError?: (request?: WebRequest, exception?: LoadFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest => {\n    if ((fileOrUrl as File).name) {\n        return ReadFile(fileOrUrl as File, onSuccess, onProgress, useArrayBuffer, onError\n            ? (error: ReadFileError) => {\n                onError(undefined, error);\n            }\n            : undefined);\n    }\n    const url = fileOrUrl as string;\n    // If file and file input are set\n    if (url.indexOf(\"file:\") !== -1) {\n        let fileName = decodeURIComponent(url.substring(5).toLowerCase());\n        if (fileName.indexOf(\"./\") === 0) {\n            fileName = fileName.substring(2);\n        }\n        const file = FilesInputStore.FilesToLoad[fileName];\n        if (file) {\n            return ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError ? (error) => onError(undefined, new LoadFileError(error.message, error.file)) : undefined);\n        }\n    }\n    // For a Base64 Data URL\n    if (IsBase64DataUrl(url)) {\n        const fileRequest: IFileRequest = {\n            onCompleteObservable: new Observable<IFileRequest>(),\n            abort: () => () => { }\n        };\n        try {\n            onSuccess(useArrayBuffer ? DecodeBase64UrlToBinary(url) : DecodeBase64UrlToString(url));\n        }\n        catch (error) {\n            if (onError) {\n                onError(undefined, error);\n            }\n            else {\n                Logger.Error(error.message || \"Failed to parse the Data URL\");\n            }\n        }\n        TimingTools.SetImmediate(() => {\n            fileRequest.onCompleteObservable.notifyObservers(fileRequest);\n        });\n        return fileRequest;\n    }\n    return RequestFile(url, (data, request) => {\n        onSuccess(data, request ? request.responseURL : undefined);\n    }, onProgress, offlineProvider, useArrayBuffer, onError\n        ? (error) => {\n            onError(error.request, new LoadFileError(error.message, error.request));\n        }\n        : undefined, onOpened);\n};\n/**\n * Loads a file from a url\n * @param url url to load\n * @param onSuccess callback called when the file successfully loads\n * @param onProgress callback called while file is loading (if the server supports this mode)\n * @param offlineProvider defines the offline provider for caching\n * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\n * @param onError callback called when the file fails to load\n * @param onOpened callback called when the web request is opened\n * @returns a file request object\n * @hidden\n */\nexport const RequestFile = (url: string, onSuccess?: (data: string | ArrayBuffer, request?: WebRequest) => void, onProgress?: (event: ProgressEvent) => void, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean, onError?: (error: RequestFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest => {\n    url = _CleanUrl(url);\n    url = FileToolsOptions.PreprocessUrl(url);\n    const loadUrl = FileToolsOptions.BaseUrl + url;\n    let aborted = false;\n    const fileRequest: IFileRequest = {\n        onCompleteObservable: new Observable<IFileRequest>(),\n        abort: () => (aborted = true)\n    };\n    const requestFile = () => {\n        let request: Nullable<WebRequest> = new WebRequest();\n        let retryHandle: Nullable<ReturnType<typeof setTimeout>> = null;\n        let onReadyStateChange: Nullable<() => void>;\n        const unbindEvents = () => {\n            if (!request) {\n                return;\n            }\n            if (onProgress) {\n                request.removeEventListener(\"progress\", onProgress);\n            }\n            if (onReadyStateChange) {\n                request.removeEventListener(\"readystatechange\", onReadyStateChange);\n            }\n            request.removeEventListener(\"loadend\", onLoadEnd!);\n        };\n        let onLoadEnd: Nullable<() => void> = () => {\n            unbindEvents();\n            fileRequest.onCompleteObservable.notifyObservers(fileRequest);\n            fileRequest.onCompleteObservable.clear();\n            onProgress = undefined;\n            onReadyStateChange = null;\n            onLoadEnd = null;\n            onError = undefined;\n            onOpened = undefined;\n            onSuccess = undefined;\n        };\n        fileRequest.abort = () => {\n            aborted = true;\n            if (onLoadEnd) {\n                onLoadEnd();\n            }\n            if (request && request.readyState !== (XMLHttpRequest.DONE || 4)) {\n                request.abort();\n            }\n            if (retryHandle !== null) {\n                clearTimeout(retryHandle);\n                retryHandle = null;\n            }\n            request = null;\n        };\n        const handleError = (error: any) => {\n            const message = error.message || \"Unknown error\";\n            if (onError && request) {\n                onError(new RequestFileError(message, request));\n            }\n            else {\n                Logger.Error(message);\n            }\n        };\n        const retryLoop = (retryIndex: number) => {\n            if (!request) {\n                return;\n            }\n            request.open(\"GET\", loadUrl);\n            if (onOpened) {\n                try {\n                    onOpened(request);\n                }\n                catch (e) {\n                    handleError(e);\n                    return;\n                }\n            }\n            if (useArrayBuffer) {\n                request.responseType = \"arraybuffer\";\n            }\n            if (onProgress) {\n                request.addEventListener(\"progress\", onProgress);\n            }\n            if (onLoadEnd) {\n                request.addEventListener(\"loadend\", onLoadEnd);\n            }\n            onReadyStateChange = () => {\n                if (aborted || !request) {\n                    return;\n                }\n                // In case of undefined state in some browsers.\n                if (request.readyState === (XMLHttpRequest.DONE || 4)) {\n                    // Some browsers have issues where onreadystatechange can be called multiple times with the same value.\n                    if (onReadyStateChange) {\n                        request.removeEventListener(\"readystatechange\", onReadyStateChange);\n                    }\n                    if ((request.status >= 200 && request.status < 300) || (request.status === 0 && (!IsWindowObjectExist() || IsFileURL()))) {\n                        try {\n                            if (onSuccess) {\n                                onSuccess(useArrayBuffer ? request.response : request.responseText, request);\n                            }\n                        }\n                        catch (e) {\n                            handleError(e);\n                        }\n                        return;\n                    }\n                    const retryStrategy = FileToolsOptions.DefaultRetryStrategy;\n                    if (retryStrategy) {\n                        const waitTime = retryStrategy(loadUrl, request, retryIndex);\n                        if (waitTime !== -1) {\n                            // Prevent the request from completing for retry.\n                            unbindEvents();\n                            request = new WebRequest();\n                            retryHandle = setTimeout(() => retryLoop(retryIndex + 1), waitTime);\n                            return;\n                        }\n                    }\n                    const error = new RequestFileError(\"Error status: \" + request.status + \" \" + request.statusText + \" - Unable to load \" + loadUrl, request);\n                    if (onError) {\n                        onError(error);\n                    }\n                }\n            };\n            request.addEventListener(\"readystatechange\", onReadyStateChange);\n            request.send();\n        };\n        retryLoop(0);\n    };\n    // Caching all files\n    if (offlineProvider && offlineProvider.enableSceneOffline) {\n        const noOfflineSupport = (request?: any) => {\n            if (request && request.status > 400) {\n                if (onError) {\n                    onError(request);\n                }\n            }\n            else {\n                requestFile();\n            }\n        };\n        const loadFromOfflineSupport = () => {\n            // TODO: database needs to support aborting and should return a IFileRequest\n            if (offlineProvider) {\n                offlineProvider.loadFile(FileToolsOptions.BaseUrl + url, (data) => {\n                    if (!aborted && onSuccess) {\n                        onSuccess(data);\n                    }\n                    fileRequest.onCompleteObservable.notifyObservers(fileRequest);\n                }, onProgress\n                    ? (event) => {\n                        if (!aborted && onProgress) {\n                            onProgress(event);\n                        }\n                    }\n                    : undefined, noOfflineSupport, useArrayBuffer);\n            }\n        };\n        offlineProvider.open(loadFromOfflineSupport, noOfflineSupport);\n    }\n    else {\n        requestFile();\n    }\n    return fileRequest;\n};\n/**\n * Checks if the loaded document was accessed via `file:`-Protocol.\n * @returns boolean\n * @hidden\n */\nexport const IsFileURL = (): boolean => {\n    return typeof location !== \"undefined\" && location.protocol === \"file:\";\n};\n/**\n * Test if the given uri is a valid base64 data url\n * @param uri The uri to test\n * @return True if the uri is a base64 data url or false otherwise\n * @hidden\n */\nexport const IsBase64DataUrl = (uri: string): boolean => {\n    return Base64DataUrlRegEx.test(uri);\n};\n/**\n * Decode the given base64 uri.\n * @param uri The uri to decode\n * @return The decoded base64 data.\n * @hidden\n */\nexport function DecodeBase64UrlToBinary(uri: string): ArrayBuffer {\n    return DecodeBase64ToBinary(uri.split(\",\")[1]);\n}\n/**\n * Decode the given base64 uri into a UTF-8 encoded string.\n * @param uri The uri to decode\n * @return The decoded base64 data.\n * @hidden\n */\nexport const DecodeBase64UrlToString = (uri: string): string => {\n    return DecodeBase64ToString(uri.split(\",\")[1]);\n};\n/**\n * This will be executed automatically for UMD and es5.\n * If esm dev wants the side effects to execute they will have to run it manually\n * Once we build native modules those need to be exported.\n * @hidden\n */\nconst initSideEffects = () => {\n    ThinEngine._FileToolsLoadImage = LoadImage;\n    ThinEngine._FileToolsLoadFile = LoadFile;\n    ShaderProcessor._FileToolsLoadFile = LoadFile;\n};\ninitSideEffects();\n\n    /**\n * FileTools defined as any.\n * This should not be imported or used in future releases or in any module in the framework\n * @hidden\n * @deprecated import the needed function from fileTools.ts\n */\nexport let FileTools: {\n    DecodeBase64UrlToBinary: (uri: string) => ArrayBuffer;\n    DecodeBase64UrlToString: (uri: string) => string;\n    DefaultRetryStrategy: any;\n    BaseUrl: any;\n    CorsBehavior: any;\n    PreprocessUrl: any;\n    IsBase64DataUrl: (uri: string) => boolean;\n    IsFileURL: () => boolean;\n    LoadFile: (fileOrUrl: string | File, onSuccess: (data: string | ArrayBuffer, responseURL?: string | undefined) => void, onProgress?: ((ev: ProgressEvent<EventTarget>) => void) | undefined, offlineProvider?: IOfflineProvider | undefined, useArrayBuffer?: boolean | undefined, onError?: ((request?: WebRequest | undefined, exception?: LoadFileError | undefined) => void) | undefined, onOpened?: ((request: WebRequest) => void) | undefined) => IFileRequest;\n    LoadImage: (input: string | ArrayBuffer | Blob | ArrayBufferView, onLoad: (img: HTMLImageElement | ImageBitmap) => void, onError: (message?: string | undefined, exception?: any) => void, offlineProvider: Nullable<IOfflineProvider>, mimeType?: string | undefined, imageBitmapOptions?: ImageBitmapOptions | undefined) => Nullable<HTMLImageElement>;\n    ReadFile: (file: File, onSuccess: (data: any) => void, onProgress?: ((ev: ProgressEvent<EventTarget>) => any) | undefined, useArrayBuffer?: boolean | undefined, onError?: ((error: ReadFileError) => void) | undefined) => IFileRequest;\n    RequestFile: (url: string, onSuccess: (data: string | ArrayBuffer, request?: WebRequest | undefined) => void, onProgress?: ((event: ProgressEvent<EventTarget>) => void) | undefined, offlineProvider?: IOfflineProvider | undefined, useArrayBuffer?: boolean | undefined, onError?: ((error: RequestFileError) => void) | undefined, onOpened?: ((request: WebRequest) => void) | undefined) => IFileRequest;\n    SetCorsBehavior: (url: string | string[], element: {\n        crossOrigin: string | null;\n    }) => void;\n};\n/**\n * @param DecodeBase64UrlToBinary\n * @param DecodeBase64UrlToString\n * @param FileToolsOptions\n * @param FileToolsOptions.DefaultRetryStrategy\n * @param FileToolsOptions.BaseUrl\n * @param FileToolsOptions.CorsBehavior\n * @param FileToolsOptions.PreprocessUrl\n * @param IsBase64DataUrl\n * @param IsFileURL\n * @param LoadFile\n * @param LoadImage\n * @param ReadFile\n * @param RequestFile\n * @param SetCorsBehavior\n * @hidden\n */\nexport const _injectLTSFileTools = (DecodeBase64UrlToBinary: (uri: string) => ArrayBuffer, DecodeBase64UrlToString: (uri: string) => string, FileToolsOptions: {\n    DefaultRetryStrategy: any;\n    BaseUrl: any;\n    CorsBehavior: any;\n    PreprocessUrl: any;\n}, IsBase64DataUrl: (uri: string) => boolean, IsFileURL: () => boolean, LoadFile: (fileOrUrl: string | File, onSuccess: (data: string | ArrayBuffer, responseURL?: string | undefined) => void, onProgress?: ((ev: ProgressEvent<EventTarget>) => void) | undefined, offlineProvider?: IOfflineProvider | undefined, useArrayBuffer?: boolean | undefined, onError?: ((request?: WebRequest | undefined, exception?: LoadFileError | undefined) => void) | undefined, onOpened?: ((request: WebRequest) => void) | undefined) => IFileRequest, LoadImage: (input: string | ArrayBuffer | ArrayBufferView | Blob, onLoad: (img: HTMLImageElement | ImageBitmap) => void, onError: (message?: string | undefined, exception?: any) => void, offlineProvider: Nullable<IOfflineProvider>, mimeType?: string, imageBitmapOptions?: ImageBitmapOptions | undefined) => Nullable<HTMLImageElement>, ReadFile: (file: File, onSuccess: (data: any) => void, onProgress?: ((ev: ProgressEvent<EventTarget>) => any) | undefined, useArrayBuffer?: boolean | undefined, onError?: ((error: ReadFileError) => void) | undefined) => IFileRequest, RequestFile: (url: string, onSuccess: (data: string | ArrayBuffer, request?: WebRequest | undefined) => void, onProgress?: ((event: ProgressEvent<EventTarget>) => void) | undefined, offlineProvider?: IOfflineProvider | undefined, useArrayBuffer?: boolean | undefined, onError?: ((error: RequestFileError) => void) | undefined, onOpened?: ((request: WebRequest) => void) | undefined) => IFileRequest, SetCorsBehavior: (url: string | string[], element: {\n    crossOrigin: string | null;\n}) => void) => {\n    /**\n     * Backwards compatibility.\n     * @hidden\n     * @deprecated\n     */\n    FileTools = {\n        DecodeBase64UrlToBinary,\n        DecodeBase64UrlToString,\n        DefaultRetryStrategy: FileToolsOptions.DefaultRetryStrategy,\n        BaseUrl: FileToolsOptions.BaseUrl,\n        CorsBehavior: FileToolsOptions.CorsBehavior,\n        PreprocessUrl: FileToolsOptions.PreprocessUrl,\n        IsBase64DataUrl,\n        IsFileURL,\n        LoadFile,\n        LoadImage,\n        ReadFile,\n        RequestFile,\n        SetCorsBehavior\n    };\n    Object.defineProperty(FileTools, \"DefaultRetryStrategy\", {\n        get: function (this: null) {\n            return FileToolsOptions.DefaultRetryStrategy;\n        },\n        set: function (this: null, value: (url: string, request: WebRequest, retryIndex: number) => number) {\n            FileToolsOptions.DefaultRetryStrategy = value;\n        }\n    });\n    Object.defineProperty(FileTools, \"BaseUrl\", {\n        get: function (this: null) {\n            return FileToolsOptions.BaseUrl;\n        },\n        set: function (this: null, value: string) {\n            FileToolsOptions.BaseUrl = value;\n        }\n    });\n    Object.defineProperty(FileTools, \"PreprocessUrl\", {\n        get: function (this: null) {\n            return FileToolsOptions.PreprocessUrl;\n        },\n        set: function (this: null, value: (url: string) => string) {\n            FileToolsOptions.PreprocessUrl = value;\n        }\n    });\n    Object.defineProperty(FileTools, \"CorsBehavior\", {\n        get: function (this: null) {\n            return FileToolsOptions.CorsBehavior;\n        },\n        set: function (this: null, value: string | ((url: string | string[]) => string)) {\n            FileToolsOptions.CorsBehavior = value;\n        }\n    });\n};\n_injectLTSFileTools(DecodeBase64UrlToBinary, DecodeBase64UrlToString, FileToolsOptions, IsBase64DataUrl, IsFileURL, LoadFile, LoadImage, ReadFile, RequestFile, SetCorsBehavior);\n"]}