{"version":3,"file":"promise.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/promise.ts"],"names":[],"mappings":"AAEA,IAAK,aAIJ;AAJD,WAAK,aAAa;IACd,uDAAO,CAAA;IACP,2DAAS,CAAA;IACT,yDAAQ,CAAA;AACZ,CAAC,EAJI,aAAa,KAAb,aAAa,QAIjB;AAED;IAAA;QACW,UAAK,GAAG,CAAC,CAAC;QACV,WAAM,GAAG,CAAC,CAAC;QAEX,YAAO,GAAU,EAAE,CAAC;IAC/B,CAAC;IAAD,2BAAC;AAAD,CAAC,AALD,IAKC;AAED;IAsBI,yBAAmB,QAA0F;QAA7G,iBAiBC;QAtCO,WAAM,GAAG,aAAa,CAAC,OAAO,CAAC;QAG/B,cAAS,GAAG,IAAI,KAAK,EAAsB,CAAC;QAI5C,uBAAkB,GAAG,KAAK,CAAC;QAe/B,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO;SACV;QAED,IAAI;YACA,QAAQ,CACJ,UAAC,KAAmB;gBAChB,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC,EACD,UAAC,MAAW;gBACR,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC,CACJ,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;IACL,CAAC;IA7BD,sBAAY,oCAAO;aAAnB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;aAED,UAAoB,KAA8B;YAC9C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAE1B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;gBACpD,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;aAChC;QACL,CAAC;;;OARA;IA6BM,+BAAK,GAAZ,UAAa,UAAiC;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEM,8BAAI,GAAX,UAAY,WAA6E,EAAE,UAAkC;QAA7H,iBAoBC;QAnBG,IAAM,UAAU,GAAG,IAAI,eAAe,EAAK,CAAC;QAC5C,UAAU,CAAC,YAAY,GAAG,WAAW,CAAC;QACtC,UAAU,CAAC,WAAW,GAAG,UAAU,CAAC;QAEpC,cAAc;QACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;QAE1B,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,OAAO,EAAE;YACvC,UAAU,CAAC;gBACP,IAAI,KAAI,CAAC,MAAM,KAAK,aAAa,CAAC,SAAS,IAAI,KAAI,CAAC,kBAAkB,EAAE;oBACpE,UAAU,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;iBACrC;qBAAM;oBACH,UAAU,CAAC,OAAO,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;iBACpC;YACL,CAAC,CAAC,CAAC;SACN;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAEO,uCAAa,GAArB,UAAsB,QAA8B;;QAApD,iBAgBC;QAfG,CAAA,KAAA,IAAI,CAAC,SAAS,CAAA,CAAC,IAAI,WAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE;QAE5D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,KAAK;YACzB,KAAK,CAAC,OAAO,GAAG,KAAI,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,SAAS,EAAE;YACzC,KAAoB,UAAc,EAAd,KAAA,IAAI,CAAC,SAAS,EAAd,cAAc,EAAd,IAAc,EAAE;gBAA/B,IAAM,KAAK,SAAA;gBACZ,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAChC;SACJ;aAAM,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,QAAQ,EAAE;YAC/C,KAAoB,UAAc,EAAd,KAAA,IAAI,CAAC,SAAS,EAAd,cAAc,EAAd,IAAc,EAAE;gBAA/B,IAAM,KAAK,SAAA;gBACZ,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/B;SACJ;IACL,CAAC;IAEO,kCAAQ,GAAhB,UAAiB,KAAmB;QAChC,IAAI;YACA,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC;YACtC,IAAI,aAAa,GAAqC,IAAI,CAAC;YAE3D,IAAI,IAAI,CAAC,YAAY,EAAE;gBACnB,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC5C;YAED,IAAI,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,EAAE;gBACvD,IAAyB,aAAc,CAAC,MAAM,KAAK,SAAS,EAAE;oBAC1D,oBAAoB;oBACpB,IAAM,eAAe,GAAG,aAAmC,CAAC;oBAC5D,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC;oBAC/B,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAE9C,KAAK,GAAG,eAAe,CAAC,OAAO,CAAC;iBACnC;qBAAM;oBACH,KAAK,GAAM,aAAa,CAAC;iBAC5B;aACJ;YAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAErB,KAAoB,UAAc,EAAd,KAAA,IAAI,CAAC,SAAS,EAAd,cAAc,EAAd,IAAc,EAAE;gBAA/B,IAAM,KAAK,SAAA;gBACZ,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACzB;YAED,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1B,OAAO,IAAI,CAAC,YAAY,CAAC;YACzB,OAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACzB;IACL,CAAC;IAEO,iCAAO,GAAf,UAAgB,MAAW,EAAE,YAAoB;QAApB,6BAAA,EAAA,oBAAoB;QAC7C,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,YAAY,EAAE;YACnC,IAAI;gBACA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACzB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAClC;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,GAAG,CAAC,CAAC;aACd;SACJ;QAED,KAAoB,UAAc,EAAd,KAAA,IAAI,CAAC,SAAS,EAAd,cAAc,EAAd,IAAc,EAAE;YAA/B,IAAM,KAAK,SAAA;YACZ,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACxB;iBAAM;gBACH,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACzB;SACJ;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC,YAAY,CAAC;QACzB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,gEAAgE;IAClD,uBAAO,GAArB,UAAyB,KAAQ;QAC7B,IAAM,UAAU,GAAG,IAAI,eAAe,EAAK,CAAC;QAE5C,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE3B,OAAO,UAAU,CAAC;IACtB,CAAC;IAEc,uCAAuB,GAAtC,UAA0C,OAA2B,EAAE,SAAoC,EAAE,KAAa;QACtH,OAAO,CAAC,IAAI,CACR,UAAC,KAAmB;YAChB,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YACjC,SAAS,CAAC,KAAK,EAAE,CAAC;YAElB,IAAI,SAAS,CAAC,KAAK,KAAK,SAAS,CAAC,MAAM,EAAE;gBACtC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aACrD;YACD,OAAO,IAAI,CAAC;QAChB,CAAC,EACD,UAAC,MAAW;YACR,IAAI,SAAS,CAAC,WAAW,CAAC,MAAM,KAAK,aAAa,CAAC,QAAQ,EAAE;gBACzD,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACzC;QACL,CAAC,CACJ,CAAC;IACN,CAAC;IAED,gEAAgE;IAClD,mBAAG,GAAjB,UAAqB,QAA8B;QAC/C,IAAM,UAAU,GAAG,IAAI,eAAe,EAAO,CAAC;QAC9C,IAAM,SAAS,GAAG,IAAI,oBAAoB,EAAO,CAAC;QAClD,SAAS,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QACnC,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;QAEnC,IAAI,QAAQ,CAAC,MAAM,EAAE;YACjB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAClD,eAAe,CAAC,uBAAuB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;aAC9E;SACJ;aAAM;YACH,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC3B;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,gEAAgE;IAClD,oBAAI,GAAlB,UAAsB,QAA8B;QAChD,IAAI,UAAU,GAAiC,IAAI,eAAe,EAAE,CAAC;QAErE,IAAI,QAAQ,CAAC,MAAM,EAAE;YACjB,KAAsB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;gBAA3B,IAAM,OAAO,iBAAA;gBACd,OAAO,CAAC,IAAI,CACR,UAAC,KAAmB;oBAChB,IAAI,UAAU,EAAE;wBACZ,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAC3B,UAAU,GAAG,IAAI,CAAC;qBACrB;oBACD,OAAO,IAAI,CAAC;gBAChB,CAAC,EACD,UAAC,MAAW;oBACR,IAAI,UAAU,EAAE;wBACZ,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC3B,UAAU,GAAG,IAAI,CAAC;qBACrB;gBACL,CAAC,CACJ,CAAC;aACL;SACJ;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IACL,sBAAC;AAAD,CAAC,AA3ND,IA2NC;AAED;;GAEG;AACH;IAAA;IAYA,CAAC;IAXG;;;;OAIG;IACW,qBAAK,GAAnB,UAAoB,KAAa;QAAb,sBAAA,EAAA,aAAa;QAC7B,IAAI,KAAK,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YACzC,IAAM,IAAI,GAAQ,MAAM,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC;SAClC;IACL,CAAC;IACL,sBAAC;AAAD,CAAC,AAZD,IAYC","sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\nenum PromiseStates {\r\n    Pending,\r\n    Fulfilled,\r\n    Rejected,\r\n}\r\n\r\nclass FulFillmentAgregator<T> {\r\n    public count = 0;\r\n    public target = 0;\r\n    public rootPromise: InternalPromise<T>;\r\n    public results: any[] = [];\r\n}\r\n\r\nclass InternalPromise<T> {\r\n    private _state = PromiseStates.Pending;\r\n    private _resultValue?: Nullable<T>;\r\n    private _reason: any;\r\n    private _children = new Array<InternalPromise<T>>();\r\n    private _parent: Nullable<InternalPromise<T>>;\r\n    private _onFulfilled?: (fulfillment?: Nullable<T>) => Nullable<InternalPromise<T>> | T;\r\n    private _onRejected?: (reason: any) => void;\r\n    private _rejectWasConsumed = false;\r\n\r\n    private get _result(): Nullable<T> | undefined {\r\n        return this._resultValue;\r\n    }\r\n\r\n    private set _result(value: Nullable<T> | undefined) {\r\n        this._resultValue = value;\r\n\r\n        if (this._parent && this._parent._result === undefined) {\r\n            this._parent._result = value;\r\n        }\r\n    }\r\n\r\n    public constructor(resolver?: (resolve: (value?: Nullable<T>) => void, reject: (reason: any) => void) => void) {\r\n        if (!resolver) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            resolver(\r\n                (value?: Nullable<T>) => {\r\n                    this._resolve(value);\r\n                },\r\n                (reason: any) => {\r\n                    this._reject(reason);\r\n                }\r\n            );\r\n        } catch (e) {\r\n            this._reject(e);\r\n        }\r\n    }\r\n\r\n    public catch(onRejected: (reason: any) => void): InternalPromise<T> {\r\n        return this.then(undefined, onRejected);\r\n    }\r\n\r\n    public then(onFulfilled?: (fulfillment?: Nullable<T>) => Nullable<InternalPromise<T>> | T, onRejected?: (reason: any) => void): InternalPromise<T> {\r\n        const newPromise = new InternalPromise<T>();\r\n        newPromise._onFulfilled = onFulfilled;\r\n        newPromise._onRejected = onRejected;\r\n\r\n        // Composition\r\n        this._children.push(newPromise);\r\n        newPromise._parent = this;\r\n\r\n        if (this._state !== PromiseStates.Pending) {\r\n            setTimeout(() => {\r\n                if (this._state === PromiseStates.Fulfilled || this._rejectWasConsumed) {\r\n                    newPromise._resolve(this._result);\r\n                } else {\r\n                    newPromise._reject(this._reason);\r\n                }\r\n            });\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    private _moveChildren(children: InternalPromise<T>[]): void {\r\n        this._children.push(...children.splice(0, children.length));\r\n\r\n        this._children.forEach((child) => {\r\n            child._parent = this;\r\n        });\r\n\r\n        if (this._state === PromiseStates.Fulfilled) {\r\n            for (const child of this._children) {\r\n                child._resolve(this._result);\r\n            }\r\n        } else if (this._state === PromiseStates.Rejected) {\r\n            for (const child of this._children) {\r\n                child._reject(this._reason);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolve(value?: Nullable<T>): void {\r\n        try {\r\n            this._state = PromiseStates.Fulfilled;\r\n            let returnedValue: Nullable<InternalPromise<T>> | T = null;\r\n\r\n            if (this._onFulfilled) {\r\n                returnedValue = this._onFulfilled(value);\r\n            }\r\n\r\n            if (returnedValue !== undefined && returnedValue !== null) {\r\n                if ((<InternalPromise<T>>returnedValue)._state !== undefined) {\r\n                    // Transmit children\r\n                    const returnedPromise = returnedValue as InternalPromise<T>;\r\n                    returnedPromise._parent = this;\r\n                    returnedPromise._moveChildren(this._children);\r\n\r\n                    value = returnedPromise._result;\r\n                } else {\r\n                    value = <T>returnedValue;\r\n                }\r\n            }\r\n\r\n            this._result = value;\r\n\r\n            for (const child of this._children) {\r\n                child._resolve(value);\r\n            }\r\n\r\n            this._children.length = 0;\r\n            delete this._onFulfilled;\r\n            delete this._onRejected;\r\n        } catch (e) {\r\n            this._reject(e, true);\r\n        }\r\n    }\r\n\r\n    private _reject(reason: any, onLocalThrow = false): void {\r\n        this._state = PromiseStates.Rejected;\r\n        this._reason = reason;\r\n\r\n        if (this._onRejected && !onLocalThrow) {\r\n            try {\r\n                this._onRejected(reason);\r\n                this._rejectWasConsumed = true;\r\n            } catch (e) {\r\n                reason = e;\r\n            }\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            if (this._rejectWasConsumed) {\r\n                child._resolve(null);\r\n            } else {\r\n                child._reject(reason);\r\n            }\r\n        }\r\n\r\n        this._children.length = 0;\r\n        delete this._onFulfilled;\r\n        delete this._onRejected;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static resolve<T>(value: T): InternalPromise<T> {\r\n        const newPromise = new InternalPromise<T>();\r\n\r\n        newPromise._resolve(value);\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    private static _RegisterForFulfillment<T>(promise: InternalPromise<T>, agregator: FulFillmentAgregator<T[]>, index: number) {\r\n        promise.then(\r\n            (value?: Nullable<T>) => {\r\n                agregator.results[index] = value;\r\n                agregator.count++;\r\n\r\n                if (agregator.count === agregator.target) {\r\n                    agregator.rootPromise._resolve(agregator.results);\r\n                }\r\n                return null;\r\n            },\r\n            (reason: any) => {\r\n                if (agregator.rootPromise._state !== PromiseStates.Rejected) {\r\n                    agregator.rootPromise._reject(reason);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static all<T>(promises: InternalPromise<T>[]): InternalPromise<T[]> {\r\n        const newPromise = new InternalPromise<T[]>();\r\n        const agregator = new FulFillmentAgregator<T[]>();\r\n        agregator.target = promises.length;\r\n        agregator.rootPromise = newPromise;\r\n\r\n        if (promises.length) {\r\n            for (let index = 0; index < promises.length; index++) {\r\n                InternalPromise._RegisterForFulfillment(promises[index], agregator, index);\r\n            }\r\n        } else {\r\n            newPromise._resolve([]);\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static race<T>(promises: InternalPromise<T>[]): InternalPromise<T> {\r\n        let newPromise: Nullable<InternalPromise<T>> = new InternalPromise();\r\n\r\n        if (promises.length) {\r\n            for (const promise of promises) {\r\n                promise.then(\r\n                    (value?: Nullable<T>) => {\r\n                        if (newPromise) {\r\n                            newPromise._resolve(value);\r\n                            newPromise = null;\r\n                        }\r\n                        return null;\r\n                    },\r\n                    (reason: any) => {\r\n                        if (newPromise) {\r\n                            newPromise._reject(reason);\r\n                            newPromise = null;\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class that provides a small promise polyfill\r\n */\r\nexport class PromisePolyfill {\r\n    /**\r\n     * Static function used to check if the polyfill is required\r\n     * If this is the case then the function will inject the polyfill to window.Promise\r\n     * @param force defines a boolean used to force the injection (mostly for testing purposes)\r\n     */\r\n    public static Apply(force = false): void {\r\n        if (force || typeof Promise === \"undefined\") {\r\n            const root: any = window;\r\n            root.Promise = InternalPromise;\r\n        }\r\n    }\r\n}\r\n"]}