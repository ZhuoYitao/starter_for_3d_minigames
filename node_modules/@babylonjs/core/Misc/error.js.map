{"version":3,"file":"error.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/error.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD;;;;GAIG;AACH;IAAwC,6BAAK;IAA7C;;IAWA,CAAC;IAVG,yGAAyG;IACzG,oIAAoI;IAEpI,mDAAmD;IAClC,yBAAe,GAC3B,MAAc,CAAC,cAAc;QAC9B,CAAC,UAAC,CAAC,EAAE,KAAK;YACN,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;YACpB,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;IACX,gBAAC;CAAA,AAXD,CAAwC,KAAK,GAW5C;SAXqB,SAAS;AAa/B,8DAA8D;AAC9D;;GAEG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG;IACtB,oBAAoB;IACpB,8CAA8C;IAC9C,yBAAyB,EAAE,CAAC;IAE5B,2BAA2B;IAC3B,iCAAiC;IACjC,uBAAuB,EAAE,IAAI;IAE7B,8BAA8B;IAC9B,yDAAyD;IACzD,8BAA8B,EAAE,IAAI;IAEpC,+BAA+B;IAC/B,yEAAyE;IACzE,gBAAgB,EAAE,IAAI;IAEtB,gCAAgC;IAChC,sBAAsB;IACtB,aAAa,EAAE,IAAI;IACnB,yBAAyB;IACzB,gBAAgB,EAAE,IAAI;IACtB,sBAAsB;IACtB,aAAa,EAAE,IAAI;CACb,CAAC;AAOX;;GAEG;AACH;IAAkC,gCAAS;IAWvC;;;;;OAKG;IACH,sBAAmB,OAAe,EAAE,SAAyB,EAAE,UAAkB;QAAjF,YACI,kBAAM,OAAO,CAAC,SAOjB;QALG,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,KAAI,CAAC,IAAI,GAAG,cAAc,CAAC;QAC3B,SAAS,CAAC,eAAe,CAAC,KAAI,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC;;IAC5D,CAAC;IACL,mBAAC;AAAD,CAAC,AA1BD,CAAkC,SAAS,GA0B1C","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * Base error. Due to limitations of typedoc-check and missing documentation\r\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\r\n * @ignore\r\n */\r\nexport abstract class BaseError extends Error {\r\n    // See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\r\n    // and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n\r\n    // Polyfill for Object.setPrototypeOf if necessary.\r\n    protected static _setPrototypeOf: (o: any, proto: object | null) => any =\r\n        (Object as any).setPrototypeOf ||\r\n        ((o, proto) => {\r\n            o.__proto__ = proto;\r\n            return o;\r\n        });\r\n}\r\n\r\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\r\n/**\r\n * Error codes for BaseError\r\n */\r\nexport const ErrorCodes = {\r\n    // Mesh errors 0-999\r\n    /** Invalid or empty mesh vertex positions. */\r\n    MeshInvalidPositionsError: 0,\r\n\r\n    // Texture errors 1000-1999\r\n    /** Unsupported texture found. */\r\n    UnsupportedTextureError: 1000,\r\n\r\n    // GLTFLoader errors 2000-2999\r\n    /** Unexpected magic number found in GLTF file header. */\r\n    GLTFLoaderUnexpectedMagicError: 2000,\r\n\r\n    // SceneLoader errors 3000-3999\r\n    /** SceneLoader generic error code. Ideally wraps the inner exception. */\r\n    SceneLoaderError: 3000,\r\n\r\n    // File related errors 4000-4999\r\n    /** Load file error */\r\n    LoadFileError: 4000,\r\n    /** Request file error */\r\n    RequestFileError: 4001,\r\n    /** Read file error */\r\n    ReadFileError: 4002,\r\n} as const;\r\n\r\n/**\r\n * Error code type\r\n */\r\nexport type ErrorCodesType = typeof ErrorCodes[keyof typeof ErrorCodes];\r\n\r\n/**\r\n * Application runtime error\r\n */\r\nexport class RuntimeError extends BaseError {\r\n    /**\r\n     * The error code\r\n     */\r\n    public errorCode: ErrorCodesType;\r\n\r\n    /**\r\n     * The error that caused this outer error\r\n     */\r\n    public innerError?: Error;\r\n\r\n    /**\r\n     * Creates a new RuntimeError\r\n     * @param message defines the message of the error\r\n     * @param errorCode the error code\r\n     * @param innerError the error that caused the outer error\r\n     */\r\n    public constructor(message: string, errorCode: ErrorCodesType, innerError?: Error) {\r\n        super(message);\r\n\r\n        this.errorCode = errorCode;\r\n        this.innerError = innerError;\r\n\r\n        this.name = \"RuntimeError\";\r\n        BaseError._setPrototypeOf(this, RuntimeError.prototype);\r\n    }\r\n}\r\n"]}