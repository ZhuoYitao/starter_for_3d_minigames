{"version":3,"file":"computeShaderParticleSystem.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Particles/computeShaderParticleSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { ComputeShader } from \"../Compute/computeShader\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\nimport type { Buffer, VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { GPUParticleSystem } from \"./gpuParticleSystem\";\r\n\r\nimport type { DataArray } from \"../types\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { ComputeBindingMapping } from \"../Engines/Extensions/engine.computeShader\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport \"../ShadersWGSL/gpuUpdateParticles.compute\";\r\n\r\n/** @hidden */\r\nexport class ComputeShaderParticleSystem implements IGPUParticleSystemPlatform {\r\n    private _parent: GPUParticleSystem;\r\n    private _engine: ThinEngine;\r\n    private _updateComputeShader: ComputeShader;\r\n    private _simParamsComputeShader: UniformBuffer;\r\n    private _bufferComputeShader: StorageBuffer[] = [];\r\n    private _renderVertexBuffers: Array<{ [key: string]: VertexBuffer }> = [];\r\n\r\n    public readonly alignDataInBuffer = true;\r\n\r\n    constructor(parent: GPUParticleSystem, engine: ThinEngine) {\r\n        this._parent = parent;\r\n        this._engine = engine;\r\n    }\r\n\r\n    public isUpdateBufferCreated(): boolean {\r\n        return !!this._updateComputeShader;\r\n    }\r\n\r\n    public isUpdateBufferReady(): boolean {\r\n        return this._updateComputeShader?.isReady() ?? false;\r\n    }\r\n\r\n    public createUpdateBuffer(defines: string): UniformBufferEffectCommonAccessor {\r\n        const bindingsMapping: ComputeBindingMapping = {\r\n            params: { group: 0, binding: 0 },\r\n            particlesIn: { group: 0, binding: 1 },\r\n            particlesOut: { group: 0, binding: 2 },\r\n            randomTexture: { group: 0, binding: 3 },\r\n            randomTexture2: { group: 0, binding: 4 },\r\n        };\r\n        if (this._parent._sizeGradientsTexture) {\r\n            bindingsMapping[\"sizeGradientTexture\"] = { group: 1, binding: 1 };\r\n        }\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            bindingsMapping[\"angularSpeedGradientTexture\"] = { group: 1, binding: 3 };\r\n        }\r\n        if (this._parent._velocityGradientsTexture) {\r\n            bindingsMapping[\"velocityGradientTexture\"] = { group: 1, binding: 5 };\r\n        }\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            bindingsMapping[\"limitVelocityGradientTexture\"] = { group: 1, binding: 7 };\r\n        }\r\n        if (this._parent._dragGradientsTexture) {\r\n            bindingsMapping[\"dragGradientTexture\"] = { group: 1, binding: 9 };\r\n        }\r\n        if (this._parent.noiseTexture) {\r\n            bindingsMapping[\"noiseTexture\"] = { group: 1, binding: 11 };\r\n        }\r\n\r\n        this._updateComputeShader = new ComputeShader(\"updateParticles\", this._engine, \"gpuUpdateParticles\", { bindingsMapping, defines: defines.split(\"\\n\") });\r\n\r\n        this._simParamsComputeShader?.dispose();\r\n        this._simParamsComputeShader = new UniformBuffer(this._engine);\r\n\r\n        this._simParamsComputeShader.addUniform(\"currentCount\", 1);\r\n        this._simParamsComputeShader.addUniform(\"timeDelta\", 1);\r\n        this._simParamsComputeShader.addUniform(\"stopFactor\", 1);\r\n        this._simParamsComputeShader.addUniform(\"randomTextureSize\", 1);\r\n        this._simParamsComputeShader.addUniform(\"lifeTime\", 2);\r\n        this._simParamsComputeShader.addUniform(\"emitPower\", 2);\r\n        if (!this._parent._colorGradientsTexture) {\r\n            this._simParamsComputeShader.addUniform(\"color1\", 4);\r\n            this._simParamsComputeShader.addUniform(\"color2\", 4);\r\n        }\r\n        this._simParamsComputeShader.addUniform(\"sizeRange\", 2);\r\n        this._simParamsComputeShader.addUniform(\"scaleRange\", 4);\r\n        this._simParamsComputeShader.addUniform(\"angleRange\", 4);\r\n        this._simParamsComputeShader.addUniform(\"gravity\", 3);\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._simParamsComputeShader.addUniform(\"limitVelocityDamping\", 1);\r\n        }\r\n        if (this._parent.isAnimationSheetEnabled) {\r\n            this._simParamsComputeShader.addUniform(\"cellInfos\", 4);\r\n        }\r\n        if (this._parent.noiseTexture) {\r\n            this._simParamsComputeShader.addUniform(\"noiseStrength\", 3);\r\n        }\r\n        if (!this._parent.isLocal) {\r\n            this._simParamsComputeShader.addUniform(\"emitterWM\", 16);\r\n        }\r\n        if (this._parent.particleEmitterType) {\r\n            this._parent.particleEmitterType.buildUniformLayout(this._simParamsComputeShader);\r\n        }\r\n\r\n        this._updateComputeShader.setUniformBuffer(\"params\", this._simParamsComputeShader);\r\n\r\n        return new UniformBufferEffectCommonAccessor(this._simParamsComputeShader);\r\n    }\r\n\r\n    public createVertexBuffers(updateBuffer: Buffer, renderVertexBuffers: { [key: string]: VertexBuffer }): void {\r\n        this._renderVertexBuffers.push(renderVertexBuffers);\r\n    }\r\n\r\n    public createParticleBuffer(data: number[]): DataArray | DataBuffer {\r\n        const buffer = new StorageBuffer(this._engine, data.length * 4, Constants.BUFFER_CREATIONFLAG_READWRITE | Constants.BUFFER_CREATIONFLAG_VERTEX);\r\n\r\n        buffer.update(data);\r\n        this._bufferComputeShader.push(buffer);\r\n\r\n        return buffer.getBuffer();\r\n    }\r\n\r\n    public bindDrawBuffers(index: number, effect: Effect): void {\r\n        this._engine.bindBuffers(this._renderVertexBuffers[index], null, effect);\r\n    }\r\n\r\n    public preUpdateParticleBuffer(): void {}\r\n\r\n    public updateParticleBuffer(index: number, targetBuffer: Buffer, currentActiveCount: number): void {\r\n        this._simParamsComputeShader.update();\r\n\r\n        this._updateComputeShader.setTexture(\"randomTexture\", this._parent._randomTexture, false);\r\n        this._updateComputeShader.setTexture(\"randomTexture2\", this._parent._randomTexture2, false);\r\n        if (this._parent._sizeGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"sizeGradientTexture\", this._parent._sizeGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"angularSpeedGradientTexture\", this._parent._angularSpeedGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._velocityGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"velocityGradientTexture\", this._parent._velocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"limitVelocityGradientTexture\", this._parent._limitVelocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._dragGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"dragGradientTexture\", this._parent._dragGradientsTexture);\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateComputeShader.setTexture(\"noiseTexture\", this._parent.noiseTexture);\r\n        }\r\n\r\n        this._updateComputeShader.setStorageBuffer(\"particlesIn\", this._bufferComputeShader[index]);\r\n        this._updateComputeShader.setStorageBuffer(\"particlesOut\", this._bufferComputeShader[index ^ 1]);\r\n\r\n        this._updateComputeShader.dispatch(Math.ceil(currentActiveCount / 64));\r\n    }\r\n\r\n    public releaseBuffers(): void {\r\n        for (let i = 0; i < this._bufferComputeShader.length; ++i) {\r\n            this._bufferComputeShader[i].dispose();\r\n        }\r\n\r\n        this._bufferComputeShader = [];\r\n\r\n        this._simParamsComputeShader?.dispose();\r\n        (<any>this._simParamsComputeShader) = null;\r\n\r\n        (<any>this._updateComputeShader) = null;\r\n    }\r\n\r\n    public releaseVertexBuffers(): void {\r\n        this._renderVertexBuffers = [];\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ComputeShaderParticleSystem\", ComputeShaderParticleSystem);\r\n"]}