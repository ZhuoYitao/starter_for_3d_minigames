{"version":3,"file":"geometryBufferRendererSceneComponent.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/geometryBufferRendererSceneComponent.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAEjC,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAG5D,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AA0BlE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,wBAAwB,EAAE;IAC7D,GAAG,EAAE;QACD,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC,CAAC;IACD,GAAG,EAAE,UAAuB,KAAuC;QAC/D,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE;YAC5B,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;SACxC;IACL,CAAC;IACD,UAAU,EAAE,IAAI;IAChB,YAAY,EAAE,IAAI;CACrB,CAAC,CAAC;AAEH,KAAK,CAAC,SAAS,CAAC,4BAA4B,GAAG,UAAU,KAAiB;IAAjB,sBAAA,EAAA,SAAiB;IACtE,IAAI,IAAI,CAAC,uBAAuB,EAAE;QAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC;KACvC;IAED,IAAI,CAAC,uBAAuB,GAAG,IAAI,sBAAsB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACvE,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE;QAC3C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;KACvC;IAED,OAAO,IAAI,CAAC,uBAAuB,CAAC;AACxC,CAAC,CAAC;AAEF,KAAK,CAAC,SAAS,CAAC,6BAA6B,GAAG;IAC5C,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;QAC/B,OAAO;KACV;IAED,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;IACvC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;AACxC,CAAC,CAAC;AAEF;;;GAGG;AACH;IAWI;;;OAGG;IACH,8CAAY,KAAY;QAdxB;;WAEG;QACa,SAAI,GAAG,uBAAuB,CAAC,2BAA2B,CAAC;QAYvE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,uDAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,YAAY,CAAC,uBAAuB,CAAC,+CAA+C,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAChK,CAAC;IAED;;;OAGG;IACI,sDAAO,GAAd;QACI,mCAAmC;IACvC,CAAC;IAED;;OAEG;IACI,sDAAO,GAAd;QACI,mCAAmC;IACvC,CAAC;IAEO,mEAAoB,GAA5B,UAA6B,aAAyD;QAClF,IAAI,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;YACpC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,UAAU,EAAE,CAAC,CAAC;SACvE;IACL,CAAC;IACL,2CAAC;AAAD,CAAC,AA9CD,IA8CC;;AAED,sBAAsB,CAAC,6BAA6B,GAAG,UAAC,KAAY;IAChE,gDAAgD;IAChD,IAAI,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,uBAAuB,CAAC,2BAA2B,CAAyC,CAAC;IACjI,IAAI,CAAC,SAAS,EAAE;QACZ,SAAS,GAAG,IAAI,oCAAoC,CAAC,KAAK,CAAC,CAAC;QAC5D,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;KAClC;AACL,CAAC,CAAC","sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { SmartArrayNoDuplicate } from \"../Misc/smartArray\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { GeometryBufferRenderer } from \"./geometryBufferRenderer\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _geometryBufferRenderer: Nullable<GeometryBufferRenderer>;\r\n\r\n        /**\r\n         * Gets or Sets the current geometry buffer associated to the scene.\r\n         */\r\n        geometryBufferRenderer: Nullable<GeometryBufferRenderer>;\r\n\r\n        /**\r\n         * Enables a GeometryBufferRender and associates it with the scene\r\n         * @param ratio defines the scaling ratio to apply to the renderer (1 by default which means same resolution)\r\n         * @returns the GeometryBufferRenderer\r\n         */\r\n        enableGeometryBufferRenderer(ratio?: number): Nullable<GeometryBufferRenderer>;\r\n\r\n        /**\r\n         * Disables the GeometryBufferRender associated with the scene\r\n         */\r\n        disableGeometryBufferRenderer(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"geometryBufferRenderer\", {\r\n    get: function (this: Scene) {\r\n        return this._geometryBufferRenderer;\r\n    },\r\n    set: function (this: Scene, value: Nullable<GeometryBufferRenderer>) {\r\n        if (value && value.isSupported) {\r\n            this._geometryBufferRenderer = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.enableGeometryBufferRenderer = function (ratio: number = 1): Nullable<GeometryBufferRenderer> {\r\n    if (this._geometryBufferRenderer) {\r\n        return this._geometryBufferRenderer;\r\n    }\r\n\r\n    this._geometryBufferRenderer = new GeometryBufferRenderer(this, ratio);\r\n    if (!this._geometryBufferRenderer.isSupported) {\r\n        this._geometryBufferRenderer = null;\r\n    }\r\n\r\n    return this._geometryBufferRenderer;\r\n};\r\n\r\nScene.prototype.disableGeometryBufferRenderer = function (): void {\r\n    if (!this._geometryBufferRenderer) {\r\n        return;\r\n    }\r\n\r\n    this._geometryBufferRenderer.dispose();\r\n    this._geometryBufferRenderer = null;\r\n};\r\n\r\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class GeometryBufferRendererSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._geometryBufferRenderer) {\r\n            renderTargets.push(this.scene._geometryBufferRenderer.getGBuffer());\r\n        }\r\n    }\r\n}\r\n\r\nGeometryBufferRenderer._SceneComponentInitialization = (scene: Scene) => {\r\n    // Register the G Buffer component to the scene.\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER) as GeometryBufferRendererSceneComponent;\r\n    if (!component) {\r\n        component = new GeometryBufferRendererSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]}