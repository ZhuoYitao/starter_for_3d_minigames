{"version":3,"file":"depthPeelingSceneComponent.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/depthPeelingSceneComponent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAEjC,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAoB9D,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,sBAAsB,EAAE;IAC3D,GAAG,EAAE;QACD,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAC7B,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,yBAAyB,CAA+B,CAAC;YACpH,IAAI,CAAC,SAAS,EAAE;gBACZ,SAAS,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aACjC;SACJ;QAED,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IACD,GAAG,EAAE,UAAuB,KAA2B;QACnD,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IACvC,CAAC;IACD,UAAU,EAAE,IAAI;IAChB,YAAY,EAAE,IAAI;CACrB,CAAC,CAAC;AAEH,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,iCAAiC,EAAE;IACtE,GAAG,EAAE;QACD,OAAO,IAAI,CAAC,gCAAgC,CAAC;IACjD,CAAC;IACD,GAAG,EAAE,UAAuB,KAAc;;QACtC,IAAI,IAAI,CAAC,gCAAgC,KAAK,KAAK,EAAE;YACjD,OAAO;SACV;QACD,IAAI,CAAC,gCAAgC,GAAG,KAAK,CAAC;QAC9C,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QAC9D,MAAA,IAAI,CAAC,eAAe,0CAAE,WAAW,EAAE,CAAC;IACxC,CAAC;IACD,UAAU,EAAE,IAAI;IAChB,YAAY,EAAE,IAAI;CACrB,CAAC,CAAC;AAEH;;GAEG;AACH;IAWI;;;OAGG;IACH,oCAAY,KAAY;QAdxB;;WAEG;QACa,SAAI,GAAG,uBAAuB,CAAC,yBAAyB,CAAC;QAYrE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,KAAK,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACI,6CAAQ,GAAf,cAAyB,CAAC;IAE1B;;;OAGG;IACI,4CAAO,GAAd,cAAwB,CAAC;IAEzB;;OAEG;IACI,4CAAO,GAAd;;QACI,MAAA,IAAI,CAAC,KAAK,CAAC,oBAAoB,0CAAE,OAAO,EAAE,CAAC;QAC3C,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC;IAC3C,CAAC;IACL,iCAAC;AAAD,CAAC,AAvCD,IAuCC","sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport { Scene } from \"../scene\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DepthPeelingRenderer } from \"./depthPeelingRenderer\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * The depth peeling renderer\r\n         */\r\n        depthPeelingRenderer: Nullable<DepthPeelingRenderer>;\r\n        /** @hidden (Backing field) */\r\n        _depthPeelingRenderer: Nullable<DepthPeelingRenderer>;\r\n\r\n        /**\r\n         * Flag to indicate if we want to use order independent transparency, despite the performance hit\r\n         */\r\n        useOrderIndependentTransparency: boolean;\r\n        /** @hidden */\r\n        _useOrderIndependentTransparency: boolean;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"depthPeelingRenderer\", {\r\n    get: function (this: Scene) {\r\n        if (!this._depthPeelingRenderer) {\r\n            let component = this._getComponent(SceneComponentConstants.NAME_DEPTHPEELINGRENDERER) as DepthPeelingSceneComponent;\r\n            if (!component) {\r\n                component = new DepthPeelingSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n\r\n        return this._depthPeelingRenderer;\r\n    },\r\n    set: function (this: Scene, value: DepthPeelingRenderer) {\r\n        this._depthPeelingRenderer = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"useOrderIndependentTransparency\", {\r\n    get: function (this: Scene) {\r\n        return this._useOrderIndependentTransparency;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        if (this._useOrderIndependentTransparency === value) {\r\n            return;\r\n        }\r\n        this._useOrderIndependentTransparency = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\r\n        this.prePassRenderer?.markAsDirty();\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Scene component to render order independent transparency with depth peeling\r\n */\r\nexport class DepthPeelingSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_DEPTHPEELINGRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        scene.depthPeelingRenderer = new DepthPeelingRenderer(scene);\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {}\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {}\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        this.scene.depthPeelingRenderer?.dispose();\r\n        this.scene.depthPeelingRenderer = null;\r\n    }\r\n}\r\n"]}