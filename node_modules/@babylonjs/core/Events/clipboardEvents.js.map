{"version":3,"file":"clipboardEvents.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Events/clipboardEvents.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH;IAAA;IAcA,CAAC;IAbG;;OAEG;IACoB,wBAAI,GAAG,IAAI,CAAC,CAAC,EAAE;IACtC;;OAEG;IACoB,uBAAG,GAAG,IAAI,CAAC;IAElC;;OAEG;IACoB,yBAAK,GAAG,IAAI,CAAC;IACxC,0BAAC;CAAA,AAdD,IAcC;SAdY,mBAAmB;AAehC;;GAEG;AACH;IACI;;;;OAIG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,KAAqB;QAJrB,SAAI,GAAJ,IAAI,CAAQ;QAIZ,UAAK,GAAL,KAAK,CAAgB;IAC7B,CAAC;IAEJ;;;;OAIG;IACW,kCAAoB,GAAlC,UAAmC,OAAe;QAC9C,IAAM,QAAQ,GAAG,OAAO,CAAC;QACzB,oCAAoC;QACpC,QAAQ,QAAQ,EAAE;YACd,KAAK,EAAE;gBACH,OAAO,mBAAmB,CAAC,IAAI,CAAC;YACpC,KAAK,EAAE;gBACH,OAAO,mBAAmB,CAAC,KAAK,CAAC;YACrC,KAAK,EAAE;gBACH,OAAO,mBAAmB,CAAC,GAAG,CAAC;YACnC;gBACI,OAAO,CAAC,CAAC,CAAC;SACjB;IACL,CAAC;IACL,oBAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["/**\r\n * Gather the list of clipboard event types as constants.\r\n */\r\nexport class ClipboardEventTypes {\r\n    /**\r\n     * The clipboard event is fired when a copy command is active (pressed).\r\n     */\r\n    public static readonly COPY = 0x01; //\r\n    /**\r\n     *  The clipboard event is fired when a cut command is active (pressed).\r\n     */\r\n    public static readonly CUT = 0x02;\r\n\r\n    /**\r\n     * The clipboard event is fired when a paste command is active (pressed).\r\n     */\r\n    public static readonly PASTE = 0x03;\r\n}\r\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\r\nexport class ClipboardInfo {\r\n    /**\r\n     *Creates an instance of ClipboardInfo.\r\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: ClipboardEvent\r\n    ) {}\r\n\r\n    /**\r\n     *  Get the clipboard event's type from the keycode.\r\n     * @param keyCode Defines the keyCode for the current keyboard event.\r\n     * @return {number}\r\n     */\r\n    public static GetTypeFromCharacter(keyCode: number): number {\r\n        const charCode = keyCode;\r\n        //TODO: add codes for extended ASCII\r\n        switch (charCode) {\r\n            case 67:\r\n                return ClipboardEventTypes.COPY;\r\n            case 86:\r\n                return ClipboardEventTypes.PASTE;\r\n            case 88:\r\n                return ClipboardEventTypes.CUT;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n}\r\n"]}